var bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; };
require.config({ paths: { "CreateReactClass": 'react/create-react-class' } });
define('Util.Browser', ['Modernizr', 'jquery'], function (Modernizr, $) {
	var $siteHeader = $('#site-header');
	var Browser;
	Browser = {
		Breakpoints: {
			Width: {
				mobile: function () {
					return Modernizr.mq('(max-width: 767px)');
				},
				tablet: function () {
					return Modernizr.mq('(min-width: 768px) and (max-width: 1024px)');
				},
				desktop: function () {
					return Modernizr.mq('(min-width: 1025px)');
				}
			},
			MOBILE: 'mobile',
			DESKTOP: 'desktop',
			TABLET: 'tablet'
		},
		Orientation: {
			landscape: function () {
				return Modernizr.mq('(orientation: landscape)');
			},
			portrait: function () {
				return Modernizr.mq('(orientation: portrait)');
			}
		}
	};
	Browser.getBreakpoint = function () {
		if (Browser.Breakpoints.Width.mobile()) {
			return Browser.Breakpoints.MOBILE;
		}
		if (Browser.Breakpoints.Width.tablet()) {
			return Browser.Breakpoints.TABLET;
		}
		if (Browser.Breakpoints.Width.desktop()) {
			return Browser.Breakpoints.DESKTOP;
		}
	};
	Browser.getOrientation = function () {
		if (Browser.Orientation.landscape()) {
			return 'landscape';
		}
		if (Browser.Orientation.portrait()) {
			return 'portrait';
		}
	};
	Browser.getViewportHeight = function () {
		return document.documentElement.clientHeight;
	};
	Browser.getViewportWidth = function () {
		return document.documentElement.clientWidth;
	};
	Browser.getScrollTop = function () {
		return document.documentElement.scrollTop || document.body.scrollTop;
	};
	Browser.getScrollBottom = function () {
		return Browser.getScrollTop() + document.documentElement.clientHeight;
	};
	Browser.getScrollElement = function () {
		if (document.documentElement.scrollTop === 0) {
			document.documentElement.scrollTop = 1;
		}
		if (document.documentElement.scrollTop !== 0) {
			return document.documentElement;
		} else {
			return document.body;
		}
	};
	Browser.getScrollMiddle = function () {
		return Browser.getScrollTop() + Math.round(document.documentElement.clientHeight / 2);
	};
	Browser.isDesktop = function () {
		return Browser.Breakpoints.Width.desktop();
	};
	Browser.isMobile = function () {
		return Browser.Breakpoints.Width.mobile();
	};
	Browser.isTablet = function () {
		return Browser.Breakpoints.Width.tablet();
	};
	Browser.scrollTo = function (el, speed, padding) {
		return $('html,body').animate({ scrollTop: $(el).offset().top - ($siteHeader.outerHeight() + (padding || 0)) }, speed || 250);
	};

	return Browser;
});

define('Util.String', [], function () {
	var StringUtil;

	StringUtil = {
		format: function () {
			var args = [].slice.call(arguments),
				template = args.shift();

			var fnTemplate = function () {
				var fn_args = [].slice.call(arguments), s = template, i = fn_args.length;

				while (i--) {
					s = s.replace(new RegExp('\\{' + i + '\\}', 'gm'), fn_args[i]);
				}
				return s;
			};

			// allows for caching of format template
			return args.length ? fnTemplate.apply(null, args) : fnTemplate;
		}
	};

	return StringUtil;
});

define('Util.Ajax', ['jquery'], function ($) {
	var AjaxUtil = {
		getUrl: function (action, params) {
			var _self = this;

			var qs = params ? ('?' + $.param(params)) : '',
				urls = window.Urls || {},
				url;

			if (!action) {
				throw 'An action value is required!';
			}

			if (urls[action]) {
				// url exists, return resolved promise with url and query string
				return $.Deferred().resolve(urls[action] + qs);
			}

			// url not found using action. get url from server and cache in
			// window.Urls
			return $.ajax({
				url: urls.getUrl + '?action=' + action,
				dataType: 'json'
			}).then(function (data, status, xhr) {
				// cache url
				window.Urls[action] = data.url;
				// return promise with url and query string
				return data.url + qs;
			});
		},
		ajaxAction: function (action, settings) {
			// if action is string, set first args value to string value
			// otherwise first set args value to action.action
			var isString = typeof action === 'string',
				args = [isString ? action : action.action];

			// if action is an object, get the params to be used for the query
			// string
			if (!isString && action.params) {
				args.push(action.params);
			}

			// call this.getUrl using apply and argument list
			// returns ajax promise as result of ajaxAction
			return this.getUrl.apply(null, args).then(function (url) {
				// this.getUrl returns promise with url value
				// use returned url value to make ajax call
				// return ajax promise as result of ajaxAction
				return $.ajax($.extend(settings || {}, { url: url }));
			});
		},
		actionPostJson: function (action, data) {
			var _self = this;
			var settings = {
				method: AjaxUtil.METHODS.post,
				contentType: AjaxUtil.CONTENT_TYPES.json,
				data: typeof data === 'string' ? data : JSON.stringify(data)
			};

			return this.ajaxAction(action, settings);
		},
		actionGetJson: function (action, data) {
			var _self = this;
			var settings = {
				dataType: 'json'
			};

			if (data) {
				settings.data = data;
			}

			return this.ajaxAction(action, settings);
		},
		getMsg: function () {
			var args = arguments,
				action = { action: 'resource-msg' },
				messages = window.Resources,
				msgList,
				filteredList,
				key;

			if (args.length === 1 && typeof args[0] !== 'string') {
				msgList = args[0];

				filteredList = msgList.filter(function (msg) {
					key = $.param({ key: msg.key, bundle: msg.bundle });
					if (!messages[key]) {
						return true;
					}

					msg.message = messages[key];
					return false;
				});

				if (!filteredList.length) {
					return $.Deferred().resolve(msgList);
				}

				return AjaxUtil.actionPostJson('resource-msg', { messages: filteredList }).then(function (response) {
					response.messages.forEach(function (msg) {
						// cache in resources
						var params = { key: msg.key, bundle: msg.bundle };
						window.Resources[$.param(params)] = msg.message;
						_.extend(_.findWhere(msgList, params), msg);
					});

					return msgList;
				});
			}

			if (args.length !== 2) {
				return $.Deferred().resolve();
			}

			action.params = { key: args[0], bundle: args[1] };

			key = $.param(action.params);

			if (messages[key]) {
				return $.Deferred().resolve(messages[key]);
			}

			return AjaxUtil.actionGetJson(action).then(function (data) {
				if (!data.msg || !data.msg.length) {
					try { AjaxUtil.postLog('No message for args: ' + args.join()); } catch (ex) { }
				}

				if (data.msg) {
					window.Resources[key] = data.msg;
				}
				return data.msg || '';
			});

		},
		postLog: function (o) {
			var _self = this,
				ctx = window.pageContext,
				data = (typeof o === 'string') ? { msg: o } : o,
				err = new Error(),
				stack = null;

			if (err.stack) {
				stack = err.stack.split('\n').slice(1).join('\n');
			}

			$.extend(data, {
				type: data.type || 'info',
				pc: ctx ? $.extend({}, ctx, { cd: _.pick(ctx.cd, ['dwid', 'status']) }) : null,
				stack: stack
			});

			return AjaxUtil.ajaxAction('resource-log', {
				method: 'post',
				contentType: AjaxUtil.CONTENT_TYPES.json,
				data: JSON.stringify(data),
				error: null
			});
		},
		METHODS: {
			"get": "GET",
			"post": "POST",
			"delete": "DELETE",
			"patch": "PATCH",
			"put": "PUT"
		},
		CONTENT_TYPES: {
			json: 'application/json',
			javascript: 'application/javascript',
			xml: 'text/xml',
			text: 'text/plain'
		}
	};

	return AjaxUtil;
});

define('ViewportCommandBusSingleton', [], function () {
	var ViewportCommandBus, viewportCommandBus;
	ViewportCommandBus = (function () {
		var _runCommand, commandInProgress, queue;

		function ViewportCommandBus() { }

		queue = [];

		commandInProgress = false;

		_runCommand = function () {
			if (queue.length && !commandInProgress) {
				commandInProgress = true;
				queue.shift()();
			}
			return window.requestAnimationFrame(_runCommand);
		};

		ViewportCommandBus.prototype.push = function (command) {
			if (!commandInProgress) {
				return queue.push(command);
			}
		};

		ViewportCommandBus.prototype.runCommand = _runCommand;

		ViewportCommandBus.prototype.completeCommand = function () {
			return commandInProgress = false;
		};

		return ViewportCommandBus;

	})();
	viewportCommandBus = new ViewportCommandBus();
	viewportCommandBus.runCommand();
	return viewportCommandBus;
});

define('Flux.Constants', [], function () {
	return {
		'WINDOW_RESIZE': 'WINDOW_RESIZE',
		'WINDOW_SCROLL': 'WINDOW_SCROLL',
		'ORIENTATION_CHANGED': 'ORIENTATION_CHANGED',
		'CHANGE_PANEL': 'CHANGE_PANEL',
		'OPEN_HEADER_NAV': 'OPEN_HEADER_NAV',
		'CLOSE_HEADER_NAV': 'CLOSE_HEADER_NAV',
		'SET_HEADER_STICKINESS': 'SET_HEADER_STICKINESS',
		'UPDATE_HEADER_NAV_DATA': 'UPDATE_HEADER_NAV_DATA',
		'UPDATE_CART': 'UPDATE_CART',
		'FOCUS_SEARCH_FIELD': 'FOCUS_SEARCH_FIELD',
		'START_AUTOCOMPLETE_GET': 'START_AUTOCOMPLETE_GET',
		'UPDATE_AUTOCOMPLETE_LIST': 'UPDATE_AUTOCOMPLETE_LIST',
		'BUILD_A_BOX': {
			'SELECT_FLAVOR': 'SELECT_FLAVOR',
			'DESELECT_FLAVOR': 'DESELECT_FLAVOR',
			'SET_FLAVOR_SELECTIONS': 'SET_FLAVOR_SELECTIONS',
			'ADD_FLAVOR_SELECTION': 'ADD_FLAVOR_SELECTION',
			'REMOVE_FLAVOR_SELECTION': 'REMOVE_FLAVOR_SELECTION',
			'CLEAR_FLAVOR_SELECTIONS': 'CLEAR_FLAVOR_SELECTIONS',
			'ADD_FLAVOR_BY_PID': 'ADD_FLAVOR_BY_PID',
			'SLIDER': {
				'START_DRAG_SLIDER': 'START_DRAG_SLIDER',
				'DRAG_SLIDER': 'DRAG_SLIDER',
				'END_DRAG_SLIDER': 'END_DRAG_SLIDER',
				'UPDATE_PERCENTAGE': 'UPDATE_PERCENTAGE',
				'ADD_MORE': 'ADD_MORE',
				'ADD_LESS': 'ADD_LESS',
				'PUT_HANDLE': 'PUT_HANDLE',
				'EMPTY': 'EMPTY',
				'REFRESH': 'REFRESH'
			},
			'SELECT_CATEGORY': 'SELECT_CATEGORY',
			'DESELECT_CATEGORY': 'DESELECT_CATEGORY',
			'LOCK_CATEGORY_BAR': 'LOCK_CATEGORY_BAR',
			'UNLOCK_CATEGORY_BAR': 'UNLOCK_CATEGORY_BAR',
			'SELECT_BOX_WEIGHT': 'SELECT_BOX_WEIGHT',
			'GO_TO_STEP': 'GO_TO_STEP',
			'SELECT_STEP': 'SELECT_STEP',
			'CHANGE_FEATURE_WINDOW_TAB': 'CHANGE_FEATURE_WINDOW_TAB',
			'HEIGHT_COULDVE_CHANGED': 'HEIGHT_COULDVE_CHANGED',
			'INCREMENT_BOX_QUANTITY': 'INCREMENT_BOX_QUANTITY',
			'DECREMENT_BOX_QUANTITY': 'DECREMENT_BOX_QUANTITY',
			'SET_BOX_QUANTITY': 'SET_BOX_QUANTITY',
			'HYDRATE_FLAVOR_GRID_STORE': 'HYDRATE_FLAVOR_GRID_STORE',
			'HYDRATE_BOX_WEIGHT_STORE': 'HYDRATE_BOX_WEIGHT_STORE',
			'HYDRATE_BOX_VARIANT_STORE': 'HYDRATE_BOX_VARIANT_STORE',
			'HYDRATE_FLAVOR_SELECTION_STORE': 'HYDRATE_FLAVOR_SELECTION_STORE',
			'SET_PLI_UUID': 'SET_PLI_UUID',
			'NEXT_FLAVOR_PAGE': 'NEXT_FLAVOR_PAGE',
			'PREVIOUS_FLAVOR_PAGE': 'PREVIOUS_FLAVOR_PAGE',
			'AUTO_ADJUST_QUANTITY': 'AUTO_ADJUST_QUANTITY',
			'SELECT_BOX_WRAP': 'SELECT_BOX_WRAP',
			'UNLOCK_ALL': 'UNLOCK_ALL',
			'LOCK_ALL_EXCEPT': 'LOCK_ALL_EXCEPT'
		},
		'SHIPPING_CALENDAR': {
			'FETCH_SHIPPING': 'FETCH_SHIPPING',
			'FETCH_SHIPPING_START': 'FETCH_SHIPPING_START',
			'FETCH_SHIPPING_SUCCESS': 'FETCH_SHIPPING_SUCCESS',
			'FETCH_SHIPPING_ERROR': 'FETCH_SHIPPING_ERROR',
			'GOTO_DATE': 'GOTO_DATE',
			'SELECT_SHIPPING_TYPE': 'SELECT_SHIPPING_TYPE',
			'SELECT_DELIVERY': 'SELECT_DELIVERY',
			'SET_INITIALIZED': 'SET_INITIALIZED',
			'SET_SHIPPING_PROMOS': 'SET_SHIPPING_PROMOS'
		}
	};
});

define('Flux.Stores.BrowserStore', ['Fluxxor', 'Util.Browser', 'Flux.Constants'], function (Fluxxor, Browser, cs) {

	return Fluxxor.createStore({
		initialize: function () {
			var actions;
			this.properties = {
				scrollTop: Browser.getScrollTop(),
				scrollBottom: Browser.getScrollBottom(),
				scrollMiddle: Browser.getScrollMiddle(),
				viewportHeight: Browser.getViewportHeight(),
				viewportWidth: Browser.getViewportWidth(),
				breakpoint: Browser.getBreakpoint(),
				previousBreakpoint: null,
				orientation: Browser.getOrientation(),
				previousOrientation: null,
				resized: false,
				scrolled: false,
				breakpointChanged: false
			};
			actions = {};
			actions[cs.WINDOW_RESIZE] = this.onWindowResize;
			actions[cs.WINDOW_SCROLL] = this.onWindowScroll;
			actions[cs.ORIENTATION_CHANGED] = this.onOrientationChanged;
			return this.bindActions(actions);
		},
		updateState: function () {
			var breakpoint = Browser.getBreakpoint();

			this.properties.viewportHeight = Browser.getViewportHeight();
			this.properties.viewportWidth = Browser.getViewportWidth();
			this.properties.breakpointChanged = !this.properties.previousBreakpoint || breakpoint !== this.properties.breakpoint;
			this.properties.previousBreakpoint = this.properties.breakpoint;
			this.properties.breakpoint = breakpoint;
			this.properties.orientation = Browser.getOrientation();
			this.properties.scrollTop = Browser.getScrollTop();
			this.properties.scrollBottom = Browser.getScrollBottom();
			this.properties.scrollMiddle = Browser.getScrollMiddle();
			return this.emit('change');
		},
		onWindowResize: function () {
			var orientation = Browser.getOrientation(),
				breakpoint = Browser.getBreakpoint();

			this.properties.viewportHeight = Browser.getViewportHeight();
			this.properties.viewportWidth = Browser.getViewportWidth();
			this.properties.breakpointChanged = !this.properties.previousBreakpoint || breakpoint !== this.properties.breakpoint;
			this.properties.previousBreakpoint = this.properties.breakpoint;
			this.properties.breakpoint = breakpoint;
			this.properties.resized = true;

			window.setTimeout((function (_this) {
				return function () {
					_this.properties.resized = false;
					return _this.emit('change');
				};
			})(this), 0);

			if (orientation !== this.properties.orientation) {
				this.properties.previousOrientation = this.properties.orientation;
				this.properties.orientation = orientation;
			}

			return this.emit('change');

		},
		onWindowScroll: function () {
			this.properties.breakpointChanged = false;
			this.properties.scrollTop = Browser.getScrollTop();
			this.properties.scrollBottom = Browser.getScrollBottom();
			this.properties.scrollMiddle = Browser.getScrollMiddle();

			return this.emit('change');
		},
		onOrientationChanged: function () {
			this.properties.previousOrientation = this.properties.orientation;
			this.properties.orientation = Browser.getOrientation();
			return this.emit('change');
		},
		getState: function () {
			return {
				properties: this.properties
			};
		}
	});
});

define('Flux.Stores.CartStore', ['Fluxxor', 'Flux.Constants', 'lodash'], function (Fluxxor, cs, _) {

	return Fluxxor.createStore({
		initialize: function () {
			var actions;
			var cart = window.app.cart || {};
			this.cartShowURL = window.Urls.cartShow;
			this.cartQty = cart.cartQty;
			this.cartPrice = cart.cartTotalPrice;
			this.totalQuantityMarkup = '';
			this.shipmentCount = cart.shipmentCount;
			this.cartData = cart.cartData;
			this.cartState = {
				totalCartQty: this.cartQty,
				totalCartPrice: this.cartPrice,
				cartShowURL: this.cartShowURL,
				shipmentCount: this.shipmentCount,
				lineItems: this.cartData
			};
			actions = {};
			actions[cs.UPDATE_CART] = this.updateCart;
			return this.bindActions(actions);
		},
		updateCart: function (payload) {
			var newCartData;

			newCartData = payload.newCartData;
			this.cartState.totalCartQty = newCartData.cartQty;
			this.cartState.totalCartPrice = newCartData.cartTotalPrice;
			this.shipmentCount = newCartData.shipmentCount;
			this.cartState.lineItems = newCartData.cartData;
			return this.emit('change');
		},
		getState: function () {
			return this.cartState;
		}
	});
});

define('Flux.Stores', ['Flux.Stores.HeaderNavStore', 'Flux.Stores.SearchPanelStore', 'Flux.Stores.CartStore', 'Flux.Stores.ViewportStore', 'Flux.Stores.BrowserStore'], function (HeaderNavStore, SearchPanelStore, CartStore, ViewportStore, BrowserStore) {
	return {
		HeaderNavStore: new HeaderNavStore(),
		SearchPanelStore: new SearchPanelStore(),
		CartStore: new CartStore(),
		ViewportStore: new ViewportStore(),
		BrowserStore: new BrowserStore()
	};
});

define('Flux.Stores.HeaderNavStore', ['Fluxxor', 'Flux.Constants', 'lodash'], function (Fluxxor, cs, _) {
	return Fluxxor.createStore({
		initialize: function () {
			var actions;
			this.isStickyEnabled = false;
			this.openCatID = null;
			this.catHasFlyout = false;
			this.topLevelCategories = window.navData || [];
			this.navSiteData = window.navSiteData || {};
			this.dwSiteLinks = window.dwSiteLinks || [];

			actions = {};
			actions[cs.OPEN_HEADER_NAV] = this.activateNavFlyout;
			actions[cs.CLOSE_HEADER_NAV] = this.onCloseHeaderNav;
			actions[cs.SET_HEADER_STICKINESS] = this.onSetHeaderStickiness;
			actions[cs.UPDATE_HEADER_NAV_DATA] = this.updateHeaderNav;
			return this.bindActions(actions);
		},
		onSetHeaderStickiness: function (payload) {
			this.isStickyEnabled = payload.isStickyEnabled;
			return this.emit('change');
		},
		activateNavFlyout: function (payload) {
			var dataIndex, id, newCategoryData, showCategoryFlyout;
			id = payload.newCategoryID;
			dataIndex = _.findIndex(this.topLevelCategories, {
				'id': id
			});
			newCategoryData = this.topLevelCategories[dataIndex];
			showCategoryFlyout = newCategoryData.hasFlyout;
			this.openCatID = id;
			this.catHasFlyout = showCategoryFlyout;

			if (id) {
				return this.emit('change');
			} else {
				return this.onCloseHeaderNav();
			}
		},
		onCloseHeaderNav: function (payload) {
			this.openCatID = null;
			return this.emit('change');
		},
		updateHeaderNav: function (payload) {
			this.topLevelCategories = this.topLevelCategories.concat(payload.navData);
			return this.emit('change');
		},
		getState: function () {
			return {
				isStickyEnabled: this.isStickyEnabled,
				openCatID: this.openCatID,
				catHasFlyout: this.catHasFlyout,
				topLevelCategories: this.topLevelCategories,
				navSiteData: this.navSiteData,
				dwSiteLinks: this.dwSiteLinks
			};
		}
	});
});

define('Flux.Stores.SearchPanelStore', ['Fluxxor', 'Flux.Constants', 'lodash'], function (Fluxxor, cs, _) {
	return Fluxxor.createStore({
		initialize: function () {
			var actions;
			this.fluxResources = FluxResources;
			this.searchPanelState = {
				searchTerm: '',
				searchURL: this.fluxResources.searchShowURL,
				autocompleteHTML: ''
			};
			actions = {};
			actions[cs.FOCUS_SEARCH_FIELD] = this.focusSearchField;
			actions[cs.START_AUTOCOMPLETE_GET] = this.startAutocompleteGet;
			actions[cs.UPDATE_AUTOCOMPLETE_LIST] = this.updateAutocompleteList;
			return this.bindActions(actions);
		},
		focusSearchField: function () {
			this.emit('change');
		},
		startAutocompleteGet: function (q) {
			this.searchTerm = q.q;
		},
		updateAutocompleteList: function (response) {
			this.searchPanelState.autocompleteHTML = response;
			this.emit('change');
		},
		getState: function () {
			return this.searchPanelState;
		}
	});
});


define('Flux.Stores.ViewportStore', ['Fluxxor', 'Flux.Constants'], function (Fluxxor, cs) {
	return Fluxxor.createStore({
		initialize: function () {
			var actions;
			this.properties = {
				previousPanel: '',
				currentPanel: 'center'
			};
			actions = {};
			actions[cs.CHANGE_PANEL] = this.onChangePanel;
			return this.bindActions(actions);
		},
		onChangePanel: function (payload) {
			if (this.properties.currentPanel === payload.panel) {
				return;
			}
			this.properties.previousPanel = this.properties.currentPanel;
			this.properties.currentPanel = payload.panel;
			return this.emit('change');
		},
		getState: function () {
			return {
				properties: this.properties
			};
		}
	});
});

define('Flux.Actions', ['Flux.Constants', 'lodash', 'jquery'], function (cs, _, $) {
	return {
		activateNavCategory: function (newCategoryID) {
			return this.dispatch(cs.OPEN_HEADER_NAV, {
				newCategoryID: newCategoryID
			});
		},
		closeHeaderNav: function (message) {
			return this.dispatch(cs.CLOSE_HEADER_NAV, {
				message: message
			});
		},
		setHeaderStickiness: function (isStickyEnabled) {
			return this.dispatch(cs.SET_HEADER_STICKINESS, {
				isStickyEnabled: isStickyEnabled
			});
		},
		updateHeaderNav: function (navData) {
			return this.dispatch(cs.UPDATE_HEADER_NAV_DATA, {
				navData: navData
			});
		},
		updateCartThenShow: function (newCartData) {
			this.dispatch(cs.UPDATE_CART, {
				newCartData: newCartData
			});
			return this.dispatch(cs.CHANGE_PANEL, {
				panel: 'right'
			});
		},
		updateCartThenAlert: function (newCartData) {

			var result = $.alert({
				message: $(newCartData.dialogContent).html(),
				buttons: [{
					text: "Checkout",
					class: 'button',
					click: function (e) {
						window.location = window.Urls.cartShow;
						return;
					}
				}, {
					text: "Continue Shopping",
					class: 'link',
					click: function (e) {
						$(this).dialog('close');
					}
				}
				],
				dialogClass: 'addtobag'
			});

			if (newCartData.outputString) {
				$('#site-header').find('.cart-qty-inner').html(_.unescape(newCartData.outputString));
			}

			this.dispatch(cs.UPDATE_CART, {
				newCartData: newCartData
			});
			return result;
		},
		updateCartDontShow: function (newCartData) {
			return this.dispatch(cs.UPDATE_CART, {
				newCartData: newCartData
			});
		},
		focusSearchField: function () {
			return this.dispatch(cs.FOCUS_SEARCH_FIELD);
		},
		startAutocompleteGet: function (q) {
			this.dispatch(cs.START_AUTOCOMPLETE_GET, {
				q: q
			});
			return $.ajax({
				url: window.Urls.searchAutocompleteList,
				data: {
					q: q
				},
				success: (function (_this) {
					return function (data) {
						var $tempWrapper, result;
						$tempWrapper = $(document.createElement('div'));
						$tempWrapper.html(data);
						result = $tempWrapper.html();
						if (($tempWrapper.find('.autocomplete-suggestion-contents').length)) {
							return _this.dispatch(cs.UPDATE_AUTOCOMPLETE_LIST, {
								result: result
							});
						} else {
							return _this.dispatch(cs.UPDATE_AUTOCOMPLETE_LIST, {
								'': ''
							});
						}
					};
				})(this),
				error: (function (_this) {
					return function () { };
				})(this)
			});
		},
		clearAutocompleteContent: function () {
			return this.dispatch(cs.UPDATE_AUTOCOMPLETE_LIST, {
				'': ''
			});
		},
		resizeWindow: function () {
			this.dispatch(cs.WINDOW_RESIZE);
			return this.dispatch(cs.BUILD_A_BOX.HEIGHT_COULDVE_CHANGED);
		},
		scrollWindow: function () {
			this.dispatch(cs.WINDOW_SCROLL);
			return this.dispatch(cs.CLOSE_HEADER_NAV);
		},
		orientationChanged: function () {
			return this.dispatch(cs.ORIENTATION_CHANGED);
		},
		changePanel: function (panel) {
			return this.dispatch(cs.CHANGE_PANEL, {
				panel: panel
			});
		},
		buildABox: {
			selectFlavor: function (flavor) {
				this.dispatch(cs.BUILD_A_BOX.SELECT_FLAVOR, {
					flavor: flavor
				});
				return this.dispatch(cs.BUILD_A_BOX.CHANGE_FEATURE_WINDOW_TAB, {
					tab: 'CANDY_DETAILS'
				});
			},
			deselectFlavor: function (flavor) {
				return this.dispatch(cs.BUILD_A_BOX.DESELECT_FLAVOR);
			},
			addFlavorByPID: function (pid) {
				var flavors, pidIndex;
				flavors = this.flux.stores.FlavorGridStore.flavors;
				pid = pid.replace(/\,/g, '');
				pidIndex = _.findIndex(flavors, function (f) {
					return f.pid === pid;
				});
				if (pidIndex !== -1) {
					return this.dispatch(cs.BUILD_A_BOX.ADD_FLAVOR_SELECTION, {
						selection: flavors[pidIndex]
					});
				}
			},
			setFlavorSelections: function (selections) {
				return this.dispatch(cs.BUILD_A_BOX.SET_FLAVOR_SELECTIONS, {
					selections: selections
				});
			},
			addFlavorSelection: function (selection) {
				this.dispatch(cs.BUILD_A_BOX.SELECT_FLAVOR, {
					flavor: selection
				});
				this.dispatch(cs.BUILD_A_BOX.ADD_FLAVOR_SELECTION, {
					selection: selection
				});
				return this.dispatch(cs.BUILD_A_BOX.CHANGE_FEATURE_WINDOW_TAB, {
					tab: 'VIEW_YOUR_CANDIES'
				});
			},
			removeFlavorSelection: function (selection) {
				return this.dispatch(cs.BUILD_A_BOX.REMOVE_FLAVOR_SELECTION, {
					selection: selection
				});
			},
			clearFlavorSelections: function () {
				return this.dispatch(cs.BUILD_A_BOX.CLEAR_FLAVOR_SELECTIONS);
			},
			slider: {
				startDragSlider: function (selection) {
					return this.dispatch(cs.BUILD_A_BOX.SLIDER.START_DRAG_SLIDER, {
						selection: selection
					});
				},
				dragSlider: function (percentage, selection) {
					return this.dispatch(cs.BUILD_A_BOX.SLIDER.DRAG_SLIDER, {
						percentage: percentage,
						selection: selection
					});
				},
				endDragSlider: function (selection) {
					return this.dispatch(cs.BUILD_A_BOX.SLIDER.END_DRAG_SLIDER, {
						selection: selection
					});
				},
				updatePercentage: function (percentage, selection) {
					return this.dispatch(cs.BUILD_A_BOX.SLIDER.UPDATE_PERCENTAGE, {
						percentage: percentage,
						selection: selection
					});
				},
				addMore: function (selection) {
					return this.dispatch(cs.BUILD_A_BOX.SLIDER.ADD_MORE, {
						selection: selection
					});
				},
				addLess: function (selection) {
					return this.dispatch(cs.BUILD_A_BOX.SLIDER.ADD_LESS, {
						selection: selection
					});
				},
				putHandle: function (percentage, selection) {
					return this.dispatch(cs.BUILD_A_BOX.SLIDER.PUT_HANDLE, {
						percentage: percentage,
						selection: selection
					});
				},
				empty: function () {
					return this.dispatch(cs.BUILD_A_BOX.SLIDER.EMPTY);
				},
				refresh: function () {
					return this.dispatch(cs.BUILD_A_BOX.SLIDER.REFRESH);
				}
			},
			selectCategory: function (category) {
				this.dispatch(cs.BUILD_A_BOX.LOCK_CATEGORY_BAR);
				return _.defer((function (_this) {
					return function () {
						return _this.dispatch(cs.BUILD_A_BOX.GO_TO_STEP, {
							step: 1,
							complete: function () {
								_this.dispatch(cs.BUILD_A_BOX.SELECT_CATEGORY, {
									category: category
								});
								_this.dispatch(cs.BUILD_A_BOX.HEIGHT_COULDVE_CHANGED);
								return _this.dispatch(cs.BUILD_A_BOX.UNLOCK_CATEGORY_BAR);
							}
						});
					};
				})(this));
			},
			deselectCategory: function (category) {
				return this.dispatch(cs.BUILD_A_BOX.DESELECT_CATEGORY, {
					category: category
				});
			},
			selectBoxWeight: function (weight, index) {
				return this.dispatch(cs.BUILD_A_BOX.SELECT_BOX_WEIGHT, {
					weight: weight
				});
			},
			goToStep: function (step) {
				return this.dispatch(cs.BUILD_A_BOX.GO_TO_STEP, {
					step: step
				});
			},
			selectStep: function (step) {
				return this.dispatch(cs.BUILD_A_BOX.SELECT_STEP, {
					step: step
				});
			},
			changeFeatureWindowTab: function (tab) {
				return this.dispatch(cs.BUILD_A_BOX.CHANGE_FEATURE_WINDOW_TAB, {
					tab: tab
				});
			},
			heightCouldveChanged: function () {
				return this.dispatch(cs.BUILD_A_BOX.HEIGHT_COULDVE_CHANGED);
			},
			incrementBoxQuantity: function () {
				return this.dispatch(cs.BUILD_A_BOX.INCREMENT_BOX_QUANTITY);
			},
			decrementBoxQuantity: function () {
				return this.dispatch(cs.BUILD_A_BOX.DECREMENT_BOX_QUANTITY);
			},
			setBoxQuantity: function (quantity) {
				return this.dispatch(cs.BUILD_A_BOX.SET_BOX_QUANTITY, {
					quantity: quantity
				});
			},
			hydrateFlavorGridStore: function (arg) {
				var pieces;
				pieces = arg.pieces;
				return this.dispatch(cs.BUILD_A_BOX.HYDRATE_FLAVOR_GRID_STORE, {
					pieces: pieces
				});
			},
			hydrateBoxWeightStore: function (weights, selectedWeightInPounds) {
				if (selectedWeightInPounds == null) {
					selectedWeightInPounds = null;
				}
				return this.dispatch(cs.BUILD_A_BOX.HYDRATE_BOX_WEIGHT_STORE, {
					weights: weights,
					selectedWeightInPounds: selectedWeightInPounds
				});
			},
			hydrateBoxVariantStore: function (variants) {
				return this.dispatch(cs.BUILD_A_BOX.HYDRATE_BOX_VARIANT_STORE, {
					variants: variants
				});
			},
			hydrateFlavorSelectionStore: function (lineItems) {
				var f, flavor, flavors, fs, i, j, len, len1, ref, results;
				flavors = this.flux.stores.FlavorGridStore.flavors;
				fs = {};
				for (i = 0, len = flavors.length; i < len; i++) {
					flavor = flavors[i];
					f = _.find(lineItems.box, (function (_this) {
						return function (f) {
							return f.pid === flavor.pid;
						};
					})(this));
					if (f) {
						fs[f.pid] = flavor;
						this.flux.actions.buildABox.addFlavorSelection(flavor);
					}
				}
				this.flux.actions.buildABox.slider.empty();
				ref = lineItems.box;
				results = [];
				for (j = 0, len1 = ref.length; j < len1; j++) {
					f = ref[j];
					results.push(this.flux.actions.buildABox.slider.putHandle(parseInt(f.qty * 100), fs[f.pid]));
				}
				return results;
			},
			setPLIUUID: function (uuid) {
				return this.dispatch(cs.BUILD_A_BOX.SET_PLI_UUID, {
					uuid: uuid
				});
			},
			nextFlavorPage: function () {
				return this.dispatch(cs.BUILD_A_BOX.NEXT_FLAVOR_PAGE);
			},
			previousFlavorPage: function () {
				return this.dispatch(cs.BUILD_A_BOX.PREVIOUS_FLAVOR_PAGE);
			},
			autoAdjustQuantity: function () {
				return this.dispatch(cs.BUILD_A_BOX.AUTO_ADJUST_QUANTITY);
			},
			selectBoxWrap: function (variantId) {
				return this.dispatch(cs.BUILD_A_BOX.SELECT_BOX_WRAP, {
					variantId: variantId
				});
			},
			unlockAll: function () {
				return this.dispatch(cs.BUILD_A_BOX.UNLOCK_ALL);
			},
			lockAllExcept: function (exclude) {
				return this.dispatch(cs.BUILD_A_BOX.LOCK_ALL_EXCEPT, {
					exclude: exclude
				});
			}
		}
	};
});

define('Flux.App', ['Fluxxor', 'Flux.Stores', 'Flux.Constants', 'Flux.Actions', 'CreateReactClass'], function (Fluxxor, Stores, Constants, Actions, createReactClass) {
	var flux;
	flux = new Fluxxor.Flux(Stores, Actions);
	flux.on('dispatch', function (type, payload) {
		if (false && (typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
			return console.log("[Dispatch]", type, payload);
		}
	});
	return flux;
});

define('Flux.FluxMixin', ['Fluxxor', 'React'], function (Fluxxor, React) {
	var FluxMixin;
	FluxMixin = Fluxxor.FluxMixin(React);
	return FluxMixin;
});


define('React.StoreWatchMixin', ['Fluxxor', 'React'], function (Fluxxor, React) {
	var StoreWatchMixin;
	StoreWatchMixin = Fluxxor.StoreWatchMixin;
	return StoreWatchMixin;
});

define('App.Browser', ['lodash', 'jquery', 'Flux.App'], function (_, $, flux) {
	var actualResizeAction, windowWidth;
	windowWidth = $(window).width();
	actualResizeAction = (function (_this) {
		return function () {
			if ($(window).width() !== windowWidth) {
				flux.actions.resizeWindow();
				return windowWidth = $(window).width();
			}
		};
	})(this);
	window.addEventListener('resize', _.throttle(actualResizeAction, 16, {
		trailing: true,
		leading: true
	}));
	window.addEventListener('scroll', _.throttle(flux.actions.scrollWindow, 16, {
		trailing: true,
		leading: true
	}));
	return window.addEventListener('orientationchange', function () {
		return flux.actions.orientationChanged();
	});
});

require(['Rx'], function (Rx) {
	return Rx.Observable.fromEvents = function (element, eventNames, selector) {
		var es;
		es = eventNames.split(/\s+/);
		return Rx.Observable.merge.apply(null, es.map((function (_this) {
			return function (e) {
				return Rx.Observable.fromEvent(element, e, selector);
			};
		})(this)));
	};
});

define('React.View.HeaderNav', ['Flux.Constants', 'jquery', 'Fluxxor', 'React', 'ReactDOM', 'CreateReactClass', 'Flux.App', 'Flux.FluxMixin', 'React.StoreWatchMixin'], function (cs, $, Fluxxor, React, ReactDOM, createReactClass, FluxApp, FluxMixin, StoreWatchMixin) {
	var HeaderNav;

	if (!document.getElementById('mobile-nav-wrapper')) {
		return function () { };
	}

	HeaderNav = createReactClass({
		mixins: [FluxMixin, StoreWatchMixin('HeaderNavStore', 'BrowserStore')],
		getInitialState: function () {
			return {};
		},
		getStateFromFlux: function () {
			var flux;
			flux = this.getFlux();
			return {
				navState: flux.store('HeaderNavStore').getState(),
				browserState: flux.store('BrowserStore').getState()
			};
		},
		toggleNav: function (id, hasFlyout, e) {
			if (hasFlyout) {
				e.preventDefault();
				if (this.state.navState.openCatID !== id) {
					return this.getFlux().actions.activateNavCategory(id);
				} else {
					return this.getFlux().actions.closeHeaderNav('Closing mobile nav flyout.');
				}
			}
		},
		closeNav: function (e) {
			return this.getFlux().actions.openHeaderNav();
		},
		render: function () {
			return React.createElement("div", {
				"id": "mobile-nav"
			}, React.createElement("ul", {
				"className": "level-1"
			}, this.state.navState.topLevelCategories.map(function (topLevelCat, i) {
				var activeClass, boundClick, flyoutIcon, hasFlyout, isActiveCat, isDesktop, siteID, topLevelLiClass;
				topLevelLiClass = '';
				flyoutIcon = '';
				activeClass = 'level-2';
				isActiveCat = this.state.navState.openCatID === topLevelCat.id;
				isDesktop = this.state.browserState.properties.breakpoint !== 'desktop';
				hasFlyout = topLevelCat.hasFlyout;
				siteID = this.state.navState.navSiteData.siteID;
				if (topLevelCat.hasFlyout) {
					topLevelLiClass += ' has-flyout';
					flyoutIcon = '+';
				} else {
					topLevelLiClass += ' no-flyout';
				}
				boundClick = this.toggleNav.bind(this, topLevelCat.id, hasFlyout);
				if (isActiveCat && isDesktop) {
					activeClass += ' active';
					topLevelLiClass += ' active';
				}
				if (topLevelCat.hasFlyout && isActiveCat && isDesktop) {
					flyoutIcon = '-';
				}
				return React.createElement("li", {
					"className": 'level-1',
					"key": i
				}, React.createElement("a", {
					"className": topLevelLiClass,
					"href": topLevelCat.url,
					"onClick": boundClick
				}, React.createElement("span", null, React.createElement("span", null, topLevelCat.name), React.createElement("span", {
					"className": 'flyout-toggle-icon'
				}, flyoutIcon))), React.createElement("ul", {
					"className": activeClass
				}, topLevelCat.subCats.map(function (subCat, i) {
					if (siteID !== 'FR' && i === 0) {
						return React.createElement("li", {
							"className": "level-2"
						}, React.createElement("a", {
							"href": topLevelCat.url
						}, 'All ' + topLevelCat.name));
					}
				}), topLevelCat.subCats.map(function (subCat, i) {
					return React.createElement("li", {
						"className": "level-2"
					}, React.createElement("a", {
						"href": subCat.url
					}, subCat.name + ' '));
				})));
			}, this)), React.createElement("ul", {
				"id": "mobile-static-links"
			}, React.createElement("div", {
				"dangerouslySetInnerHTML": {
					__html: document.getElementsByClassName('right-header-utility')[0].innerHTML
				}
			}), React.createElement("li", {
				"className": "menu-divider"
			}), this.state.navState.dwSiteLinks.map(function (dwSiteLink, i) {
				if (this.state.navState.navSiteData.siteID !== dwSiteLink.id) {
					return React.createElement("li", null, React.createElement("a", {
						"href": dwSiteLink.url
					}, dwSiteLink.title));
				}
			}, this)));
		}
	});

	return ReactDOM.render(React.createElement(HeaderNav, {
		"flux": FluxApp
	}), document.getElementById('mobile-nav-wrapper'));
});

define('React.View.MiniCart', ['jquery', 'Fluxxor', 'React', 'ReactDOM', 'Flux.App', 'Flux.FluxMixin', 'React.StoreWatchMixin', 'CreateReactClass'], function ($, Fluxxor, React, ReactDOM, FluxApp, FluxMixin, StoreWatchMixin, createReactClass) {
	var MiniCart;
	// don't build if panel does not exist
	if (!$('#rightPanel').length) {
		return null;
	}

	MiniCart = createReactClass({
		mixins: [FluxMixin, StoreWatchMixin('CartStore', 'BrowserStore')],
		getInitialState: function () {
			return {};
		},
		getStateFromFlux: function () {
			var flux;
			flux = this.getFlux();
			return {
				cartState: flux.store('CartStore').getState(),
				browserState: flux.store('BrowserStore').getState()
			};
		},
		openMiniCart: function (e) {
			return e.preventDefault();
		},
		render: function () {
			var cartShowURL, lineItems, miniCartClass, promoMarkup, qty, qtyString;
			lineItems = this.state.cartState.lineItems;
			miniCartClass = '';
			if (lineItems.length === 0) {
				miniCartClass = 'empty-cart';
			}
			qty = this.state.cartState.totalCartQty;
			qtyString = '';
			if (qty !== 1) {
				qtyString = qty + ' Items';
			} else {
				qtyString = qty + ' Item';
			}
			cartShowURL = this.state.cartState.cartShowURL;
			promoMarkup = $('.mini-cart-promo').first().html() || '';
			return React.createElement("div", {
				"id": "mini-cart-wrapper",
				"className": miniCartClass
			}, React.createElement("div", {
				"id": "mini-cart-header"
			}, React.createElement("h2", {
				"className": "medium"
			}, React.createElement("div", {
				"className": "stacked-heading-fancy"
			}, "Shopping"), React.createElement("div", {
				"className": "stacked-heading-bold"
			}, "Bag")), React.createElement("div", {
				"className": "item-count"
			}, qtyString), React.createElement("div", {
				"className": "cta checkout-cta"
			}, React.createElement("a", {
				"href": cartShowURL,
				"className": "button"
			}, "Checkout"))), React.createElement("ul", {
				"id": "mini-cart-items"
			}, this.state.cartState.lineItems.map(function (lineItem, i) {
				return React.createElement("li", null, React.createElement("div", null, React.createElement("div", {
					"className": "product-img"
				}, (lineItem.url.length > 0 ? React.createElement("a", {
					"href": lineItem.url
				}, React.createElement("img", {
					"className": "item-image",
					"src": lineItem.img,
					"alt": lineItem.name
				})) : void 0), (lineItem.url.length === 0 ? React.createElement("img", {
					"className": "item-image",
					"src": lineItem.img,
					"alt": lineItem.name
				}) : void 0)), React.createElement("div", {
					"className": "product-info"
				}, React.createElement("h4", null, (lineItem.url.length > 0 ? React.createElement("a", {
					"href": lineItem.url
				}, lineItem.name) : void 0), (lineItem.url.length === 0 ? React.createElement("span", null, lineItem.name) : void 0)), React.createElement("div", {
					"className": "product-weight"
				}, (lineItem.size.indexOf('lb') > -1 ? lineItem.size = lineItem.size.replace('lb', ' lb ') : void 0, lineItem.size.indexOf('oz') > -1 ? lineItem.size = lineItem.size.replace('oz', ' oz ') : void 0, lineItem.size)), React.createElement("div", {
					"className": "product-total"
				}, React.createElement("p", {
					"className": "product-price"
				}, lineItem.price, " "), React.createElement("p", {
					"className": "product-qty"
				}, "QTY: ", lineItem.qty)), React.createElement("a", {
					"className": "edit-link",
					"href": window.Urls.cartShow
				}, "Edit"))), React.createElement("div", {
					"className": "mini-cart-spacer"
				}));
			}, this)), React.createElement("div", {
				"id": "mini-cart-footer"
			}, React.createElement("div", {
				"className": "shipping-message",
				"dangerouslySetInnerHTML": {
					__html: promoMarkup
				}
			}), React.createElement("div", {
				"className": "mini-cart-total"
			}, React.createElement("span", null, "Sub-Total: "), React.createElement("span", null, this.state.cartState.totalCartPrice)), React.createElement("div", {
				"className": "cta checkout-cta"
			}, React.createElement("a", {
				"href": cartShowURL,
				"className": "button"
			}, "Checkout"))));
		}
	});
	// creates/renders minicart
	return ReactDOM.render(React.createElement(MiniCart, {
		"flux": FluxApp
	}), document.getElementById('rightPanel__content'));
});

define('React.View.SearchPanel', ['jquery', 'Fluxxor', 'React', 'ReactDOM', 'Flux.App', 'Flux.FluxMixin', 'React.StoreWatchMixin', 'CreateReactClass'], function ($, Fluxxor, React, ReactDOM, FluxApp, FluxMixin, StoreWatchMixin, createReactClass) {
	var SearchPanel;

	if (!document.getElementById('search-panel-wrapper')) {
		return function () { };
	}


	SearchPanel = createReactClass({
		mixins: [FluxMixin, StoreWatchMixin('SearchPanelStore')],
		getInitialState: function () {
			return {
				search: '',
				keyPressCount: 0,
				keyPressLimit: 4,
				totalKeypressCount: 0,
				searchThrottleTimer: null
			};
		},
		getStateFromFlux: function () {
			var flux;
			flux = this.getFlux();
			this.focusSearchInput();
			return {
				searchPanel: flux.stores.SearchPanelStore.getState()
			};
		},
		clearSearchTerm: function (e) {
			e.preventDefault();
			return this.getFlux().actions.activateNavCategory(id);
		},
		focusSearchInput: function () { },
		sendAutocomplete: function (q) {
			q = this.refs.searchField.value.trim();
			this.state.totalKeypressCount++;
			if (this.state.searchThrottleTimer !== null && this.state.keyPressCount < this.state.keyPressLimit) {
				window.clearTimeout(this.state.searchThrottleTimer);
				this.state.keyPressCount++;
			}
			if (this.state.keyPressCount >= this.state.keyPressLimit) {
				this.verifyAndSendAutocompleteQuery(q);
				if (this.state.searchThrottleTimer !== null) {
					window.clearTimeout(this.state.searchThrottleTimer);
				}
				return this.state.keyPressCount = 0;
			} else {
				return this.state.searchThrottleTimer = window.setTimeout((function (_this) {
					return function () {
						_this.verifyAndSendAutocompleteQuery(q);
						return _this.state.keyPressCount = 0;
					};
				})(this), 800);
			}
		},
		verifyAndSendAutocompleteQuery: function (q) {
			if (q.length > 0) {
				return this.getFlux().actions.startAutocompleteGet(q);
			} else {
				return this.getFlux().actions.clearAutocompleteContent();
			}
		},
		render: function () {
			return React.createElement("div", null, React.createElement("form", {
				"id": "search-form",
				"action": this.state.searchPanel.searchURL
			}, React.createElement("input", {
				"className": "search-field",
				"type": "text",
				"name": "q",
				"placeholder": "SEARCH SEE'S",
				"autoComplete": "off",
				"ref": "searchField",
				"id": "searchFieldID",
				"onChange": this.sendAutocomplete
			}), React.createElement("span", {
				"className": "alignment-span"
			}), React.createElement("span", {
				"className": "search-icon"
			}), React.createElement("input", {
				"className": "search-icon2",
				"type": "submit",
				"value": " "
			})), (function (_this) {
				return function () {
					if (!(_this.state.searchPanel.autocompleteHTML.hasOwnProperty('result'))) {
						return React.createElement("div", {
							"id": "panel-search-suggestions"
						}, React.createElement("div", {
							"dangerouslySetInnerHTML": {
								__html: document.getElementById('left-panel-hidden-assets').innerHTML
							}
						}));
					} else {
						return React.createElement("div", {
							"id": "panel-search-suggestions"
						}, React.createElement("div", {
							"dangerouslySetInnerHTML": {
								__html: _this.state.searchPanel.autocompleteHTML.result
							}
						}));
					}
				};
			})(this)());
		}
	});
	return ReactDOM.render(React.createElement(SearchPanel, {
		"flux": FluxApp
	}), document.getElementById('search-panel-wrapper'));
});

define('UI.View.Accordions', ['jquery'], function ($) {
	var UIAccordions;
	return UIAccordions = (function () {
		function UIAccordions() {
			this.$accordions = $('[data-accordion]');
			this.$accordionlist = $('[data-accordion-list]');
			this.$tabcordions = $('[data-tabcordion-container]');
		}

		UIAccordions.prototype.initialize = function () {
			this.$accordions.each(function (e, el) {
				var $el;
				$el = $(el);
				return $el.on('click', (function (_this) {
					return function () {
						return $el.toggleClass('active');
					};
				})(this));
			});
			this.$accordionlist.each(function (e, el) {
				var $el, $toggle;
				$el = $(el);
				$toggle = $el.find('.row:first-child').first();
				return $toggle.on('click', (function (_this) {
					return function () {
						return $el.toggleClass('active');
					};
				})(this));
			});
			return this.$tabcordions.each(function (e, c) {
				var $c, $el;
				$c = $(c);
				$el = $c.find('[data-tabcordion]');
				return $el.first('ul').children().each(function (e2, el2) {
					var $el2;
					$el2 = $(el2);
					return $el2.on('click', function () {
						$el.toggleClass('active');
						$el.find('li[data-target]').removeClass('active');
						$el2.addClass('active');
						$c.find(".candy-content[data-tab-id]").removeClass('active');
						return $c.find("[data-tab-id='" + ($el2.data('target')) + "']").addClass('active');
					});
				});
			});
		};

		return UIAccordions;

	})();
});



define('UI.View.Account', ['jquery', 'lodash', 'UI.View.Dialogs', 'UI.View.LoadingUtil', 'UI.View.VerifyAddress', 'UI.View.FormUtilities'], function ($, _, UIDialogs, LoadingUtil, UIVerifyAddress, UIFormUtilities) {
	var UIAccount;
	return UIAccount = (function () {
		function UIAccount() {
			this.initRequestPasswordReset = bind(this.initRequestPasswordReset, this);
			this.initOrdersShowMore = bind(this.initOrdersShowMore, this);
			this.$CreateAddressBtn = $('.address-create');
			this.$CreatePayMethodBtn = $('.add-card');
			this.$EditAddressBtn = $('.edit-address');
			this.$isCompany = $('[name$="isCompany"]');
			this.$ProfileForm = $('#ProfileForm');
			this.debug = true;
		}

		UIAccount.prototype.initialize = function () {
			this.initCreateAddress();
			this.initCreateCreditCard();
			this.initDisplayCompanyFields();
			this.initEditAddress();
			this.initOrdersShowMore();
			this.initRequestPasswordReset();
			this.VerifyAddress = new UIVerifyAddress;
			this.FormUtil = new UIFormUtilities;
			$.validator.addMethod("password", this.validatePassword, null);
			$.validator.addClassRules({
				"password": {
					required: true,
					password: true
				}
			});
			if (this.$ProfileForm.length > 0) {
				return this.initToggleEdit();
			}
		};

		UIAccount.prototype.validatePassword = function (value, element, params) {
			return this.optional(element) || !$(element).data('pattern') || (new RegExp($(element).data('pattern'))).test(value);
		};

		UIAccount.prototype.initCreateAddress = function () {
			return this.$CreateAddressBtn.on('click', (function (_this) {
				return function (e) {
					var $self, url;
					e.preventDefault();
					$self = $(e.target);
					url = $self.attr('href') + "?format=ajax";

					LoadingUtil.disableElement($self, $self);
					return $.ajax({
						type: "GET",
						url: url,
						error: function (request, status, error) {
							LoadingUtil.enableElement($self, $self);
						},
						success: function (response) {
							var $responseObj, dialogSettings, newEle;
							newEle = $(document.createElement('div'));
							$responseObj = $(response);
							newEle.html(response);
							newEle.addClass("add-address-dialog");
							dialogSettings = {
								title: 'Add Address',
								showAsRequired: true,
								body: newEle,
								submitText: null,
								openCallback: function (dialogID) {
									_this.VerifyAddress = new UIVerifyAddress;
									_this.VerifyAddress.initialize();
									_this.FormUtil = new UIFormUtilities;
									_this.FormUtil.initialize();
									_this.addressTooltipModal();
									return $(".cancel-button, .cancel, .select").on('click', function (e) {
										LoadingUtil.enableElement($self, $self);
										UIDialogs.close(dialogID);
									});
								},
								closeCallback: function () {
									return LoadingUtil.enableElement($self, $self);
								},
								submitCallback: function (callToClose) { }
							};
							UIDialogs.prompt(dialogSettings);
							return $('.sees-dialog-content').addClass('small-dialog');
						}
					});
				};
			})(this));
		};

		UIAccount.prototype.addressTooltipModal = function () {
			var $tooltip, $tooltipContent;
			$tooltip = $('#edit-address-form .tooltip');
			$tooltipContent = $tooltip.find('.tooltip-content');
			return $tooltip.on('click', (function (_this) {
				return function (e) {
					var shippingDialogSettings;
					e.preventDefault();
					shippingDialogSettings = {
						title: null,
						showAsRequired: false,
						body: $tooltipContent,
						submitText: null,
						openCallback: function (tooltipDialogID) { },
						closeCallback: function () { }
					};
					return UIDialogs.prompt(shippingDialogSettings);
				};
			})(this));
		};

		UIAccount.prototype.initEditAddress = function () {
			return this.$EditAddressBtn.on('click', (function (_this) {
				return function (e) {
					var $self, href;
					e.preventDefault();
					$self = $(e.target);
					href = $self.attr("href");
					return $.ajax({
						type: "GET",
						url: href + "&format=ajax",
						success: function (response) {
							var $responseObj, dialogSettings, newEle;
							newEle = $(document.createElement('div'));
							$responseObj = $(response);
							newEle.html(response);
							newEle.addClass("edit-card-dialog");
							dialogSettings = {
								title: 'Edit Address',
								showAsRequired: true,
								body: newEle,
								submitText: null,
								openCallback: function (dialogID) {
									_this.VerifyAddress = new UIVerifyAddress;
									_this.VerifyAddress.initialize();
									_this.FormUtil = new UIFormUtilities;
									_this.FormUtil.initialize();
									_this.addressTooltipModal();
									return $(".cancel-button, .cancel, .select").on('click', function (e) {
										UIDialogs.close(dialogID);
										LoadingUtil.enableElement($self, $self);
									});
								},
								closeCallback: function () {
									return LoadingUtil.enableElement($self, $self);
								},
								submitCallback: function (callToClose) { }
							};
							UIDialogs.prompt(dialogSettings);
							return $('.sees-dialog-content').addClass('small-dialog');
						}
					});
				};
			})(this));
		};

		UIAccount.prototype.initCreateCreditCard = function () {
			return this.$CreatePayMethodBtn.on('click', (function (_this) {
				return function (e) {
					var $self, url;
					e.preventDefault();
					$self = $(e.target);
					url = $self.attr('href');

					LoadingUtil.disableElement($self, $self);
					return $.ajax({
						type: "GET",
						url: url + "?ajax=true",
						dataType: "html",
						error: function (request, status, error) {
							LoadingUtil.enableElement($self, $self);
						},
						success: function (response) {
							var $responseObj, dialogSettings, newEle;
							newEle = $(document.createElement('div'));
							$responseObj = $(response);
							newEle.html(response);
							newEle.addClass("add-card-dialog");
							dialogSettings = {
								title: 'Add a New Card',
								showAsRequired: true,
								body: newEle,
								submitText: null,
								openCallback: function (dialogID) {
									_this.FormUtil = new UIFormUtilities();
									_this.FormUtil.initialize();
									$('body').trigger("dialogopen");
									return $(".cancel-button, .cancel, .select").on('click', function (e) {
										LoadingUtil.enableElement($self, $self);
										UIDialogs.close(dialogID);
									});
								},
								closeCallback: function () {
									LoadingUtil.enableElement($self, $self);
									return $('body').trigger("dialogclose");
								},
								submitCallback: function (callToClose) { }
							};
							UIDialogs.prompt(dialogSettings);
							return $('.sees-dialog-content').addClass('small-dialog');
						}
					});
				};
			})(this));
		};

		UIAccount.prototype.initDisplayCompanyFields = function () {
			return this.$isCompany.on('click', function (e) {
				if ($(this).is(':checked')) {
					return $('.company-fields').show();
				} else {
					return $('.company-fields').hide();
				}
			});
		};

		UIAccount.prototype.createButtons = function (target) {
			var buttons, cancelBtn, saveBtn;
			buttons = $(document.createElement("div")).addClass("buttons");
			saveBtn = $(document.createElement("a")).addClass("save").html(Resources["SAVE"]).attr("href", "#");
			cancelBtn = $(document.createElement("a")).addClass("cancel").html(Resources["CANCEL"]).attr("href", "#");
			buttons.append(saveBtn);
			buttons.append(cancelBtn);
			target.append(buttons);
			this.saveProfileHandler(target);
			target.siblings().each((function (_this) {
				return function (i, e) {
					$(e).removeClass("active");
					return _this.removeButtons($(e));
				};
			})(this));
			target.addClass("active").removeClass("closed");
			return target.find("input, select").prop("disabled", false);
		};

		UIAccount.prototype.removeButtons = function (target) {
			$(".save", target).off('click');
			$(".delete", target).off('click');
			return $(".buttons", target).fadeOut(function () {
				$(this).remove();
				target.removeClass("active").addClass("closed");
				return target.find("input, select").prop("disabled", true);
			});
		};

		UIAccount.prototype.initToggleEdit = function () {

			$('#main').find('input, select').prop('disabled', true);
			return $('.account-primary-col .edit-link').on("click", (function (_this) {
				return function (e) {
					var $self, fieldset;

					e.preventDefault();
					$self = $(e.target);
					fieldset = $self.closest('.fieldset');

					if (fieldset.hasClass('active')) {
						return _this.removeButtons(fieldset);
					} else {
						return _this.createButtons(fieldset);
					}
				};
			})(this));
		};

		UIAccount.prototype.saveProfileHandler = function (target) {
			$('.cancel', target).on('click', (function (_this) {
				return function (e) {
					var $form, $self, fieldset;
					e.preventDefault();
					$self = $(e.target);
					fieldset = $self.closest(".fieldset");
					_this.removeButtons(fieldset);
					$form = $self.closest("form");
					$form.trigger("reset");
					return location.reload();
				};
			})(this));
			return $('.save', target).on('click', (function (_this) {
				return function (e) {
					var $self, emailUpdate, postData, url, validator, $birthFields, $birthFieldMonth, $birthFieldDay, bMonthVal, bDayVal, error;
					e.preventDefault();
					$self = $(e.target);
					url = Urls['editProfile'];
					$('.form-caption').removeClass('error');
					validator = _this.$ProfileForm.validate();

					if (validator && !_this.$ProfileForm.valid()) {
						$(validator.invalidElements()[0]).nextAll('.form-caption').addClass('label error');
						validator.focusInvalid();
						return;
					}


					$birthFields = $('.birthday-fields');
					$birthFieldMonth = $('.month');
					$birthFieldDay = $('.day');
					bMonthVal = $('#dwfrm_profile_customer_birth__month').val();
					bDayVal = $('#dwfrm_profile_customer_birth__day').val();
					months30 = ['04', '06', '09', '10'];
					error = '';
					if ($birthFields.hasClass('active')) {
						if ((!bMonthVal && bDayVal)) {
							$('.form-caption').removeClass('label error').html(error);
							error = Resources.INVALID_MONTH;
							$birthFieldMonth.find('.form-caption').addClass('label error').html(error);
							return;
						} else if ((bMonthVal && !bDayVal) ||
							(months30.indexOf(bMonthVal.toLowerCase()) !== -1 && bDayVal > 30) ||
							(bMonthVal === '02' && bDayVal > 29)) {
							$('.form-caption').removeClass('label error').html(error);
							error = Resources.INVALID_DAY;
							$birthFieldDay.find('.form-caption').addClass('label error').html(error);
							return;
						} else if (!bMonthVal && !bDayVal) {
							$('.form-caption').removeClass('label error').html(error);
							error = Resources.INVALID_DATE;
							$birthFieldMonth.find('.form-caption').addClass('label error').html(error);
							return;
						} else {
							var error = "";
							$('.form-caption').removeClass('label error').html(error);
						}
					}

					postData = _this.$ProfileForm.serializeArray();
					$(':disabled[name]', _this.$ProfileForm).each(function () {
						return postData.push({
							name: this.name,
							value: $(this).val()
						});
					});
					emailUpdate = $self.closest('.fieldset').hasClass('fieldset-email');
					if (emailUpdate) {
						postData.push({
							name: 'updateFlag',
							value: 'true'
						});
					}
					LoadingUtil.disableElement($self, $self);
					return $.ajax({
						type: "POST",
						url: url,
						dataType: "json",
						data: postData,
						error: function (request, status, error) {
							LoadingUtil.enableElement($self, $self);
						},
						success: function (response) {
							var callback;
							if (response.success) {
								_this.removeButtons(target);
								target.append('<div class="success">Account updated</div>');
								callback = function () {
									return target.find(".success").fadeOut(function () {
										return $(this).remove();
									});
								};
								return setTimeout(callback, 5000);
							}
						}
					});
				};
			})(this));
		};

		UIAccount.prototype.initOrdersShowMore = function () {
			return $('.orders-list-wrapper').on('click', '#orders-show-more', (function (_this) {
				return function (e) {
					var $self, pagingurl;
					e.preventDefault();
					$self = $(e.target);
					pagingurl = $self.attr("href") + "&format=ajax";
					LoadingUtil.disableElement($self, $self);
					$.ajax({
						type: "GET",
						url: pagingurl,
						error: function (request, status, error) {
							return LoadingUtil.enableElement($self, $self);
						},
						success: function (response) {
							var $moreOrders, $responseObj, $showMoreBtn, newEle;
							newEle = $(document.createElement('div'));
							$responseObj = $(response);
							$moreOrders = $responseObj.find(".order-result-items");
							$showMoreBtn = $responseObj.find(".order-result-options");
							$(".order-result-options").html($showMoreBtn.children());
							return $('.order-result-items').append($moreOrders.children().hide().fadeIn());
						}
					});
					return;
				};
			})(this));
		};

		UIAccount.prototype.initRequestPasswordReset = function () {
			return $('body').on('click', '#password-reset-cta', function (e) {
				var $el, bindEvents, dialogSettings;
				e.preventDefault();
				$el = $('#password-reset-dialog');
				bindEvents = (function (_this) {
					return function (dialogID) {
						var $d;
						$d = $("[data-dialog-id=" + dialogID + "]");
						$d.on('click', '.cancel, .account-button', function (e) {
							e.preventDefault();
							return UIDialogs.close(dialogID);
						});
						return $d.on('click', 'button[type=submit]', function (e) {
							var $i, data, i, j, len, ref;
							e.preventDefault();
							data = {
								format: 'ajax'
							};
							ref = $d.find('input, button');
							for (j = 0, len = ref.length; j < len; j++) {
								i = ref[j];
								$i = $(i);
								data[$i.prop('name')] = $i.val();
							}
							return $.ajax({
								type: 'POST',
								url: $d.find('form').attr('action'),
								data: data,
								success: function (data) {
									return $d.find('.dialog-main').html(data);
								}
							});
						});
					};
				})(this);
				dialogSettings = {
					title: '',
					body: $('<span></span>').append($el.get(0).innerHTML),
					hideFooter: true,
					openCallback: function (dialogID) {
						return bindEvents(dialogID);
					}
				};
				return UIDialogs.prompt(dialogSettings);
			});
		};

		UIAccount.prototype.debugLog = function (msg) {
			if (this.debug) {
				return console.log(msg);
			}
		};

		return UIAccount;

	})();
});




define('UI.View.AddressBookMsgs', ['lodash', 'jquery', 'Flux.App', 'UI.View.Dialogs', 'UI.View.FormUtilities', 'Util.Browser'], function (_, $, FluxApp, UIDialogs, UIFormUtilities, Browser) {
	var UIAddressBookMsgs;
	return UIAddressBookMsgs = (function () {
		function UIAddressBookMsgs() {
			this.initDeleteConfirmDialog = bind(this.initDeleteConfirmDialog, this);
			this.showDeleteConfirmMsg = bind(this.showDeleteConfirmMsg, this);
			this.$wrapper = $('#addresses');
			if (!this.$wrapper.length === 0) {
				return false;
			}
		}

		UIAddressBookMsgs.prototype.initialize = function () {
			var isMobile = Browser.getBreakpoint();

			if (isMobile = 'mobile') {
				isMobile = true;
			}

			this.header = $('#default-address').position();
			this.$deleteConfirmMsgContainer = $('#deleteAddress');
			this.initDeleteConfirmDialog();
			return $((function (_this) {
				return function (e) {
					if (_this.$deleteConfirmMsgContainer.length > 0) {
						return _this.showDeleteConfirmMsg();
					}
				};
			})(this));
		};

		UIAddressBookMsgs.prototype.showDeleteConfirmMsg = function () {
			if (this.isMobile) {
				$('html, body').animate({
					scrollTop: this.header.top
				}, 500, (function (_this) {
					return function (e) {
						return $('.delete-address-message').show('slow', function (e) {
							return window.setTimeout("$('.delete-address-message').hide('slow')", 4000);
						});
					};
				})(this));
			} else {
				$('.delete-address-message').show('slow', (function (_this) {
					return function (e) {
						return window.setTimeout("$('.delete-address-message').hide('slow')", 4000);
					};
				})(this));
			}
		};

		UIAddressBookMsgs.prototype.initDeleteConfirmDialog = function () {
			return $(function () {
				return $(".delete-address").on('click', (function (_this) {
					return function (e) {
						var $target, url;
						e.preventDefault();
						$target = $(e.target);
						url = window.Urls.addressDeleteConfirmation + "?format=ajax";
						return $.ajax({
							type: "POST",
							url: url,
							success: function (response) {
								var $header, FormUtilities, dialogSettings, emailBody, newEle;
								if (response.trim() !== '') {
									newEle = $(document.createElement('div'));
									emailBody = newEle.html(response);
									dialogSettings = {
										title: 'Delete Address',
										showAsRequired: true,
										body: emailBody,
										submitText: 'Ok',
										openCallback: function (dialogID) { },
										closeCallback: function () { },
										submitCallback: function (callToClose) { }
									};
									UIDialogs.prompt(dialogSettings);
									FormUtilities = new UIFormUtilities;
									FormUtilities.initialize();
									$header = $('.dialog-header');
									$header.find('h3').hide();
									$header.find('.required-fields').hide();
									return $('.sees-dialog-content .submit-dialog').on('click', function (e) {
										return window.location.href = $target.attr('href');
									});
								} else {
									return window.location.href = $target.attr('href');
								}
							}
						});
					};
				})(this));
			});
		};

		return UIAddressBookMsgs;

	})();
});

define('UI.View.Alignments', ['UI.View.AlignmentUtil'], function (UIAlignmentUtil) {
	$(function () {
		return new UIAlignmentUtil('.landing-group-tile:not(.large) > div');
	});
});

define('UI.View.AlignmentUtil', ['jquery', 'lodash', 'Modernizr', 'Flux.App'], function ($, _, Modernizr, FluxApp) {
	var AlignmentUtil, prefixedTransform;
	prefixedTransform = Modernizr.prefixed('transform');
	return AlignmentUtil = (function () {
		AlignmentUtil.prototype.async = false;

		AlignmentUtil.prototype.$imgs = [];

		function AlignmentUtil(sel, balancerCb) {
			var aligned;
			if (balancerCb == null) {
				balancerCb = _.noop;
			}
			this.$els = $(sel);
			this.$imgs = this.$els.find('img');
			if (this.$imgs.length) {
				this.async = true;
			}
			this.store = FluxApp.stores.BrowserStore;
			FluxApp.stores.BrowserStore.on('change', (function (_this) {
				return function () {
					if (_this.store.getState().properties.resized) {
						return _this.heightAlignElements();
					}
				};
			})(this));
			if (this.async) {
				aligned = 0;
				this.$imgs.map((function (_this) {
					return function (k, el) {
						var $img;
						$img = $(el);
						return $img.one('load', function () {
							aligned += 1;
							if (aligned === _this.$imgs.length) {
								return _this.heightAlignElements();
							}
						}).each(function () {
							if (this.complete) {
								return $(this).trigger('load');
							}
						});
					};
				})(this));
			} else {
				$((function (_this) {
					return function () {
						return _this.heightAlignElements();
					};
				})(this));
			}
		}

		AlignmentUtil.prototype.heightAlignElements = function () {
			var diff, hs, i, j, k, largestHeightIndex, len, results, tallestHeight;
			tallestHeight = 0;
			largestHeightIndex = -1;
			hs = this.$els.map(function (k, el) {
				var offsetHeight;
				offsetHeight = this.offsetHeight;
				tallestHeight = offsetHeight + 25;
				largestHeightIndex = k;
				return {
					offsetHeight: offsetHeight,
					el: el
				};
			});
			results = [];
			for (k = j = 0, len = hs.length; j < len; k = ++j) {
				i = hs[k];
				if (k !== largestHeightIndex) {
					diff = Math.abs(tallestHeight - i.offsetheight);
					results.push(i.el.style.height = tallestHeight + "px");
				} else {
					results.push(void 0);
				}
			}
			return results;
		};

		return AlignmentUtil;

	})();
});

define('UI.View.Carousels', ['jquery', 'TweenLite', 'TimelineLite', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton'], function ($, TweenLite, TimelineLite, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus) {
	var UICarousels;
	return UICarousels = (function () {
		function UICarousels() {
			this.$main = $('#main');
			this.$popularCandiesCarousels = this.$main.find('.pop');
			this.$homeMajorCarousels = this.$main.find('.home-major-carousel');
			this.$homeMajorCarouselsAutoScroll = this.$main.find('.home-major-carousel-auto-scroll');
			this.$productCarousels = this.$main.find('.product-carousel');
			this.$createABoxCarousels = this.$main.find('.create-a-box-carousel');
			this.$relatedPiecesCarousels = this.$main.find('.related-pieces-carousel');
			this.$popularCandiesCarousels = this.$main.find('.popular-candies-carousel');
			this.$aboutUsCarousels = this.$main.find('#About #aboutus-hero .carousel, #About #aboutus-corporate .carousel, #About #aboutus-kitchen .carousel, #About #aboutus-history .carousel, #About #aboutus-asseenin .carousel, #About #companyinfo-careers .carousel, #About #aboutus-community .carousel');
			this.$fundraisingCarousels = this.$main.find('#Fundraising .carousel');
			this.$aboutUsFamilyCarousels = this.$main.find('#About #aboutus-family .carousel');
			this.$aboutUsTimelineCarousels = this.$main.find('#About #aboutus-timeline .carousel');
			this.activeClassName = 'active';
			this.carouselAnimateTime = .25;

			// Initialize.
			$('.home-major-carousel').on('init', function (event, slick) {

				if ($(window).width() > 480) {
					var currentHeroContentID = $(slick.$slides.get(0)).attr('data-contentid').replace('mo-homepage-major-', 'mo-homepage-hero-');
					if ($('.' + currentHeroContentID).length > 0) {
						$('.' + currentHeroContentID).show();
					}
				}
			});

			// Initialize.
			$('.home-major-carousel-auto-scroll').on('init', function (event, slick) {

				if ($(window).width() > 480) {
					var currentHeroContentID = $(slick.$slides.get(0)).attr('data-contentid').replace('mo-homepage-major-', 'mo-homepage-hero-');
					if ($('.' + currentHeroContentID).length > 0) {
						$('.' + currentHeroContentID).show();
					}
				}
			});

			// Initialize.
			$('.home-major-carousel-auto-scroll').on('init', function (event, slick) {

				if ($(window).width() > 480) {
					var currentHeroContentID = $(slick.$slides.get(0)).attr('data-contentid').replace('mo-homepage-major-', 'mo-homepage-hero-');
					if ($('.' + currentHeroContentID).length > 0) {
						$('.' + currentHeroContentID).show();
					}
				}
			});


			// On before slide change.
			$('.home-major-carousel').on('beforeChange', function (event, slick, currentSlide, nextSlide) {

				if ($(window).width() > 480) {
					var currentHeroContentID = $(slick.$slides.get(currentSlide)).attr('data-contentid').replace('mo-homepage-major-', 'mo-homepage-hero-');
					var nextHeroContentID = $(slick.$slides.get(nextSlide)).attr('data-contentid').replace('mo-homepage-major-', 'mo-homepage-hero-');

					if ($('.' + currentHeroContentID).length > 0 && $('.' + nextHeroContentID).length > 0) {
						$('.' + currentHeroContentID).hide();
						$('.' + nextHeroContentID).show();
					}
				}
			});

			// On before slide change.
			$('.home-major-carousel-auto-scroll').on('beforeChange', function (event, slick, currentSlide, nextSlide) {

				if ($(window).width() > 480) {
					var currentHeroContentID = $(slick.$slides.get(currentSlide)).attr('data-contentid').replace('mo-homepage-major-', 'mo-homepage-hero-');
					var nextHeroContentID = $(slick.$slides.get(nextSlide)).attr('data-contentid').replace('mo-homepage-major-', 'mo-homepage-hero-');
					if ($('.' + currentHeroContentID).length > 0 && $('.' + nextHeroContentID).length > 0) {
						$('.' + currentHeroContentID).hide();
						$('.' + nextHeroContentID).show();
					}
				}
			});

			/*
			   * @timeline = new TimelineLite({paused : true}) @timelineEle =
			   * @$navFlyoutsWrapper[0] @timeline .set( @timelineEle,
			   * {display:"block"}) .to( @timelineEle, @navOpenTime,
			   * {height:'200px',opacity:1});
			   * 
			   * @browserStore = FluxApp.stores.BrowserStore
			   */
		}

		UICarousels.prototype.initialize = function () {
			var $carousels, breakpoint, carousels, destroyCarousels, initCarousels, unwrapImages, wrapImages;
			carousels = this.$homeMajorCarousels.add(this.$relatedPiecesCarousels);
			carousels.each((function (_this) {
				return function (index) {
					var carouselInner, carouselList, carouselWrapper, nArrow, pArrow, phoneSettings, tabletSettings;
					carouselWrapper = $(carousels[index]);
					carouselInner = carouselWrapper.find('.tile-list');
					carouselList = carouselInner.find('.tiles');
					pArrow = carouselInner.find('.prev-arrow');
					nArrow = carouselInner.find('.next-arrow');
					tabletSettings = {
						breakpoint: 1025,
						settings: {
							slidesToShow: 1,
							slidesToScroll: 1,
							animating: false,
							dots: false,
							infinite: true
						}
					};
					phoneSettings = {
						breakpoint: 769,
						settings: {
							slidesToShow: 1,
							slidesToScroll: 1,
							animating: false,
							dots: false,
							infinite: true
						}
					};
					return carouselList.slick({
						infinite: true,
						slidesToShow: 1,
						slidesToScroll: 1,
						animating: false,
						prevArrow: pArrow,
						nextArrow: nArrow,
						responsive: [tabletSettings, phoneSettings]
					});
				};
			})(this));
			carousels = this.$homeMajorCarouselsAutoScroll.add(this.$relatedPiecesCarousels);
			carousels.each((function (_this) {
				return function (index) {
					var carouselInner, carouselList, carouselWrapper, nArrow, pArrow, phoneSettings, tabletSettings, homeMajorCarouselAutoplaySpeed;
					carouselWrapper = $(carousels[index]);
					carouselInner = carouselWrapper.find('.tile-list');
					carouselList = carouselInner.find('.tiles');
					pArrow = carouselInner.find('.prev-arrow');
					nArrow = carouselInner.find('.next-arrow');
					homeMajorCarouselAutoplaySpeed = $('#homeMajorCarouselAutoplaySpeed').val();
					homeMajorCarouselScrollSpeed = $('#homeMajorCarouselScrollSpeed').val();
					tabletSettings = {
						breakpoint: 1025,
						settings: {
							slidesToShow: 1,
							slidesToScroll: 1,
							animating: false,
							dots: false,
							autoplay: true,
							autoplaySpeed: homeMajorCarouselAutoplaySpeed,
							speed: homeMajorCarouselScrollSpeed,
							infinite: true
						}
					};
					phoneSettings = {
						breakpoint: 769,
						settings: {
							slidesToShow: 1,
							slidesToScroll: 1,
							animating: false,
							dots: false,
							autoplay: true,
							autoplaySpeed: homeMajorCarouselAutoplaySpeed,
							speed: homeMajorCarouselScrollSpeed,
							infinite: true
						}
					};
					return carouselList.slick({
						infinite: true,
						slidesToShow: 1,
						slidesToScroll: 1,
						animating: false,
						prevArrow: pArrow,
						nextArrow: nArrow,
						autoplay: true,
						autoplaySpeed: homeMajorCarouselAutoplaySpeed,
						speed: homeMajorCarouselScrollSpeed,
						responsive: [tabletSettings, phoneSettings]
					});
				};
			})(this));
			carousels = this.$productCarousels;
			carousels.each((function (_this) {
				return function (index) {
					var carouselInner, carouselList, carouselWrapper, nArrow, pArrow, phoneSettings, tabletSettings, slidesToShow;
					carouselWrapper = $(carousels[index]);
					carouselInner = carouselWrapper.find('.tile-list');
					carouselList = carouselInner.find('.tiles');
					slidesToShow = carouselList.data('slides-to-show') || 3;
					pArrow = carouselInner.find('.prev-arrow');
					nArrow = carouselInner.find('.next-arrow');
					tabletSettings = {
						breakpoint: 1025,
						settings: {
							slidesToShow: slidesToShow > 1 ? slidesToShow - 1 : 1,
							slidesToScroll: 1,
							infinite: true
						}
					};
					phoneSettings = {
						breakpoint: 769,
						settings: {
							slidesToShow: slidesToShow > 2 ? slidesToShow - 2 : 1,
							slidesToScroll: 1,
							infinite: true
						}
					};
					return carouselList.slick({
						infinite: true,
						slidesToShow: slidesToShow,
						slidesToScroll: 1,
						prevArrow: pArrow,
						nextArrow: nArrow,
						responsive: [tabletSettings, phoneSettings]
					});
				};
			})(this));
			carousels = this.$createABoxCarousels.add(this.$relatedPiecesCarousels);
			carousels.each((function (_this) {
				return function (index) {
					var carouselInner, carouselList, carouselWrapper, nArrow, pArrow, phoneSettings, tabletSettings;
					carouselWrapper = $(carousels[index]);
					carouselInner = carouselWrapper.find('.tile-list');
					carouselList = carouselInner.find('.tiles');
					pArrow = carouselInner.find('.prev-arrow');
					nArrow = carouselInner.find('.next-arrow');
					tabletSettings = {
						breakpoint: 1025,
						settings: {
							slidesToShow: 3,
							slidesToScroll: 1,
							infinite: true
						}
					};
					phoneSettings = {
						breakpoint: 769,
						settings: {
							slidesToShow: 1,
							slidesToScroll: 1,
							infinite: true
						}
					};
					return carouselList.slick({
						infinite: true,
						slidesToShow: 5,
						slidesToScroll: 1,
						prevArrow: pArrow,
						nextArrow: nArrow,
						responsive: [tabletSettings, phoneSettings]
					});
				};
			})(this));
			carousels = this.$popularCandiesCarousels;
			carousels.each((function (_this) {
				return function (index) {
					var carouselInner, carouselList, carouselWrapper, nArrow, pArrow, phoneSettings, tabletSettings;
					carouselWrapper = $(carousels[index]);
					carouselInner = carouselWrapper.find('.tile-list');
					carouselList = carouselInner.find('.tiles');
					pArrow = carouselInner.find('.prev-arrow');
					nArrow = carouselInner.find('.next-arrow');
					tabletSettings = {
						breakpoint: 1025,
						settings: {
							slidesToShow: 2,
							slidesToScroll: 2,
							dots: true,
							infinite: false
						}
					};
					phoneSettings = {
						breakpoint: 769,
						settings: {
							slidesToShow: 1,
							slidesToScroll: 1,
							dots: true,
							infinite: false
						}
					};
					return carouselList.slick({
						infinite: false,
						slidesToShow: 4,
						slidesToScroll: 1,
						prevArrow: pArrow,
						nextArrow: nArrow,
						responsive: [tabletSettings, phoneSettings]
					});
				};
			})(this));
			if (this.$aboutUsCarousels.length || this.$fundraisingCarousels.length) {
				$carousels = $.merge(this.$aboutUsCarousels, this.$fundraisingCarousels);
				breakpoint = FluxApp.stores.BrowserStore.getState().properties.breakpoint;
				initCarousels = (function (_this) {
					return function ($c) {
						var arrows;
						if ($c.find('.column-4').length) {
							$c.find('.column-4').attr('data-had-column-4', true).removeClass('column-4');
						}
						arrows = true;
						if ($c.attr('data-carousel-arrows') !== "") {
							arrows = false;
						}
						return $c.slick({
							infinite: false,
							slidesToShow: 1,
							slidesToScroll: 1,
							dots: !arrows,
							arrows: arrows
						});
					};
				})(this);
				destroyCarousels = (function (_this) {
					return function ($c) {
						if ($c.find('.slick-slide[data-had-column-4]').length) {
							$c.find('.slick-slide').addClass('column-4');
						}
						return $c.slick('unslick');
					};
				})(this);
				if (breakpoint !== 'desktop') {
					$carousels.each((function (_this) {
						return function (index, carousel) {
							var $c;
							$c = $(carousel);
							if (!$c.hasClass('slick-slider')) {
								return initCarousels($c);
							}
						};
					})(this));
				}
				FluxApp.stores.BrowserStore.on('change', (function (_this) {
					return function () {
						var previousBreakpoint, ref, resized;
						ref = FluxApp.stores.BrowserStore.getState().properties, previousBreakpoint = ref.previousBreakpoint, breakpoint = ref.breakpoint, resized = ref.resized;
						if (!resized) {
							return;
						}
						if (!((breakpoint === 'desktop' || previousBreakpoint === 'desktop') && breakpoint !== previousBreakpoint)) {
							return;
						}
						if (breakpoint === 'desktop') {
							$carousels.each(function (index, carousel) {
								var $c;
								$c = $(carousel);
								if ($c.hasClass('slick-slider')) {
									return destroyCarousels($c);
								}
							});
						}
						if (breakpoint !== 'desktop') {
							return $carousels.each(function (index, carousel) {
								var $c;
								$c = $(carousel);
								if (!$c.hasClass('slick-slider')) {
									return initCarousels($c);
								}
							});
						}
					};
				})(this));
			}
			if (this.$aboutUsFamilyCarousels.length || this.$aboutUsTimelineCarousels) {
				$carousels = $.merge(this.$aboutUsFamilyCarousels, this.$aboutUsTimelineCarousels);
				breakpoint = FluxApp.stores.BrowserStore.getState().properties.breakpoint;
				wrapImages = function ($c) {
					var $imgs;
					$imgs = $c.children('img');
					return $imgs.wrap($('<div></div>').css('width', (100 / $imgs.length) + '%'));
				};
				unwrapImages = function ($c) {
					var $imgs;
					$imgs = $c.children('div').children('img');
					if ($imgs.parent().is('div')) {
						return $imgs.unwrap();
					}
				};
				initCarousels = (function (_this) {
					return function ($c) {
						var arrows;
						if ($c.find('.column-4').length) {
							$c.find('.column-4').attr('data-had-column-4', true).removeClass('column-4');
						}
						arrows = true;
						if ($c.attr('data-carousel-arrows') !== "") {
							arrows = false;
						}
						wrapImages($c);
						return $c.slick({
							infinite: false,
							slidesToShow: 1,
							slidesToScroll: 1,
							dots: !arrows,
							arrows: arrows,
							variableWidth: true
						});
					};
				})(this);
				destroyCarousels = (function (_this) {
					return function ($c) {
						if ($c.find('.slick-slide[data-had-column-4]').length) {
							$c.find('.slick-slide').addClass('column-4');
						}
						return $c.slick('unslick');
					};
				})(this);
				if (breakpoint !== 'desktop') {
					$carousels.each((function (_this) {
						return function (index, carousel) {
							var $c;
							$c = $(carousel);
							if (!$c.hasClass('slick-slider')) {
								return initCarousels($c);
							}
						};
					})(this));
				}
				return FluxApp.stores.BrowserStore.on('change', (function (_this) {
					return function () {
						var previousBreakpoint, ref, resized;
						ref = FluxApp.stores.BrowserStore.getState().properties, previousBreakpoint = ref.previousBreakpoint, breakpoint = ref.breakpoint, resized = ref.resized;
						if (!resized) {
							return;
						}
						if (!((breakpoint === 'desktop' || previousBreakpoint === 'desktop') && breakpoint !== previousBreakpoint)) {
							return;
						}
						if (breakpoint === 'desktop') {
							$carousels.each(function (index, carousel) {
								var $c;
								$c = $(carousel);
								if ($c.hasClass('slick-slider')) {
									destroyCarousels($c);
									return unwrapImages($c);
								}
							});
						}
						if (breakpoint !== 'desktop') {
							return $carousels.each(function (index, carousel) {
								var $c;
								$c = $(carousel);
								if (!$c.hasClass('slick-slider')) {
									return initCarousels($c);
								}
							});
						}
					};
				})(this));
			}
		};

		return UICarousels;

	})();
});



define('UI.View.Cart', ['jquery', 'TweenLite', 'TimelineLite', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton', 'UI.View.Dialogs', 'UI.View.LoadingUtil', 'dataLayer', 'Util.Ajax'], function ($, TweenLite, TimelineLite, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus, UIDialogs, LoadingUtil, dataLayer, AjaxUtil) {
	var UICart;
	return UICart = (function () {
		function UICart() {
			this.initGiftCardTooltip = bind(this.initGiftCardTooltip, this);
			this.updateCartContents = bind(this.updateCartContents, this);
			this.removeCoupon = bind(this.removeCoupon, this);
			this.sendQtyUpdate = bind(this.sendQtyUpdate, this);
			this.updateLineItemQty = bind(this.updateLineItemQty, this);
			this.handleDataLayer = bind(this.handleDataLayer, this);
			this.initQtySelectors = bind(this.initQtySelectors, this);
			this.setCartURLs = bind(this.setCartURLs, this);
			this.submitToCheckout = bind(this.submitToCheckout, this);
			this.cartAgreementModal = bind(this.cartAgreementModal, this);
			this.qdSignatureModal = bind(this.qdSignatureModal, this);
			this.frSignatureModal = bind(this.frSignatureModal, this);
			this.checkAuthStatus = bind(this.checkAuthStatus, this);
			this.checkMinimumOrder = bind(this.checkMinimumOrder, this);
			this.tryAuthCheckout = bind(this.tryAuthCheckout, this);
			this.proceedToCheckout = bind(this.proceedToCheckout, this);
			this.configureCTAclone = bind(this.configureCTAclone, this);
			this.$main = $('#main');
			this.$siteHeader = $('#site-header');
			this.$cartWrapper = this.$main.find('#cart-wrapper');
			if (!this.$cartWrapper.length) {
				return;
			}
			this.qtyUpdateTimer = null;
			this.activeClassName = 'active';
			this.carouselAnimateTime = .25;
		}

		UICart.prototype.initialize = function () {
			var data, i, idArr, len, price, ref, row;
			if (!this.$cartWrapper.length) {
				return this;
			}
			this.initQtySelectors();
			this.initGiftCardTooltip();
			this.proceedToCheckout();
			this.configureCTAclone();
			this.$links = $('a[data-productinfo]');

			idArr = [];
			price = 0;
			ref = this.$links;
			for (i = 0, len = ref.length; i < len; i++) {
				row = ref[i];
				data = $(row).data('productinfo');
				idArr.push(data.id);
				price += parseFloat(data.price);
			}
			price = price.toFixed(2);
			dataLayer.push({
				google_tag_params: {
					ecomm_totalvalue: parseFloat(price),
					ecomm_prodid: idArr,
					ecomm_pagetype: 'cart'
				}
			});
			this.initialized = true;
			return this;
		};

		UICart.prototype.configureCTAclone = function () {
			var $ctaBtnClone;
			$ctaBtnClone = $('.cta-clone div button');
			$ctaBtnClone.off('click', '**');
			$ctaBtnClone.on('click', (function (_this) {
				return function (e) {
					e.preventDefault();
					e.stopPropagation();
					if ($(this).hasClass('login2')) {
						return _this.checkAuthStatus();
					}
					else {
						if ($(this).hasClass('guest')) {
							return $('#checkout-form').find('div.cta button.primary').trigger('click');
						}
						else {
							return $('#checkout-form').find('div.cta button').trigger('click');
						}
					}
				};
			})(this));
			return true;
		};

		UICart.prototype.proceedToCheckout = function () {
			var $cartWrapper, submitCTASelector, summaryFormSelector;
			$cartWrapper = this.$cartWrapper;
			summaryFormSelector = '#checkout-form ';
			submitCTASelector = 'button[type="submit"] ';
			$cartWrapper.on('click', summaryFormSelector + submitCTASelector, (function (_this) {
				return function (e) {
					var $submitCTA, $summaryForm, frSigned, hasBeenValidated, siteID, userIsAuth;
					$submitCTA = $(e.currentTarget);
					$summaryForm = $cartWrapper.find(summaryFormSelector);
					siteID = $cartWrapper.data('site-id');
					userIsAuth = $cartWrapper.data('user-is-auth');
					frSigned = $cartWrapper.data('fr-signed');
					hasBeenValidated = $cartWrapper.data('validated');
					if (hasBeenValidated !== 'true' && siteID !== 'MO') {
						e.preventDefault();
						return _this.tryAuthCheckout($summaryForm, $submitCTA, siteID, userIsAuth, frSigned);
					}
					else {
						if (siteID === 'MO' && $(this).hasClass('login')) {
							e.preventDefault();
							return _this.checkAuthStatus();
						}
						$(document.body).loader();
					}
				};
			})(this));
			return true;
		};

		UICart.prototype.tryAuthCheckout = function ($summaryForm, $submitCTA, siteID, userIsAuth, frSigned) {
			var $minimumOrderDialog, authCheck, frAgreementCheck, minimumOrderCheck, qdAgreementCheck;
			$minimumOrderDialog = $(document).find('.minimum-order-dialog');
			minimumOrderCheck = (function (_this) {
				return function (nextStep) {
					var minimumCallback;
					minimumCallback = function (continueSubmit) {
						if (continueSubmit === true) {
							return nextStep();
						}
					};
					if ($minimumOrderDialog.length) {
						return _this.checkMinimumOrder(minimumCallback);
					} else {
						return nextStep();
					}
				};
			})(this);
			authCheck = (function (_this) {
				return function () {
					if (siteID !== 'MO' && userIsAuth !== true) {
						return _this.checkAuthStatus();
					} else if (siteID === 'FR') {
						return frAgreementCheck();
					} else if (siteID === 'BG' || siteID === 'GD') {
						return qdAgreementCheck();
					}
				};
			})(this);
			frAgreementCheck = (function (_this) {
				return function (nextStep) {
					var agreementCallback;
					if (nextStep == null) {
						nextStep = _this.submitToCheckout;
					}
					agreementCallback = function (continueSubmit) {
						if (continueSubmit === true) {
							return nextStep($submitCTA);
						}
					};
					if (siteID === 'FR' && userIsAuth === true) {
						return _this.frSignatureModal(agreementCallback);
					} else {
						return nextStep($submitCTA);
					}
				};
			})(this);
			qdAgreementCheck = (function (_this) {
				return function (nextStep) {
					var agreementCallback;
					if (nextStep == null) {
						nextStep = _this.submitToCheckout;
					}
					agreementCallback = function (continueSubmit) {
						if (continueSubmit === true) {
							return nextStep($submitCTA);
						}
					};
					if (userIsAuth === true) {
						return _this.qdSignatureModal(agreementCallback);
					} else {
						return nextStep($submitCTA);
					}
				};
			})(this);
			return minimumOrderCheck(authCheck);
		};

		UICart.prototype.checkMinimumOrder = function (cb) {
			var dialogSettings;
			dialogSettings = {
				title: null,
				showAsRequired: null,
				submitText: null,
				body: $('.minimum-order-dialog'),
				openCallback: (function (_this) {
					return function (dialogID) {
						var $continueButton, $dialogWrapper, $required, $returnButton, $toggle;
						$dialogWrapper = $('.minimum-order-dialog');
						$continueButton = $dialogWrapper.find('.continue-checkout');
						$returnButton = $dialogWrapper.find('.return-to-shopping');
						$required = $('.dialog-header').find('.required-fields');
						$toggle = $('.dialog-main').find('.minimum-order-dialog');
						$required.hide();
						$toggle.show();
						$returnButton.on('click', function (e) {
							return UIDialogs.close(dialogID, function () {
								return cb && cb(false);
							});
						});
						return $continueButton.on('click', function (e) {
							return UIDialogs.close(dialogID, function () {
								return cb && cb(true);
							});
						});
					};
				})(this),
				closeCallback: function () {
					return cb && cb(false);
				}
			};
			return UIDialogs.prompt(dialogSettings);
		};

		UICart.prototype.checkAuthStatus = function () {
			var authFormClass, authModalClass, url;
			authModalClass = 'cart-login-modal';
			authFormClass = 'login-form';
			url = window.Urls.cartAuthModal;
			url += '?format=ajax&target=Cart-Show';
			$.ajax({
				type: "GET",
				url: url,
				success: (function (_this) {
					return function (response) {
						var $tempWrapper, dialogSettings;
						$tempWrapper = $('<div></div>').addClass(authModalClass).html(response);
						dialogSettings = {
							title: 'Please Log In to Checkout',
							showAsRequired: null,
							submitText: null,
							body: $tempWrapper,
							openCallback: function (dialogID) { }
						};
						return UIDialogs.prompt(dialogSettings);
					};
				})(this)
			});
		};

		UICart.prototype.frSignatureModal = function (cb) {
			return this.cartAgreementModal(window.Urls.cartFRAgreementModal, window.Urls.cartFRSignAgreement, cb);
		};

		UICart.prototype.qdSignatureModal = function (cb) {
			return this.cartAgreementModal(window.Urls.cartQDAgreementModal, window.Urls.cartQDSignAgreement, cb);
		};

		UICart.prototype.cartAgreementModal = function (modalURL, submitURL, cb) {
			var authFormClass, authModalClass, url;
			authModalClass = 'cart-login-modal';
			authFormClass = 'login-form';
			url = modalURL;
			url += '?format=ajax';
			$.ajax({
				type: "GET",
				url: url,
				success: (function (_this) {
					return function (response) {
						var $tempWrapper, dialogSettings;
						$tempWrapper = $('<div>').addClass(authModalClass).html(response);
						dialogSettings = {
							title: null,
							showAsRequired: null,
							submitText: null,
							body: $tempWrapper,
							openCallback: function (dialogID) {
								var $agreeCTA, $cancelCTA;
								$agreeCTA = $('.sign-agreement');
								$cancelCTA = $('.cancel-agreement');
								url = submitURL;
								url += '?format=ajax';
								$agreeCTA.on('click', function (e) {
									return $.ajax({
										type: "GET",
										url: url,
										success: function (response) {
											return UIDialogs.close(dialogID, function () {
												return cb(true);
											});
										}
									});
								});
								return $cancelCTA.on('click', function (e) {
									return UIDialogs.close(dialogID, function () {
										return cb(false);
									});
								});
							}
						};
						return UIDialogs.prompt(dialogSettings);
					};
				})(this)
			});
		};

		UICart.prototype.submitToCheckout = function ($submitCTA) {
			var $cartWrapper;
			$cartWrapper = this.$cartWrapper;
			$cartWrapper.data('validated', 'true');
			return $submitCTA.trigger('click');
		};

		UICart.prototype.setCartURLs = function () {
			var $cartWrapper, $itemsForm, $summaryForm;
			$cartWrapper = this.$cartWrapper;
			$itemsForm = $cartWrapper.find('#cart-items-form');
			$summaryForm = $cartWrapper.find('#checkout-form');
			return this.checkoutURL = $itemsForm.attr('action');
		};

		UICart.prototype.initQtySelectors = function () {
			var $cartWrapper, $qtySelectors, lessClass, moreClass, qtyControlClass, removeSelector;
			$cartWrapper = this.$cartWrapper;
			qtyControlClass = ' .quantity-controls';
			removeSelector = ' .remove-from-cart-col a';
			lessClass = ' .less';
			moreClass = ' .more';
			$qtySelectors = $cartWrapper.find(qtyControlClass);
			if ($qtySelectors.length === 0) {
				return false;
			}
			$cartWrapper.on('click', lessClass + ',' + moreClass, (function (_this) {
				return function (e) {
					var $qtyControl, $qtyInput, origQty, qtyChange;
					e.preventDefault();
					$qtyControl = $(e.currentTarget);
					qtyChange = $qtyControl.data('qty-change');
					$qtyInput = $qtyControl.parent().find('input');
					origQty = parseInt($qtyInput.val());
					return _this.updateLineItemQty(origQty, qtyChange, $qtyInput, true);
				};
			})(this));
			$cartWrapper.on('keyup', qtyControlClass + ' input', (function (_this) {
				return function (e) {
					var $qtyInput, code, isSpecialKey, k, origQty, specialKeys, v;
					$qtyInput = $(e.currentTarget);
					origQty = parseInt($qtyInput.val());
					code = e.keyCode || e.which;
					isSpecialKey = false;
					specialKeys = {
						'Enter': 13,
						'Left': 37,
						'Right': 38,
						'Up': 39,
						'Down': 40
					};

					for (k in specialKeys) {
						v = specialKeys[k];
						if (code === v) {
							isSpecialKey = true;
							break;
						}
					}
					if (!isSpecialKey) {
						return _this.updateLineItemQty(origQty, 0, $qtyInput, isSpecialKey);
					}
				};
			})(this));
			$cartWrapper.on('keyup keypress', qtyControlClass + ' input', (function (_this) {
				return function (e) {
					var code;
					code = e.keyCode || e.which;
					if (code === 13) {
						e.preventDefault();
						return false;
					}
				};
			})(this));
			$cartWrapper.on('blur', qtyControlClass + ' input', (function (_this) {
				return function (e) {
					var $qtyInput, qtyVal;
					$qtyInput = $(e.currentTarget);
					qtyVal = $.trim($qtyInput.val());
					if (!qtyVal.length) {
						$qtyInput.val($qtyInput.data('previous-qty'));
						return;
					}
					return _this.sendQtyUpdate($qtyInput);
				};
			})(this));
			return $cartWrapper.on('click', removeSelector, (function (_this) {
				return function (e) {
					var $parentCartItem, $qtyInput, $removeCTA;
					e.preventDefault();
					$removeCTA = $(e.currentTarget);
					$parentCartItem = $removeCTA.parentsUntil('.cart-item-right-col').parent();
					if ($parentCartItem.hasClass('coupon-row')) {
						return _this.removeCoupon($parentCartItem.data('coupon-code'));
					} else {
						$qtyInput = $parentCartItem.find(qtyControlClass + ' input');
						_this.handleDataLayer($removeCTA, $qtyInput.val());
						$qtyInput.val(0);
						return _this.sendQtyUpdate($qtyInput);
					}
				};
			})(this));
		};

		UICart.prototype.handleDataLayer = function (button, quantity) {
			var productData;
			productData = $(button).data('productinfo');
			if (!productData) {
				return;
			}
			productData.quantity = +(quantity || 1);
			dataLayer.push({
				event: 'removeFromCart',
				ecommerce: {
					remove: {
						products: [productData]
					}
				}
			});
		};

		UICart.prototype.updateLineItemQty = function (inputQty, qtyChange, $qtyInput, isButtonClick) {
			var $cartRow, $lessControl, $moreControl, $nameContainer, maxVal, msgTemplate, newQty, previousQty, qtyVal;
			$qtyInput = $($qtyInput);
			previousQty = parseInt($qtyInput.data('previous-qty'));
			qtyVal = $.trim($qtyInput.val());
			maxVal = $qtyInput.attr('data-max-val') && $qtyInput.attr('data-max-val').length ? (+$qtyInput.data('max-val')) : -1;
			if (!qtyVal.length) {
				return false;
			}
			if (typeof isButtonClick === 'undefined') {
				isButtonClick = false;
			}
			if (isNaN(inputQty) || inputQty < 0) {
				$qtyInput.val(previousQty);
				return false;
			}
			newQty = inputQty + qtyChange;
			if (newQty < 0) {
				newQty = 0;
			}
			if (maxVal > 0) {
				$cartRow = $qtyInput.closest('.cart-row');
				$moreControl = $qtyInput.closest('.quantity-controls').find('.more');
				if (newQty > maxVal) {
					$moreControl.removeClass('active');
					$nameContainer = $cartRow.find('.cart-data-row.product-name');
					msgTemplate = jQuery.validator.format(window.Resources.MAX_CART_QTY);
					$moreControl.removeClass('active');
					if (!$cartRow.find('.qty-msg').length) {
						$('<div class="cart-data-row qty-msg fonts-copy">' + msgTemplate(maxVal) + '</div>').appendTo($nameContainer);
					}
					newQty = $qtyInput.data('previous-qty');
					$qtyInput.val(newQty);
				} else {
					$cartRow.find('.qty-msg').remove();
					$moreControl.addClass('active');
				}
			}
			if (isButtonClick) {
				$qtyInput.val(newQty);
			}
			$qtyInput.data('previous-qty', newQty);
			$qtyInput.trigger('change');
			$lessControl = $qtyInput.parent().find('.less');
			$lessControl.toggleClass('active', newQty > 1);
			if (previousQty !== newQty) {
				if (this.qtyUpdateTimer !== null) {
					window.clearTimeout(this.qtyUpdateTimer);
				}
				this.qtyUpdateTimer = window.setTimeout((function (_this) {
					return function () {
						return _this.sendQtyUpdate($qtyInput);
					};
				})(this), 1000);
			}
			return true;
		};

		UICart.prototype.sendQtyUpdate = function ($qtyInput) {
			var newQty, qtyVal, updateQtyURL, uuid;
			$qtyInput = $($qtyInput);
			qtyVal = $.trim($qtyInput.val());
			updateQtyURL = this.$cartWrapper.data('update-qty-url');
			uuid = $qtyInput.data('uuid');
			newQty = parseInt(qtyVal);
			updateQtyURL = updateQtyURL + '?uuid=' + uuid + '&Quantity=' + newQty;
			if (!qtyVal.length) {
				return;
			}
			$.ajax({
				type: "GET",
				url: updateQtyURL,
				success: (function (_this) {
					return function (response) {
						return _this.updateCartContents(response);
					};
				})(this)
			});
			return true;
		};

		UICart.prototype.removeCoupon = function (couponCode) {
			var removeCouponURL;
			removeCouponURL = this.$cartWrapper.data('remove-coupon-url');
			removeCouponURL = removeCouponURL + '?couponCode=' + couponCode;
			$.ajax({
				type: "GET",
				url: removeCouponURL,
				success: (function (_this) {
					return function (response) {
						return _this.updateCartContents(response);
					};
				})(this)
			});
			return true;
		};

		UICart.prototype.updateCartContents = function (response) {
			var $newCartMain, $newCartWrapper, $oldCartMain, cartDataURL, $oosDialog;
			$oldCartMain = this.$cartWrapper.children().filter('main');
			cartDataURL = this.$cartWrapper.data('cart-data-url');
			$newCartWrapper = $(response);
			$newCartMain = $newCartWrapper.children().filter('main');

			$oldCartMain.replaceWith($newCartMain);
			LoadingUtil.enableElement($oldCartMain, null);

			$.ajax({
				type: "GET",
				url: cartDataURL,
				success: (function (_this) {
					return function (newCartData) {
						var newFormattedQty;
						FluxApp.actions.updateCartDontShow(newCartData);
						return _this.$siteHeader.find('.cart-qty-inner').html(newCartData.outputString);
					};
				})(this)
			});
			return this.configureCTAclone();
		};

		UICart.prototype.initGiftCardTooltip = function () {
			var $cartWrapper, giftCardLinkClass, giftCardWrapperClass;
			$cartWrapper = this.$cartWrapper;
			giftCardWrapperClass = '.cart-gift-card';
			giftCardLinkClass = '.edit-link';
			return $cartWrapper.on('click', giftCardWrapperClass + ' ' + giftCardLinkClass, (function (_this) {
				return function (e) {
					var $tooltipCTA, $tooltipWrapper, dialogSettings;
					e.preventDefault();
					$tooltipCTA = $(e.currentTarget);
					$tooltipWrapper = _this.$cartWrapper.find('.cart-giftcard-modal-body');
					$tooltipWrapper = $tooltipWrapper.clone();
					$tooltipWrapper.removeClass('hide');
					dialogSettings = {
						title: 'Gift Cards and Certificates',
						showAsRequired: false,
						body: $tooltipWrapper,
						submitText: null,
						openCallback: function (dialogID) { },
						closeCallback: function () { },
						submitCallback: function (callToClose) { }
					};
					return UIDialogs.prompt(dialogSettings);
				};
			})(this));
		};

		// static helper
		UICart.refreshMiniCart = function () {
			var $hdrQty = $('#site-header').find('.cart-summary.indicator .cart-qty-inner');
			return AjaxUtil.ajaxAction('Cart-GetCartData').done(function (response) {
				// expects JSON response
				$hdrQty.html(response.outputString);
			});
		}

		UICart.rebuildMiniCart = function (cartData) {
			var $indicator = $('#site-header').find('.cart-summary.indicator');
			var $full = $('#site-header').find('.cart-summary.full');
			return AjaxUtil.ajaxAction('Cart-HeaderCart', { cache: false }).done(function (response) {
				var $response = $('<div></div>').append(response);
				$indicator.html($response.html());
				$full.append($response.find('.mini-cart-promo').first().clone());
				FluxApp.stores.CartStore.updateCart({ newCartData: window.app.cart });
			});

		}
		UICart.get = function () {
			return new UICart();
		}

		return UICart;

	})();
});

define('UI.View.ShipmentsList', ['jquery', 'Util.Ajax'], function ($, AjaxUtil) {

	var UIShipmentsList;
	return UIShipmentsList = (function () {

		function UIShipmentsList(settings) {
			this.settings = {};

			// private instance initialization
			this.initialize(settings);
			return;
		}

		UIShipmentsList.prototype.renderShipmentsList = function (content) {
			var $dlg = $('<div class="shipment-list-dialog"></div>'),
				$list = $(content),
				$selectAll = $list.find('input.select-all'),
				$shipmentCbs = $list.find('input.cb-shipment').not('.select-all'),
				deferred = $.Deferred(),
				onOpen = this.settings.open,
				onClose = this.settings.close,
				settings = {};

			_.extend(settings, {
				modal: true,
				width: 'auto',
				height: 'auto',
				maxHeight: document.documentElement.clientHeight,
				maxWidth: document.documentElement.clientWidth,
				autoOpen: false,
				title: 'Add Item To Shipments',
				dialogClass: 'sees-dialog',
				resizable: false,
				position: { my: "center", at: "center", of: window },
				buttons: [{
					text: "Add item to shipments",
					class: "account-button button",
					click: function (e) {
						e.preventDefault();
						// get selected shipments
						var shipments = $shipmentCbs.filter(':checked').map(function () {
							var $this = $(this);
							$item_cfg = $dlg.find('input[name="item_cfg"]'),
								item_cfg = null;

							if ($item_cfg.length && $item_cfg.val()) {
								try { item_cfg = JSON.parse($item_cfg.val()); } catch (ex) { }
							}

							return {
								additems: true,
								shipment_id: $this.val(),
								items: [{
									item_id: $dlg.find('input[name="item_id"]').val(),
									unique_id: $dlg.find('input[name="unique_id"]').val(),
									item_cfg: item_cfg
								}]
							};
						}).get();


						if (shipments.length) {
							AjaxUtil.ajaxAction({
								action: 'Shipments-Update',
								params: { target: 'dialog' }
							}, {
									method: 'post',
									contentType: AjaxUtil.CONTENT_TYPES.json,
									data: JSON.stringify(shipments)
								}).done(function (response) {
									$dlg.dialog('close');
									if (response.timeout) {
										return $(document).trigger('sees:session-timeout');
									}
									else {
										deferred.resolve(response);
									}
								});
						}
					}
				}],
				open: function () {
					// attach list events
					$list.on('change', 'input.select-all', function (e) {
						$(this).closest('.row').toggleClass('selected', this.checked);
						$shipmentCbs.prop('checked', this.checked).trigger('change');
					}).on('change', 'input.cb-shipment:not(".select-all")', function (e) {
						$(this).closest('.row').toggleClass('selected', this.checked);
						if (!this.checked) {
							$selectAll.prop('checked', false).closest('.row').toggleClass('selected', false);
						}
					}).on('click', '.row', function (e) {
						if ($(e.target).is(':checkbox')) { return; }
						e.stopPropagation();
						$(this).find('input.cb-shipment').trigger('click');
					});

					onOpen && onOpen.call($dlg);

				},
				close: function (e) {
					onClose && onClose.call($dlg);
					$(this).dialog('destroy').remove();
				}
			},
				_.omit(this.settings, ['open', 'close', 'itemAddedToShipments', 'buttons']));

			$dlg.append($list).dialog(settings).dialog('open');
			// return promise. allows page specific handling of response.
			return deferred.promise();
		}

		UIShipmentsList.prototype.initialize = function (settings) {
			// public instance initialization
			this.settings = settings || {};

		};

		UIShipmentsList.prototype.show = function (pid, uid) {
			var that = this;

			$('body').loader(false);

			// public instance initialization
			return AjaxUtil.ajaxAction({
				action: 'Shipments-AddToShipments',
				params: { pid: pid, uid: uid }
			}).then(function (response) {
				if (response.timeout) {
					$(document).trigger('sees:session-timeout');
					return;
				}
				return that.renderShipmentsList(response);
			});
		};

		UIShipmentsList.getInstance = function (settings) {
			return new UIShipmentsList(settings);
		}

		return UIShipmentsList;

	})();

});

define('UI.View.CartMinimumOrder', ['jquery', 'UI.View.Dialogs'], function ($, UIDialogs) {
	var UICartMinimumOrder;
	return UICartMinimumOrder = (function () {
		function UICartMinimumOrder() {
			return;
		}

		UICartMinimumOrder.prototype.initialize = function () { };

		return UICartMinimumOrder;

	})();
});



define('UI.View.ChangeSitesDialog', ['jquery', 'UI.View.Dialogs', 'UI.View.FormUtilities'], function ($, UIDialogs, UIFormUtilities) {
	var UIChangeSitesDialog;
	return UIChangeSitesDialog = (function () {
		function UIChangeSitesDialog() {
			this.handleSuccess = bind(this.handleSuccess, this);
			this.fetchDialogContent = bind(this.fetchDialogContent, this);
			this.initialize = bind(this.initialize, this);
			this.$wrapper = $('.confirmation-body');
		}

		UIChangeSitesDialog.prototype.initialize = function () {
			if (!this.$wrapper.hasClass('confirmation-body')) {
				return $('.left-header-utility a').on('click', (function (_this) {
					return function (e) {
						var $dialogWrapperElem, $target;
						e.preventDefault();
						$target = $(e.target);
						$dialogWrapperElem = $('.sees-dialog-wrapper');
						if (!$dialogWrapperElem.is(':visible')) {
							return _this.fetchDialogContent($target);
						}
					};
				})(this));
			}
		};

		UIChangeSitesDialog.prototype.fetchDialogContent = function ($target) {
			var url;
			url = window.Urls.changeSites + "?format=ajax";
			return $.ajax({
				type: "POST",
				url: url,
				success: (function (_this) {
					return function (response) {
						return _this.handleSuccess(response, url, $target);
					};
				})(this)
			});
		};

		UIChangeSitesDialog.prototype.handleSuccess = function (response, url, $target) {
			var $header, FormUtilities, dialogSettings, emailBody, newEle;
			if (response.trim() !== '') {
				newEle = $(document.createElement('div'));
				emailBody = newEle.html(response);
				dialogSettings = {
					title: 'Changing Sites',
					showAsRequired: true,
					body: emailBody,
					submitText: 'Ok',
					openCallback: (function (_this) {
						return function (dialogID) { };
					})(this),
					closeCallback: function () { },
					submitCallback: function (callToClose) { }
				};
				UIDialogs.prompt(dialogSettings);
				FormUtilities = new UIFormUtilities;
				FormUtilities.initialize();
				$header = $('.dialog-header');
				$header.find('h3').hide();
				$header.find('.required-fields').hide();
				return $('.sees-dialog-content .submit-dialog').on('click', (function (_this) {
					return function (e) {
						return window.location.href = $target.attr('href');
					};
				})(this));
			} else {
				return window.location.href = $target.attr('href');
			}
		};

		return UIChangeSitesDialog;

	})();
});



define('UI.View.Checkout', ['jquery', 'lodash', 'UI.View.Dialogs', 'UI.View.LoadingUtil', 'UI.View.VerifyAddress'], function ($, _, UIDialogs, LoadingUtil, UIVerifyAddress) {
	var UICheckout;
	return UICheckout = (function () {
		var newsletter, newsletterMap, siteType;

		function UICheckout() {
			this.updateCharLimit = bind(this.updateCharLimit, this);
			this.addNewAddressBtn = $('.add-new-address');
			this.$applyCouponBtn = $('button.apply-coupon');
			this.$couponCode = $('input[name$="_couponCode"]');
			this.$giftMessageText = $('.gift-message-text > textarea');
			this.$printPage = $('.print-page');
			this.$tooltip = $('.tipso-tooltip');
			this.$checkoutContainer = $('.checkout-container');
			this.$orderForm = $('.review .submit-order');
			this.$debug = true;
			this.$main = $('#main');
		}

		UICheckout.prototype.initialize = function () {
			this.$orderForm.on('submit', function (e) {
				$(this).find('button').prop('disabled', true).addClass('looks-disabled');
				$('body').loader();
			});

			this.$printPage.on('click', (function (_this) {
				return function (e) {
					e.preventDefault();
					$('.notification').css('display', 'none');
					window.print();
					$('.notification').css('display', 'initial');
					return false;
				};
			})(this));
			this.$checkoutContainer.on('click', '.billing-summary-submit', (function (_this) {
				return function (e) {
					e.preventDefault();
					_this.$checkoutContainer.find('.checkout-billing.address button[type="submit"]:not(".cancel")').trigger('click');
				};
			})(this));
			this.addNewAddressBtn.on('click', (function (_this) {
				return function (e) {
					_this.toggleNewAddress();
					_this.addNewAddressBtn.hide();
					return $('[name$="_addressList"]').val("addnew").prop("selected", true).trigger("change");
				};
			})(this));
			$('#gift-message-selector').on('change', (function (_this) {
				return function (e) {
					var $giftMessageText, selVal;
					selVal = $(e.target).val();
					$giftMessageText = $('.gift-message-text > textarea');
					if (selVal !== "-1") {
						$giftMessageText.val(selVal);
						return _this.updateCharLimit($giftMessageText.val().length, $giftMessageText);
					}
				};
			})(this));
			this.$giftMessageText.on('keyup', (function (_this) {
				return function (e) {
					var $this;
					$this = $(e.target);
					return _this.updateCharLimit($this.val().length, $this);
				};
			})(this));
			this.$tooltip.on('hover', (function (_this) {
				return function (e) {
					return $(e.target).parent().toggleClass('active-tooltip');
				};
			})(this));
			this.$tooltip.tipso({
				position: 'top',
				speed: 275,
				background: '',
				onShow: function (e) {
					var $activeTooltip, tooltipClass;
					$activeTooltip = $('.active-tooltip');
					if ($activeTooltip.length > 0) {
						tooltipClass = $activeTooltip.attr('class').match(/tool[\w-]*\b/)[0];
						return e.addClass(tooltipClass);
					}
				}
			});
			this.$applyCouponBtn.on('click', (function (_this) {
				return function (e) {
					var $couponError, $ctnr, $form, $this, formData;
					e.preventDefault();
					$this = $(e.currentTarget);
					$form = $this.closest('form');
					$couponError = $('.coupon-error');
					$ctnr = $form.find('.redemption.coupon');
					formData = $form.serializeArray();
					formData.push({
						name: $this.prop('name'),
						value: 'true'
					});
					return $.ajax({
						url: $form.prop('action'),
						data: formData,
						method: 'POST'
					}).done(function (data) {
						var messages;
						if (data.appliedMessages.length) {
							messages = _.map(data.appliedMessages, function (msg) {
								return '<span class="success">' + msg + '</span>';
							});
							$ctnr.empty().append(messages);
						}
						if (!data.success) {
							return $couponError.empty().append(data.statusMessage);
						}
					}).fail(function (xhr, status, err) {
						return $couponError.empty().append('Unable to apply coupon at this time. Please try again later.');
					});
				};
			})(this));
			this.$couponCode.on('keypress', (function (_this) {
				return function (e) {
					var keyCode;
					keyCode = e.which || e.keyCode;
					if (keyCode === 13) {
						e.preventDefault();
						_this.$applyCouponBtn.trigger('click');
					}
				};
			})(this));
			$.validator.addMethod('creditcardexpire', this.validateCreditCard, Resources.INVALID_CC_DATE);
			$.validator.addClassRules({
				cc_year: {
					creditcardexpire: {
						month: ".cc_month",
						year: ".cc_year"
					}
				}
			});
			jQuery.validator.setDefaults({
				errorPlacement: function (error, element) {
					if (element.hasClass("cc_year")) {
						return error.appendTo(element.closest(".date-wrapper"));
					} else if (element.hasClass("cc_month")) {
						return error.appendTo(element.closest(".date-wrapper"));
					} else {
						return error.insertAfter(element);
					}
				}
			});
			$('.select-address').on('change', (function (_this) {
				return function (e) {
					var $currentId, $selected, $self, selectedAddress;
					e.preventDefault();
					$self = $(e.target);
					$selected = $self.find(":selected");
					$currentId = $('#selected-address-id');
					selectedAddress = $selected.data("address");
					if (selectedAddress && selectedAddress.ID === $currentId.val()) {
						return;
					}
					if ($selected.val() !== "addnew") {
						_this.UIVerifyAddress = new UIVerifyAddress();
						_this.UIVerifyAddress.populateForm(selectedAddress);
						$currentId.val(selectedAddress.ID);
						return _this.toggleNewAddress("hide");
					} else {
						$currentId.val($selected.val());
						_this.toggleNewAddress("show");
						return $self.closest('form').find('input[name$="_addToAddressBook"]').filter(':checked').trigger('click');
					}
				};
			})(this));
			$('input[name*="isGift"]').on('change', (function (_this) {
				return function (e) {
					var selectedVal;
					selectedVal = $('input[name*="isGift"]:checked').val();
					if (selectedVal === "true") {
						if ($('.giftcard-form').length > 0) {
							$('.giftcard-form').show();
						}
						if ($('.gift-message-container').length > 0) {
							return $('.gift-message-container').show();
						}
					} else {
						if ($('.giftcard-form').length > 0) {
							$('.giftcard-form').hide();
						}
						if ($('.gift-message-container').length > 0) {
							$('.gift-message-container').hide();
							return $('.gift-message-text > textarea').val("");
						}
					}
				};
			})(this));
			return $('#is-gift-yes').trigger('change');
		};

		$('.cc-delete').on('click', function (e) {
			var $self, dialogSettings;
			e.preventDefault();
			$self = e.target;
			dialogSettings = {
				title: null,
				showAsRequired: null,
				submitText: null,
				body: $('.delete-credit-confirm'),
				openCallback: function (dialogID) {
					var $ccName, $ccNameField, $ccNum, $ccNumField, $continueButton, $dialogWrapper, $returnButton;
					$dialogWrapper = $('.delete-credit-confirm');
					$continueButton = $dialogWrapper.find('.delete-confirm');
					$returnButton = $dialogWrapper.find('.delete-close');
					$ccName = $($self).attr('data-type');
					$ccNum = $($self).attr('data-digits');
					$ccNameField = $dialogWrapper.find('.delete-cc-name');
					$ccNumField = $dialogWrapper.find('.delete-cc-lastfour');
					$ccNameField.html($ccName);
					$ccNumField.html($ccNum);
					$($continueButton).attr('href', $self.href);
					$dialogWrapper.show();
					return $returnButton.on('click', function (e) {
						return UIDialogs.close(dialogID, function () {
							return false;
						});
					});
				},
				closeCallback: function () {
					return false;
				}
			};
			return UIDialogs.prompt(dialogSettings);
		});

		newsletterMap = {
			MO: "General Marketing",
			FR: "Fundraising",
			GD: "Group Discount",
			BG: "Business Gifts"
		};

		siteType = $('input[name="siteType"]').val();

		newsletter = newsletterMap.hasOwnProperty(siteType) ? newsletterMap[siteType] : false;

		if (newsletter) {
			$('.lazy-add-to-email-list').each(function () {
				var $this;
				$this = $(this);
				return $.ajax({
					url: window.Urls.yesMailGetCurrentUserSubscriptions,
					success: function (data) {
						if (_.some(data.current, function (i) {
							return i.division === newsletter && i.state !== 'unsubscribed';
						})) {
							return $this.animate({
								opacity: 0
							}, 750, 'swing', function () {
								return $this.slideUp(500);
							});
						}
					}
				});
			});
		}

		UICheckout.prototype.toggleNewAddress = function (state) {
			var $addressForm, $newAddressWrapper;
			if (state == null) {
				state = "show";
			}
			$addressForm = $('.new-address-wrapper');
			if ($addressForm.hasClass('hidden') && state === 'show') {
				$addressForm.removeClass('hidden');
				this.addNewAddressBtn.hide();
				$newAddressWrapper = this.$main.find('.new-address-wrapper');
				$newAddressWrapper.find("input[type=text],input[type=tel]").val("");
				return $newAddressWrapper.find('select').prop('selectedIndex', 0).trigger('change');
			} else if (!$addressForm.hasClass('hidden') && state === 'hide') {
				$addressForm.addClass('hidden');
				return this.addNewAddressBtn.show();
			}
		};

		UICheckout.prototype.updateCharLimit = function (stringCount, target) {
			var charLimit, charMsg, currCount;
			charLimit = target.data('character-limit');
			currCount = charLimit - stringCount;
			if (currCount >= 0) {
				charMsg = currCount + " of " + charLimit + " " + Resources['GIFT_MSG'];
				return $('.message-length').html(charMsg);
			} else {
				return this.$giftMessageText.val(this.$giftMessageText.val().substring(0, charLimit - 1));
			}
		};

		UICheckout.prototype.validateCreditCard = function (value, element, params) {
			var $currMonth, $currYear, $d, month, year;
			$d = new Date();
			$currMonth = $d.getMonth() + 1;
			$currYear = $d.getFullYear();
			month = parseInt($(params.month).val(), 10);
			year = parseInt($(params.year).val(), 10);
			if ((month < $currMonth && year <= $currYear) || year < $currYear) {
				return false;
			} else {
				return true;
			}
		};

		UICheckout.prototype.debugLog = function (msg) {
			if (this.$debug) {
				return console.log(msg);
			}
		};

		return UICheckout;

	})();
});

define('UI.View.ContactUs', ['jquery'], function ($) {
	var UIContactUs;
	return UIContactUs = (function () {
		UIContactUs.prototype.CN = 'ContactUs';

		function UIContactUs() {
			this.$contactForm = $('#ContactUsForm');
			this.$commentForm = this.$contactForm.find('#dwfrm_contactus_comment');
		}

		UIContactUs.prototype.initialize = function () {
			if (!this.$contactForm.length) {
				return false;
			}
			this.$commentForm.on('keyup', this.updateCommentCharCount.bind(this));
			return this.updateCommentCharCount();
		};

		UIContactUs.prototype.updateCommentCharCount = function () {
			var $commentCaption, maxlength;
			$commentCaption = this.$commentForm.next('.form-caption');
			maxlength = this.$commentForm.get(0).getAttribute('maxlength') || 750;
			return $commentCaption.text((this.$commentForm.val().length) + "/" + maxlength);
		};

		return UIContactUs;

	})();
});

define('UI.View.ContentUtility', ['jquery', 'ViewportCommandBusSingleton', 'dataLayer'], function ($, ViewportCommandBus, dataLayer) {
	var UIContentUtility;
	return UIContentUtility = (function () {
		function UIContentUtility() {
			this.$contentSlot = $('[data-slotid]');
		}

		UIContentUtility.prototype.initialize = function () {
			return this.$contentSlot.on('click', '[data-ga-trigger]', (function (_this) {
				return function (e) {
					var $contentElement, $gaTrigger, $slotElement, detailValues, siteId;
					$gaTrigger = $(e.currentTarget);
					$contentElement = $gaTrigger.closest('[data-contentid]');
					$slotElement = $gaTrigger.closest('[data-slotid]');
					detailValues = !!$slotElement.length ? [$slotElement.attr('data-slotid')] : [];
					siteId = $('#site-header').attr('class') || window.location.host;
					if ($contentElement.length) {
						detailValues.push($contentElement.attr('data-contentid'));
					}
					dataLayer.push({
						event: 'cta',
						action: $gaTrigger.attr('data-ga-trigger') || $gaTrigger.prop('tagName'),
						value: siteId.toLowerCase(),
						detail: detailValues.join('|')
					});
				};
			})(this));
		};

		return UIContentUtility;

	})();
});



define('UI.View.Dialogs', ['lodash', 'jquery', 'TweenLite', 'TimelineLite', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton', 'UI.View.FormUtilities', 'Util.Browser'], function (_, $, TweenLite, TimelineLite, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus, UIFormUtilities, UtilBrowser) {
	var UIDialogs;
	UIDialogs = (function () {
		UIDialogs.prototype.scrollable = false;

		function UIDialogs() {
			this.makeEle = bind(this.makeEle, this);
			this.isConfigValid = bind(this.isConfigValid, this);
			this.hideDialogWrapper = bind(this.hideDialogWrapper, this);
			this.closeAll = bind(this.closeAll, this);
			this.close = bind(this.close, this);
			this.update = bind(this.update, this);
			this.prompt = bind(this.prompt, this);
			this.updateDialogs = bind(this.updateDialogs, this);
			this.initialize = bind(this.initialize, this);
			this.hasInitialized = false;
			this.maxDialogHeight = '80%';
			this.animateFromHeight = 150;
			this.animationTiming = .2;
			this.sizingWrapperClass = 'sizing';
			this.activeWrapperClass = 'active';
			this.isLocked = false;
			this.isCompleting = false;
			this.configFields = ['title', 'showAsRequired', 'body', 'openCallback', 'closeCallback', 'submitText', 'submitCallback', 'hideFooter'];
			this.$document = $(document);
			this.$window = $(document.defaultView);
			this.$mainContainer = $('#mainContainer');
			this.$dialogWrapper = $('.sees-dialog-wrapper');
			this.$dialogScrim = this.$dialogWrapper.find('.sees-dialog-scrim');
			this.$dialogContentWrapperCopy = this.$dialogWrapper.filter(':not(.out-of-stock-popup)').find('.sees-dialog-content-wrapper').remove();
			this.$dialogList = [];
			this.$dialogCount = 1;
			this.browserStore = FluxApp.stores.BrowserStore;
			this.scrollState = {};
		}

		UIDialogs.prototype.initialize = function () {
			var $document, $mainContainer, $window;
			if (this.hasInitialized) {
				return false;
			}
			this.hasInitialized = true;
			$document = this.$document;
			$window = this.$window;
			$mainContainer = this.$mainContainer;
			return FluxApp.stores.BrowserStore.on('change', this.updateDialogs);
		};

		UIDialogs.prototype.updateDialogs = function () {
			var browserState, dialog, i, isMobile, len, newWindowHeight, ref, results;
			browserState = this.browserStore.getState().properties;
			newWindowHeight = browserState.viewportHeight;
			var isMobile = UtilBrowser.getBreakpoint() === UtilBrowser.Breakpoints.MOBILE;

			ref = this.$dialogList;
			results = [];
			for (i = 0, len = ref.length; i < len; i++) {
				dialog = ref[i];
				results.push((function (_this) {
					return function (dialog) {
						var $dialogContent, contentHeight, offsetTop;
						$dialogContent = dialog.content.find('.sees-dialog-content');
						contentHeight = $dialogContent.outerHeight();
						offsetTop = (newWindowHeight / 2) - (contentHeight / 2);

						if (offsetTop < 0 || isMobile) {
							offsetTop = 0;
						}

						return TweenLite.to($dialogContent[0], _this.animationTiming, {
							top: offsetTop + 'px',
							opacity: 1,
							ease: Power1.easeInOut
						});
					};
				})(this)(dialog));
			}
			return results;
		};

		UIDialogs.prototype.prompt = function (config) {
			var $cancelCTA, $closeCTA, $closeElements, $contentFooter, $contentHeader, $contentMain, $dialogContent, $dialogContentWrapper, $dialogID, $dialogList, $dialogWrapper, $required, $requiredIndicator, $submitCTA, $window, UIFormUtil, altWrapperClass, alwaysCenter, animConfig, browserState, closeCallback, contentHeight, dialogBody, dialogTitle, hideFooter, offsetToCenter, openCallback, showAsRequired, submitCallback, submitText, windowHeight;
			var self = this;
			if (!this.isConfigValid(config)) {
				return false;
			}
			this.scrollState = {
				scrollTop: UtilBrowser.getScrollTop()
			};
			dialogTitle = config['title'];
			showAsRequired = config['showAsRequired'];
			altWrapperClass = config['altWrapperClass'];
			dialogBody = config['body'];
			openCallback = config['openCallback'];
			closeCallback = config['closeCallback'];
			submitText = config['submitText'];
			submitCallback = config['submitCallback'];
			hideFooter = false;
			if (config['hideFooter']) {
				hideFooter = config['hideFooter'];
			}
			alwaysCenter = config.alwaysCenter || false;
			$window = this.$window;
			$dialogWrapper = this.$dialogWrapper;
			$dialogList = this.$dialogList;
			$dialogID = this.$dialogCount;
			$dialogContentWrapper = this.$dialogContentWrapperCopy.clone(false);
			$dialogContent = $dialogContentWrapper.find('.sees-dialog-content');

			this.$dialogCount = this.$dialogCount + 1;

			$dialogContentWrapper.attr('data-dialog-id', $dialogID);

			this.$dialogList.push({
				id: $dialogID,
				content: $dialogContentWrapper
			});

			$dialogContentWrapper.appendTo($dialogWrapper);
			$contentHeader = $dialogContent.find('.dialog-header');
			$contentMain = $dialogContent.find('.dialog-main');
			$contentFooter = $dialogContent.find('.dialog-footer');
			$closeCTA = $contentHeader.find('.close-dialog');
			$cancelCTA = $dialogContent.find('.cancel-dialog');
			$submitCTA = $contentFooter.find('.submit-dialog');
			$required = $dialogContent.find('.required-fields');
			$requiredIndicator = $contentHeader.find('.required-fields');

			if (!showAsRequired) {
				$requiredIndicator.addClass('hide');
			}

			$contentHeader.find('h3').text(dialogTitle);
			$contentMain.html(config.body[0].outerHTML);

			if (submitText !== null && submitText !== '') {
				$submitCTA.text(submitText);
			}

			$cancelCTA = $dialogContent.find('.cancel-dialog');
			if (showAsRequired === false) {
				$required.hide();
			} else {
				$required.show();
			}

			if (hideFooter === true) {
				$contentFooter.hide();
			}
			$dialogWrapper.addClass(this.sizingWrapperClass);
			if (altWrapperClass !== null) {
				$dialogContentWrapper.addClass(altWrapperClass);
			}

			(new Hammer($dialogContentWrapper.get(0))).on("swipeleft", function (ev) {
				if (!~ev.srcEvent.type.indexOf('mouse')) {
					self.close($dialogID, closeCallback);
				}
			});


			$closeElements = $dialogContentWrapper.add($closeCTA).add($cancelCTA);
			$closeElements.on('click', (function (_this) {
				return function (e) {
					var $e;
					$e = $(e.target);
					if ($e.hasClass('close-dialog') || $e.hasClass('sees-dialog-content-wrapper') || $e.hasClass('cancel-dialog')) {
						e.preventDefault();
						return _this.close($dialogID, closeCallback);
					}
				};
			})(this));
			document.onkeydown = (function (_this) {
				return function (e) {
					if (e.keyCode === 27) {
						return _this.close($dialogID, closeCallback);
					}
				};
			})(this);
			if (submitText === null) {
				$contentFooter.remove();
			} else {
				$submitCTA.on('click', (function (_this) {
					return function (e) {
						var parentLink;
						e.preventDefault();
						parentLink = $(e.currentTarget);
						return submitCallback(function (shouldClose) {
							if (shouldClose == null) {
								shouldClose = false;
							}
							if (shouldClose) {
								return _this.close($dialogID);
							}
						});
					};
				})(this));
			}
			$dialogContent.on('click', (function (_this) {
				return function (e) { };
			})(this));
			UIFormUtil = new UIFormUtilities();
			UIFormUtil.initialize();
			$dialogWrapper.addClass(this.activeWrapperClass);
			animConfig = {
				opacity: 1
			};
			TweenLite.to(this.$dialogWrapper[0], .3, animConfig);
			windowHeight = $window.height();
			contentHeight = $dialogContent.outerHeight();
			browserState = this.browserStore.getState().properties;
			if (browserState.breakpoint === 'mobile' && !alwaysCenter) {
				offsetToCenter = 0;
			} else {
				offsetToCenter = (windowHeight / 2) - (contentHeight / 2);
			}
			if (offsetToCenter < 0) {
				offsetToCenter = 0;
			}
			TweenLite.to($dialogContent[0], this.animationTiming, {
				top: offsetToCenter + 'px',
				opacity: 1
			});
			if (openCallback != null) {
				openCallback.call($dialogContentWrapper, $dialogID);
			}
			if (this.scrollable) {
				return $('#centerPanel').addClass('active-modal active-modal--scrollable');
			} else {
				return $('#centerPanel').addClass('active-modal').css('top', -this.scrollState.scrollTop);
			}
		};

		UIDialogs.prototype.update = function (config) {
			return this.updateDialogs();
		};

		UIDialogs.prototype.close = function (id, closeCallback, skipLock) {
			var $dialogObj, $removedDialog, animConfig;
			if (closeCallback == null) {
				closeCallback = null;
			}
			if (skipLock == null) {
				skipLock = false;
			}
			if (!this.isLocked || skipLock) {
				this.isLocked = true;
				$dialogObj = _.remove(this.$dialogList, (function (_this) {
					return function (dialogObj) {
						return dialogObj.id === id;
					};
				})(this));
				if ($dialogObj.length) {
					$removedDialog = $dialogObj[0].content;
					animConfig = {
						top: this.animateFromHeight + 'px',
						opacity: 0,
						onComplete: (function (_this) {
							return function () {
								$removedDialog.remove();
								_this.isLocked = false;
								if (_this.$dialogList.length === 0) {
									return _this.hideDialogWrapper();
								}
							};
						})(this)
					};
					TweenLite.to($removedDialog, this.animationTiming, animConfig);
					if (typeof closeCallback === "function") {
						closeCallback();
					}
				}
			}
			$('#centerPanel').removeClass('active-modal active-modal--scrollable');
		};

		UIDialogs.prototype.closeAll = function () {
			var dlg;
			this.$dialogList.reverse();
			while (this.$dialogList.length && (dlg = this.$dialogList[this.$dialogList.length - 1])) {
				this.close(dlg.id, null, true);
			}
		};

		UIDialogs.prototype.hideDialogWrapper = function () {
			var animConfig;
			if (!this.scrollable) {
				$('#centerPanel').css('top', '0px');
				document.documentElement.scrollTop = document.body.scrollTop = this.scrollState.scrollTop;
			}
			animConfig = {
				opacity: 0,
				onComplete: (function (_this) {
					return function () {
						return _this.$dialogWrapper.removeClass(_this.sizingWrapperClass + ' ' + _this.activeWrapperClass);
					};
				})(this)
			};
			TweenLite.to(this.$dialogWrapper[0], this.animationTiming, animConfig);
		};

		UIDialogs.prototype.isConfigValid = function (config) {
			if (config === void 0 || config === null) {
				return false;
			}
			_.forIn(this.configFields, (function (_this) {
				return function (value, key) {
					var configField;
					configField = config[value];
					if (configField === void 0 || configField === null) {
						return false;
					}
				};
			})(this));
			return true;
		};

		UIDialogs.prototype.makeEle = function (eleType, newClass, initialHTML) {
			var newEle;
			if (newClass == null) {
				newClass = '';
			}
			if (initialHTML == null) {
				initialHTML = '';
			}
			newEle = $(document.createElement(eleType));
			if (newClass !== '') {
				newEle.addClass(newClass);
			}
			if (initialHTML !== '') {
				newEle.html(initialHTML);
			}
			return newEle;
		};

		return UIDialogs;

	})();
	UIDialogs = new UIDialogs();
	UIDialogs.initialize();
	return UIDialogs;
});

define('UI.View.Drawers', ['jquery', 'lodash'], function ($, _) {
	var UIDrawers;
	return UIDrawers = (function () {
		function UIDrawers() {
			this.$drawers = $('[data-drawer-container]');
		}

		UIDrawers.prototype.initialize = function () {
			return this.$drawers.each(function (e, el) {
				var $el;
				$el = $(el);
				return $el.find('[data-drawer-open]').on('click', function (e) {
					var $this;
					e.preventDefault();
					$this = $(this);
					if (_.isUndefined($this.attr('[data-drawer-remain]'))) {
						$this.hide();
					}
					$el.toggleClass('active');
					return $el.find('[data-drawer-content]').toggleClass('active');
				});
			});
		};

		return UIDrawers;

	})();
});



define('UI.View.EmailSignup', ['jquery', 'UI.View.Dialogs', 'UI.View.FormUtilities'], function ($, UIDialogs, UIFormUtilities) {
	var UIEmailSignup;
	return UIEmailSignup = (function () {
		function UIEmailSignup() {
			this.handleSuccess = bind(this.handleSuccess, this);
		}

		UIEmailSignup.prototype.initialize = function () {
			var url;
			url = window.Urls.emailSignup + "?format=ajax";

			$.ajax({
				type: "POST",
				url: url,
				xhrFields: {
					withCredentials: true
				},
				success: (function (_this) {
					return function (response) {
						return _this.handleSuccess(response, url);
					};
				})(this)
			});

			return $('#main').on('click', '.coupon-email-signup', (function (_this) {
				return function (e) {
					var $couponLandingSignupForm;
					$couponLandingSignupForm = $('.coupon-content-wrapper #EmailSignup');
					return $couponLandingSignupForm.submit();
				};
			})(this));
		};

		UIEmailSignup.prototype.handleSuccess = function (response, url) {
			var dialogSettings, emailBody, newEle;
			newEle = $(document.createElement('div'));
			emailBody = newEle.html(response);
			dialogSettings = {
				title: 'Email Signup',
				showAsRequired: true,
				body: emailBody,
				submitText: 'Sign Up',
				openCallback: (function (_this) {
					return function (dialogID) { };
				})(this),
				closeCallback: function () { },
				submitCallback: function (callToClose) { }
			};
			return $('#emailsignup').on('click', (function (_this) {
				return function () {
					var FormUtilities;
					UIDialogs.prompt(dialogSettings);
					$('.sees-dialog-content').addClass('small-dialog email-dialog-content');
					FormUtilities = new UIFormUtilities;
					FormUtilities.initialize();
					return $('.dialog-footer .submit-dialog').on('click', function () {
						var postData, validated;
						postData = $('#EmailSignup').serializeArray();
						validated = _this.validateForm();
						if (validated) {
							url = window.Urls.emailSubscribe;
						} else {
							url = window.Urls.emailRenderForm;
						}
						return $.ajax({
							type: "POST",
							url: url,
							xhrFields: {
								withCredentials: true
							},
							data: postData,
							success: function (response) {
								var $dialog;
								$dialog = $('.email-dialog-content');
								$dialog.find('.dialog-main').html($(response).find('.content-container').html());
								FormUtilities = new UIFormUtilities;
								FormUtilities.initialize();
								if (validated) {
									$dialog.find('.dialog-header .required-fields').hide();
									$dialog.find('.dialog-footer').hide();
									return $dialog.find('.email-dialog-success-footer').show();
								}
							}
						});
					});
				};
			})(this));
		};

		UIEmailSignup.prototype.validateForm = function () {
			var $modal, defaultOption, emailTest, validated, zipTest;
			validated = true;
			$modal = $('.sees-dialog-content');
			$modal.find('input.required').each(function () {
				var $el;
				$el = $(this);
				if ($el.val().length === 0) {
					return validated = false;
				}
			});
			defaultOption = $modal.find('.select-option').first().attr('label');
			$modal.find('.selected-value').each(function () {
				var $el;
				$el = $(this);
				if ($el.html() === defaultOption) {
					return validated = false;
				}
			});
			if ($modal.find('.input-checkbox[checked]').length === 0) {
				validated = false;
			}
			emailTest = new RegExp("^[\\w-\.]{1,}\@([\\da-zA-Z-]{1,}\.){1,}[\\da-zA-Z-]{2,3}$");
			if (!emailTest.test($modal.find('#dwfrm_emailnewsletter_customer_email').val())) {
				validated = false;
			}
			zipTest = new RegExp("(^\\d{5}(-\\d{4})?$)|(^[abceghjklmnprstvxyABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Za-z]{1} *\\d{1}[A-Za-z]{1}\\d{1}$)");
			if (!zipTest.test($modal.find('#dwfrm_emailnewsletter_customer_postal').val())) {
				validated = false;
			}
			return validated;
		};

		return UIEmailSignup;

	})();
});



define('UI.View.FormUtilities', ['lodash', 'jquery', 'TweenLite', 'TimelineLite', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton'], function (_, $, TweenLite, TimelineLite, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus) {
	var UIFormUtilities;
	return UIFormUtilities = (function () {
		function UIFormUtilities() {
			this.emailValidation = bind(this.emailValidation, this);
			this.addCustomSelectbox = bind(this.addCustomSelectbox, this);
			this.textInputValidation = bind(this.textInputValidation, this);
			this.setupCheckboxFocusBlur = bind(this.setupCheckboxFocusBlur, this);
			this.$body = $('body');
			this.$wrapper = $('#wrapper');
			this.$formRows = this.$wrapper.find('.form-row');
			this.$checkboxRows = this.$formRows.filter('.checkbox');
			this.$radioRows = this.$formRows.filter('.radio');
			this.$selectRows = this.$formRows.filter('.selectbox').not('.initialized');
			this.$phoneRows = this.$formRows.find('input.phone');
			this.$loginForm = this.$body.find('#dwfrm_login');
		}

		UIFormUtilities.prototype.initialize = function () {
			this.$loginForm.find('button').on('click', (function (_this) {
				var $loginFormInputs, $label, $span, labelText, input, invalid;
				$loginFormInputs = $('#dwfrm_login').find('input.input-text');
				return function (e) {
					invalid = false;

					$.each($loginFormInputs, function (index, value) {
						input = $($loginFormInputs[index]);
						$label = input.parent().find('label');
						labelText = $label.text().trim();
						$span = input.parent().find('span.form-caption');

						if (input.val() === '') {
							var errorMessageClass = 'error-message';
							var errorSpanText = 'Please enter a ' + labelText;

							$span.addClass(errorMessageClass);
							$span.text(errorSpanText);
							invalid = true;
						} else if ($span && $span.hasClass("error-message")) {
							$span.text('');
						}
					});

					if (invalid) {
						return false;
					} else { return true; }

				};
			})(this));

			this.$selectRows.each((function (_this) {
				return function (index) {
					return _this.addCustomSelectbox(_this.$selectRows[index]);
				};
			})(this));
			this.$phoneRows.mask("( 999 ) 999 - 9999", {
				placeholder: " "
			});
			this.$checkboxRows.each((function (_this) {
				return function (k, el) {
					return _this.setupCheckboxFocusBlur(el);
				};
			})(this));
			return this.emailValidation() && this.textInputValidation();
		};

		UIFormUtilities.prototype.initializeContainer = function ($ctnr) {
			var $formRows = $ctnr.find('.form-row'),
				$checkboxRows = $formRows.filter('.checkbox'),
				$radioRows = $formRows.filter('.radio'),
				$selectRows = $formRows.filter('.selectbox').not('.initialized'),
				$phone = $ctnr.find('input.phone');

			$selectRows.each((function (_this) {
				return function (index) {
					return _this.addCustomSelectbox($selectRows[index]);
				};
			})(this));

			$phone.mask("( 999 ) 999 - 9999", {
				placeholder: " "
			});

			$checkboxRows.each((function (_this) {
				return function (k, el) {
					return _this.setupCheckboxFocusBlur(el);
				};
			})(this));

			return this;
		};

		UIFormUtilities.prototype.setupCheckboxFocusBlur = function (el) {
			var $input, $row, $span;
			$row = $(el);
			$input = $row.find('input[type="checkbox"]');
			$span = $row.find('span');
			$input.on('focus', (function (_this) {
				return function () {
					return $span.addClass('focus');
				};
			})(this));
			return $input.on('blur', (function (_this) {
				return function () {
					return $span.removeClass('focus');
				};
			})(this));
		};

		UIFormUtilities.prototype.addCustomSelectbox = function (ele) {
			var options, row, select, selectedOption, selectedVal, substituteEle;
			row = $(ele);
			select = row.find('select');
			options = select.find('option');
			selectedOption = options.filter(':selected');
			substituteEle = row.find('.selectbox-sub');
			selectedVal = $(document.createElement('div')).addClass('selected-value');
			row.addClass('initialized');
			selectedVal.text(selectedOption.text());
			selectedVal.appendTo(substituteEle);
			select.change((function (_this) {
				return function (e) {
					var optionText, v;
					v = select.val();
					selectedOption = select.find('option:selected');
					optionText = selectedOption.text();
					select.closest('.selectbox-sub').toggleClass('unselected', !v.length);
					return selectedVal.text(optionText);
				};
			})(this));
			select.on('keyup', (function (_this) {
				return function (e) {
					return select.trigger('change');
				};
			})(this));
			select.on('focus', (function (_this) {
				return function () {
					return select.parent().addClass('focus');
				};
			})(this));
			select.on('blur', (function (_this) {
				return function () {
					var $currentErrorMessages;

					if (select.val().length) {
						$currentErrorMessages = row.find('.error-message');
						if ($currentErrorMessages.length) {
							return $currentErrorMessages.remove();
						}
					}

					return select.parent().removeClass('focus');
				};
			})(this));
		};

		UIFormUtilities.prototype.textInputValidation = function () {
			var $requiredFormRows, activeValidationClass, errorMessageClass, errorSpanClasses, inputSelector, standardEmailLabel;
			inputSelector = 'input.input-text:not(".password-input, .email-input")';
			activeValidationClass = 'active-validation';
			errorMessageClass = 'error-message';
			errorSpanClasses = 'form-caption' + ' ' + errorMessageClass;
			$requiredFormRows = this.$body.find('.form-row.required');
			return $requiredFormRows.each((function (_this) {
				return function (index) {
					var $textInput, $formRow, $label, labelText, errorSpanText;
					$formRow = $($requiredFormRows[index]);
					$label = $formRow.find('label');
					labelText = $label.text().trim();
					errorSpanText = 'Please enter a ' + labelText;
					if (labelText) {
						$textInput = $formRow.find(inputSelector).not(activeValidationClass);
						if ($textInput.length) {
							$textInput.addClass(activeValidationClass);
							return $textInput.on('blur', function (e) {
								var $bluredInput, $currentErrorMessages, $newErrorMessage, textString;
								$bluredInput = $(e.currentTarget);
								textString = $bluredInput.val();
								if (textString !== '') {
									$currentErrorMessages = $bluredInput.parent().find('.' + errorMessageClass);
									if ($currentErrorMessages.length) {
										return $currentErrorMessages.remove();
									}
								}
							});
						}
					}
				};
			})(this));
		};

		UIFormUtilities.prototype.emailValidation = function () {
			var $requiredFormRows, activeValidationClass, atChar, dotChar, doubleDotChar, errorMessageClass, errorSpanClasses, errorSpanText, inputSelector, standardEmailLabel;
			standardEmailLabel = 'Email';
			atChar = '@';
			dotChar = '.';
			doubleDotChar = '..';
			inputSelector = 'input.input-text';
			activeValidationClass = 'active-validation';
			errorMessageClass = 'error-message';
			errorSpanClasses = 'form-caption' + ' ' + errorMessageClass;
			errorSpanText = 'Please enter a valid Email Address';
			$requiredFormRows = this.$body.find('.form-row.required');
			return $requiredFormRows.each((function (_this) {
				return function (index) {
					var $emailInput, $formRow, $label, labelText;
					$formRow = $($requiredFormRows[index]);
					$label = $formRow.find('label');
					labelText = $label.text().trim();
					if (labelText.indexOf(standardEmailLabel) !== -1) {
						$emailInput = $formRow.find(inputSelector).not(activeValidationClass);
						if ($emailInput.length) {
							$emailInput.addClass(activeValidationClass);
							return $emailInput.on('blur', function (e) {
								var $bluredInput, $currentErrorMessages, $newErrorMessage, emailLength, emailString, indexOfAt, indexOfDblDot, lastIndexOfAt, lastIndexOfDot;
								$bluredInput = $(e.currentTarget);
								emailString = $bluredInput.val();
								if (emailString !== '') {
									indexOfAt = emailString.indexOf(atChar);
									lastIndexOfAt = emailString.lastIndexOf(atChar);
									lastIndexOfDot = emailString.lastIndexOf(dotChar);
									indexOfDblDot = emailString.indexOf(doubleDotChar);
									emailLength = emailString.length;
									$currentErrorMessages = $bluredInput.parent().find('.' + errorMessageClass);
									if (indexOfAt === -1 || indexOfAt === 0 || lastIndexOfDot <= indexOfAt || indexOfAt !== lastIndexOfAt || lastIndexOfDot === emailLength - 1 || indexOfAt === lastIndexOfDot - 1) {
										$currentErrorMessages = $bluredInput.parent().find('.' + errorMessageClass);
										if (!$currentErrorMessages.length) {
											$newErrorMessage = $(document.createElement('span'));
											$newErrorMessage.addClass(errorSpanClasses);
											$newErrorMessage.text(errorSpanText);
											return $bluredInput.after($newErrorMessage);
										}
									} else {
										if ($currentErrorMessages.length) {
											return $currentErrorMessages.remove();
										}
									}
								}
							});
						}
					}
				};
			})(this));
		};

		return UIFormUtilities;

	})();
});

define('UI.View.GiftCardBalance', ['UI.View.Dialogs', 'jquery'], function (UIDialogs, $) {
	var GiftCardBalance;
	return GiftCardBalance = (function () {
		function GiftCardBalance() {
			this.$form = $('#giftcard-balance-form');
			this.$formButton = this.$form.find('#pt-button-checkbalance');
			this.$balance = $('#giftcard-balance');
		}

		GiftCardBalance.prototype.initialize = function () {
			this.$form.on('submit', (function (_this) {
				return function (e) {
					e.preventDefault();
					_this.$formButton.prop('disabled', true);
					return $.ajax({
						url: window.Urls.paymentechGiftCardCheckBalance,
						dataType: 'json',
						data: {
							cardNumber: _this.$form.find('[data-name=cardNumber]').val(),
							cardCode: _this.$form.find('[data-name=cardCode]').val()
						},
						success: function (data) {
							if (data.success === false) {
								return _this.$balance.show().html("Error retrieving Gift Card balance.");
							} else {
								if (data.status !== "ERROR") {
									return _this.$balance.show().html("Gift Card Balance: $" + data.balance);
								} else {
									return _this.$balance.show().html(data.errorMsg);
								}
							}
						},
						complete: function () {
							return _this.$formButton.prop('disabled', false);
						}
					});
				};
			})(this));
			return this.$form.find('a.modal').on('click', (function (_this) {
				return function (e) {
					e.preventDefault();
					return UIDialogs.prompt({
						title: '',
						body: $('.giftcard-modal-content'),
						hideFooter: true
					});
				};
			})(this));
		};

		return GiftCardBalance;

	})();
});



define('UI.View.HeaderNav', ['jquery', 'TweenLite', 'TimelineLite', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'Util.Browser', 'ViewportCommandBusSingleton'], function ($, TweenLite, TimelineLite, Fluxxor, FluxApp, FluxMixin, Browser, ViewportCommandBus) {
	var UIHeaderNav;
	return UIHeaderNav = (function () {
		function UIHeaderNav() {
			var $siteHeader = $('#site-header');

			this.available = $siteHeader.length > 0;
			if (!this.available) {
				return;
			}

			this.updateDesktopNav = bind(this.updateDesktopNav, this);
			this.initializeStickyNav = bind(this.initializeStickyNav, this);
			this.$siteHeader = $siteHeader;
			this.$headerPrimary = $('#header-primary');
			this.$main = $('#main');
			this.$headerUtility = $('.header-utility').first();
			this.$headerStickyContainer = $('#sticky-container');
			this.$headerNav = $('#header-catalog-nav');
			this.$primaryCatLinks = this.$headerNav.find('a.level-1');
			this.$catLinksWithFlyouts = this.$primaryCatLinks.filter('.has-flyout');
			this.$navFlyoutsWrapper = this.$headerNav.find('#nav-flyouts');
			this.$flyouts = this.$headerNav.find('.category-flyout');
			this.activeClassName = 'active';
			this.inactiveClassName = 'inactive';
			this.expandedClassName = 'expanded';
			this.catIDAttr = 'data-cat-id';
			this.navOpenTime = .25;
			this.flyoutHeight = '300px';
			this.timeline = new TimelineLite({
				paused: true
			});
			this.timelineEle = this.$navFlyoutsWrapper[0];
			this.timeline.set(this.timelineEle, {
				display: "block"
			}).to(this.timelineEle, this.navOpenTime, {
				ease: Power1.easeInOut,
				maxHeight: this.flyoutHeight,
				opacity: 1
			});
			this.browserStore = FluxApp.stores.BrowserStore;
		}

		UIHeaderNav.prototype.initialize = function () {
			if (!this.available) {
				return;
			}

			this.$catLinksWithFlyouts.on('click', (function (_this) {
				return function (e) {
					var parentCatID, parentLink, isOpen;
					e.preventDefault();
					parentLink = $(e.currentTarget);
					parentCatID = parentLink.attr(_this.catIDAttr);
					_this.$primaryCatLinks.removeClass(_this.expandedClassName);
					if (_this.$navFlyoutsWrapper.hasClass('active')) {
						if (_this.$navFlyoutsWrapper.find(".active[" + _this.catIDAttr + "=" + parentCatID + "]").length) {
							return FluxApp.actions.closeHeaderNav('');
						} else {
							parentLink.addClass(_this.expandedClassName);
							return FluxApp.actions.activateNavCategory(parentCatID);
						}
					} else {
						parentLink.addClass(_this.expandedClassName);
						return FluxApp.actions.activateNavCategory(parentCatID);
					}
				};
			})(this));
			this.$primaryCatLinks.on('mouseenter', (function (_this) {
				return function (e) {
					var otherLinks, parentCatID, parentLink;
					e.preventDefault();
					parentLink = $(e.currentTarget);
					parentCatID = parentLink.attr(_this.catIDAttr);
					otherLinks = _this.$primaryCatLinks.not(parentLink);
					_this.$primaryCatLinks.removeClass([_this.activeClassName, _this.inactiveClassName].join(' '));
					parentLink.addClass(_this.activeClassName);
					return otherLinks.addClass(_this.inactiveClassName);
				};
			})(this));
			this.$primaryCatLinks.on('mouseleave', (function (_this) {
				return function (e) {
					$(e.currentTarget).removeClass(_this.activeClassName);
				};
			})(this));
			$.merge(this.$headerPrimary, this.$headerStickyContainer).find('a.search, a.menu').on('click', (function (_this) {
				return function (e) {
					var browserState, currentBreakpoint;
					e.preventDefault();
					ViewportCommandBus.push(function () {
						return FluxApp.actions.changePanel('left');
					});
				};
			})(this));
			// this.$headerPrimary.on('click', 'a.bag', (function(_this) {
			//   return function(e) {
			//     e.preventDefault();
			//     return ViewportCommandBus.push(function() {
			//       return FluxApp.actions.changePanel('right');
			//     });
			//   };
			//  })(this));
			FluxApp.stores.HeaderNavStore.on('change', this.updateDesktopNav);
			this.initializeStickyNav();
			$('body').on('mousedown click', function (e) {
				var $target, shouldClose;
				$target = $(e.target);

				var flyoutActive = $('#nav-flyouts').hasClass('active');
				var menuOpen = $('#wrapper').hasClass('menu--open');

				shouldClose = (flyoutActive || menuOpen) && $target.not('.has-flyout').length === 1 && $target.parents('#sticky-container').length === 0 && $target.parents('#header-primary').length === 0 && $target.parents('#rightPanel').length === 0 && $target.parents('#leftPanel').length === 0 && $target.not('#scrim').length === 1;
				if (shouldClose) {
					return FluxApp.actions.closeHeaderNav();
				}
			});

			var $gridSortSelect = $('#grid-sort-select');
			$('.search-field').on('focus', function (e) {
				$gridSortSelect.prop('disabled', true);
			}).on('blur', function (e) {
				$gridSortSelect.prop('disabled', false);
			});
		};

		UIHeaderNav.prototype.initializeStickyNav = function () {
			var $headerPrimarySticky, animating, expanded, height, makeNavNormal, makeNavSticky, maxScrollTop, primaryHeight, sideInterval, startInterval, stopInterval, storeState, tw;
			maxScrollTop = this.$headerUtility.height() + this.$headerPrimary.height() + this.$headerNav.height();
			$headerPrimarySticky = $('#header-primary--sticky');
			$stickycontainer = $('#sticky-container');

			if (!this.$stickyUtility) {
				this.$stickyUtility = this.$headerUtility.clone().prependTo($headerPrimarySticky);
			}

			$headerPrimarySticky.css({
				position: 'absolute',
				display: 'block',
				visibility: 'hidden'
			});
			primaryHeight = $headerPrimarySticky.height();
			$headerPrimarySticky.css({
				position: 'static',
				display: 'none',
				visibility: 'visible'
			});
			$stickycontainer.css({
				display: 'block',
				visibility: 'visible'
			});
			height = this.$headerStickyContainer.height() + primaryHeight;
			animating = false;
			expanded = false;
			tw = TweenLite.to(this.$headerStickyContainer, 1, {
				y: 0,
				paused: true,
				onComplete: (function (_this) {
					return function () {
						animating = false;
						expanded = true;
						return _this.$headerStickyContainer.css('transform', 'translate3d(0, 0, 0)');
					};
				})(this)
			});
			storeState = FluxApp.stores.HeaderNavStore.getState();
			sideInterval = null;
			startInterval = (function (_this) {
				return function () {
					if (sideInterval === null) {
						return sideInterval = window.setInterval(function () {
							if (!(Browser.getScrollTop() > maxScrollTop)) {
								makeNavNormal();
								return stopInterval();
							}
						}, 100);
					}
				};
			})(this);
			stopInterval = (function (_this) {
				return function () {
					window.clearInterval(sideInterval);
					return sideInterval = null;
				};
			})(this);
			makeNavSticky = (function (_this) {
				return function () {
					if (!FluxApp.stores.HeaderNavStore.getState().isStickyEnabled) {
						return makeNavNormal();
					}
					if (!animating && !expanded) {
						_this.$headerPrimary.css('margin-bottom', _this.$headerNav.height());
						_this.$headerPrimary.css('display', 'none');
						_this.$headerStickyContainer.addClass('active');
						$headerPrimarySticky.css('display', 'block');
						$stickycontainer.css('display', 'block');
						_this.$headerStickyContainer.css('transform', "translateY(-" + height + "px)");
						tw.restart();
						return animating = true;
					}
				};
			})(this);
			makeNavNormal = (function (_this) {
				return function () {
					_this.$headerStickyContainer.removeClass('active');
					_this.$headerPrimary.css('margin-bottom', 0);
					_this.$headerPrimary.css('display', 'block');
					$headerPrimarySticky.css('display', 'none');
					$stickycontainer.css('margin-bottom', 10);
					_this.$headerStickyContainer.css('transform', "translateY(0px)");
					expanded = false[0], animating = false[1];
					if (tw != null ? tw.isActive() : void 0) {
						return tw.seek(0).pause();
					}
				};
			})(this);
			FluxApp.stores.BrowserStore.on('change', (function (_this) {
				return function () {
					var currentPanel, scrollTop;
					scrollTop = FluxApp.stores.BrowserStore.getState().properties.scrollTop;
					currentPanel = FluxApp.stores.ViewportStore.getState().properties.currentPanel;

					if (FluxApp.stores.HeaderNavStore.getState().isStickyEnabled) {
						if ((scrollTop > maxScrollTop) && currentPanel === 'center') {
							makeNavSticky();
							return startInterval();
						} else {
							return makeNavNormal();
						}
					}
				};
			})(this));
		};

		UIHeaderNav.prototype.updateDesktopNav = function () {
			var browserStore, catHasFlyout, childFlyout, dataString, newState, openCatID, otherLinks, parentLink;
			newState = FluxApp.stores.HeaderNavStore.getState();
			browserStore = FluxApp.stores.BrowserStore.getState();
			openCatID = newState.openCatID;
			catHasFlyout = newState.catHasFlyout;
			this.$primaryCatLinks.removeClass(this.activeClassName);
			this.$primaryCatLinks.removeClass(this.inactiveClassName);
			if (browserStore.properties.breakpoint === 'desktop') {
				if (openCatID) {
					dataString = "[data-cat-id='" + openCatID + "']";
					parentLink = this.$primaryCatLinks.filter(dataString);
					otherLinks = this.$primaryCatLinks.not(parentLink);
					parentLink.addClass(this.activeClassName);
					otherLinks.addClass(this.inactiveClassName);
					if (catHasFlyout) {
						childFlyout = this.$flyouts.filter(dataString);
						this.$navFlyoutsWrapper.addClass(this.activeClassName);
						this.$flyouts.removeClass(this.activeClassName);
						childFlyout.addClass(this.activeClassName);
						this.timeline.play();
					} else {
						this.$navFlyoutsWrapper.removeClass(this.activeClassName);
						this.timeline.reverse();
					}
				} else {
					this.$navFlyoutsWrapper.removeClass(this.activeClassName);
					this.timeline.reverse();
				}
			}
		};

		return UIHeaderNav;

	})();
});

define('UI.View.HeaderUtility', ['jquery', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton'], function ($, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus) {
	var HeaderUtility;
	return HeaderUtility = (function () {
		function HeaderUtility() {
			this.$siteHeader = $('#site-header');
			this.$headerUtilWrapper = $('.header-utility').first();
			this.activeClassName = 'active';
			this.browserStore = FluxApp.stores.BrowserStore;
		}

		HeaderUtility.prototype.initialize = function () {
			this.initAuthDropdown();
		};

		HeaderUtility.prototype.initAuthDropdown = function () {
			var $accountLi, $authDropdownLink, $headerUtilWrapper, activeClass;
			activeClass = this.activeClassName;
			$headerUtilWrapper = this.$headerUtilWrapper;
			$accountLi = $headerUtilWrapper.find('.header-utility-account-li');
			$authDropdownLink = $headerUtilWrapper.find('.authenticated-header-link');
			if ($authDropdownLink.length === 0) {
				return;
			}
			$authDropdownLink.on('click', (function (_this) {
				return function (e) {
					e.preventDefault();
					return $authDropdownLink.parent().toggleClass(activeClass);
				};
			})(this));
			$accountLi.on('mouseleave', (function (_this) {
				return function (e) {
					e.preventDefault();
					return $authDropdownLink.parent().removeClass(activeClass);
				};
			})(this));
		};

		HeaderUtility.instance = function () {
			return new HeaderUtility();
		}

		return HeaderUtility;

	})();
});



define('UI.View.InternationalShipping', ['jquery', 'UI.View.Dialogs'], function ($, UIDialogs) {
	var UIInternationalShipping;
	return UIInternationalShipping = (function () {
		UIInternationalShipping.prototype.CN = 'UIInternationalShipping';

		UIInternationalShipping.prototype.dialogAssets = {
			title: '',
			btnLabel: '',
			body: ''
		};

		UIInternationalShipping.prototype.dialogID = -1;

		function UIInternationalShipping() {
			this.dialogDismissed = bind(this.dialogDismissed, this);
			this.dialogConfirmed = bind(this.dialogConfirmed, this);
			this.dialogDisplayed = bind(this.dialogDisplayed, this);
			this.displayDialog = bind(this.displayDialog, this);
		}

		UIInternationalShipping.prototype.initialize = function () {
			var $assets, $link, $ui;
			$ui = $('.outside-usa');
			if (!$ui || !$ui.length) {
				return;
			}
			$assets = $ui.find('.intl-ship-dialog');
			if (!$assets || !$assets.length) {
				return;
			}
			$link = $ui.find('.expand-link');
			if (!$link || !$link.length) {
				return;
			}
			this.dialogAssets.title = $assets.attr('data-title');
			this.dialogAssets.btnLabel = $assets.attr('data-btn-label');
			this.dialogAssets.body = $assets.html();
			return $link.on('click', (function (_this) {
				return function (e) {
					e.preventDefault();
					return _this.displayDialog();
				};
			})(this));
		};

		UIInternationalShipping.prototype.displayDialog = function () {
			var dialogSettings, gotAssets;
			gotAssets = true;
			switch (true) {
				case !this.dialogAssets.title:
					gotAssets = false;
					break;
				case !this.dialogAssets.btnLabel:
					gotAssets = false;
					break;
				case !this.dialogAssets.body:
					gotAssets = false;
			}
			if (!gotAssets) {
				return;
			}
			dialogSettings = {
				title: this.dialogAssets.title,
				showAsRequired: true,
				body: $(document.createElement('div')).html(this.dialogAssets.body),
				submitText: this.dialogAssets.btnLabel,
				openCallback: this.dialogDisplayed,
				closeCallback: this.dialogDismissed,
				submitCallback: this.dialogConfirmed,
				hideFooter: false,
				showAsRequired: false
			};
			UIDialogs.prompt(dialogSettings);
			return $('.sees-dialog-content').addClass('intl-ship-dialog-content');
		};

		UIInternationalShipping.prototype.dialogDisplayed = function (dialogID) {
			return this.dialogID = dialogID;
		};

		UIInternationalShipping.prototype.dialogConfirmed = function () {
			return UIDialogs.close(this.dialogID, this.dialogDismissed);
		};

		UIInternationalShipping.prototype.dialogDismissed = function () { };

		return UIInternationalShipping;

	})();
});



define('UI.View.KeyHandlerUtils', ['jquery'], function ($) {
	var UIKeyHandlerUtils;
	return UIKeyHandlerUtils = (function () {
		UIKeyHandlerUtils.prototype.CN = 'KeyHandlerUtils';

		function UIKeyHandlerUtils() {
			this.normalizeQuantity = bind(this.normalizeQuantity, this);
			this.isQuantityKeydownValid = bind(this.isQuantityKeydownValid, this);
		}

		UIKeyHandlerUtils.prototype.initialize = function () { };

		UIKeyHandlerUtils.prototype.defaults = {
			min: 0,
			max: 9999,
			maxlength: 4,
			step: 1
		};


		/*
		 * assumptions : • <input type="number" • these attributes are set correctly : •
		 * min • max • maxlength
		 */

		UIKeyHandlerUtils.prototype.isQuantityKeydownValid = function (e, inputElement) {
			var $inputElement, alwaysAllowed, currentLength, isAllowed, isAlreadySelected, isAtMaxLength, isKeyAlwaysAllowed, isKeyComboToPaste, isKeyComboToSelectAll, isKeyNumeric, keyCode, maxlength;
			if (!e || !inputElement) {
				if (e && e.preventDefault) {
					e.preventDefault();
				}
				return;
			}
			$inputElement = $(inputElement);
			isAllowed = true;
			keyCode = e.which;
			maxlength = parseInt($inputElement.attr('maxlength'), 10);
			if (!maxlength) {
				maxlength = this.defaults.maxlength;
			}
			currentLength = $inputElement.val().length;

			/*
			   * BACKSPACE : 8 TAB : 9 DELETE : 46 ESC : 27 ENTER : 13 END : 35 HOME :
			   * 36 LEFT : 37 UP : 38 RIGHT : 39 DOWN : 40
			   */
			alwaysAllowed = [8, 9, 46, 27, 13, 35, 36, 37, 38, 39, 40];
			isAlreadySelected = $inputElement.is('[data-is-selected]') && (parseInt($inputElement.attr('data-is-selected'), 10) === 1);
			isKeyComboToSelectAll = keyCode === 65 && (e.ctrlKey || e.metaKey);
			isKeyComboToPaste = keyCode === 86 && (e.ctrlKey || e.metaKey);
			isKeyAlwaysAllowed = $.inArray(keyCode, alwaysAllowed) !== -1;
			isKeyNumeric = (!e.shiftKey && (keyCode > 47 && keyCode < 58)) || (keyCode > 95 && keyCode < 106);
			isAtMaxLength = currentLength === maxlength;
			if (isKeyComboToSelectAll) {
				$inputElement.attr('data-is-selected', 1);
			} else {
				$inputElement.attr('data-is-selected', 0);
			}
			switch (true) {
				case isKeyAlwaysAllowed:
					isAllowed = true;
					break;
				case isKeyComboToSelectAll:
					isAllowed = true;
					break;
				case isAlreadySelected && isKeyNumeric:
					isAllowed = true;
					break;
				case isAlreadySelected && isKeyComboToPaste:
					isAllowed = true;
					break;
				case !isAtMaxLength && isKeyComboToPaste:
					isAllowed = true;
					break;
				case !isAlreadySelected && isAtMaxLength:
					isAllowed = false;
					break;
				case !isKeyNumeric:
					isAllowed = false;
			}
			if (isAllowed) {

			} else {
				e.preventDefault();
			}
		};

		UIKeyHandlerUtils.prototype.normalizeQuantity = function (inputElement, newQuantity, event) {
			var $inputElement, isAlreadySelected, max, maxlength, min, valueAsString;
			if (!inputElement) {
				return;
			}
			$inputElement = $(inputElement);
			if (!newQuantity && $inputElement.val() === "") {
				return;
			}
			if (isNaN(newQuantity)) {
				newQuantity = parseInt($inputElement.val(), 10);
			} else {
				newQuantity = parseInt(newQuantity, 10);
			}
			maxlength = parseInt($inputElement.attr('maxlength'), 10);
			if (!maxlength || isNaN(maxlength)) {
				maxlength = this.defaults.maxlength;
			}
			min = parseInt($inputElement.attr('min'), 10);
			if (isNaN(min)) {
				min = this.defaults.min;
			}
			max = parseInt($inputElement.attr('max'), 10);
			if (isNaN(max)) {
				max = this.defaults.max;
			}
			if (isNaN(newQuantity)) {
				newQuantity = min;
			}
			valueAsString = Number(newQuantity).toString();
			if (valueAsString.length > maxlength) {
				newQuantity = parseInt(valueAsString.substring(0, max - 1), 10);
			}
			if (newQuantity < min) {
				newQuantity = min;
			}
			if (newQuantity > max) {
				newQuantity = max;
			}
			isAlreadySelected = $inputElement.is('[data-is-selected]') && (parseInt($inputElement.attr('data-is-selected'), 10) === 1);
			if ($inputElement.val() !== Number(newQuantity).toString() || !isAlreadySelected) {
				$inputElement.val(newQuantity);
				$inputElement.attr('data-is-selected', 0);
			}
			return newQuantity;
		};

		return UIKeyHandlerUtils;

	})();
});



define('UI.View.LeaveConfirmationDialog', ['jquery', 'UI.View.Dialogs', 'UI.View.FormUtilities'], function ($, UIDialogs, UIFormUtilities) {
	var UILeaveConfirmationDialog;
	return UILeaveConfirmationDialog = (function () {
		function UILeaveConfirmationDialog() {
			this.initialize = bind(this.initialize, this);
			this.$wrapper = $('.confirmation-body');
		}

		UILeaveConfirmationDialog.prototype.initialize = function () {
			if (!this.$wrapper.hasClass('confirmation-body')) {
				return false;
			}
			return $(function () {
				return $(".no-flyout, expand-link, .nav-dialog").on('click', (function (_this) {
					return function (e) {
						var $dialogWrapperElem, $target, compareStr, url, validate;
						e.preventDefault();
						$target = $(e.target);
						validate = $target[0].nodeName;
						compareStr = 'a';
						if (validate.indexOf(compareStr) < 0) {
							$target = $target.closest('a');
						}
						url = window.Urls.leaveConfirmation + "?format=ajax";
						$dialogWrapperElem = $('.sees-dialog-wrapper');
						if (!$dialogWrapperElem.is(':visible')) {
							return $.ajax({
								type: "POST",
								url: url,
								success: function (response) {
									var $header, FormUtilities, dialogSettings, emailBody, newEle;
									if (response.trim() !== '') {
										newEle = $(document.createElement('div'));
										emailBody = newEle.html(response);
										dialogSettings = {
											title: 'Leave Page',
											showAsRequired: true,
											body: emailBody,
											submitText: 'Ok',
											openCallback: function (dialogID) { },
											closeCallback: function () { },
											submitCallback: function (callToClose) { }
										};
										UIDialogs.prompt(dialogSettings);
										FormUtilities = new UIFormUtilities;
										FormUtilities.initialize();
										$header = $('.dialog-header');
										$header.find('h3').hide();
										$header.find('.required-fields').hide();
										return $('.sees-dialog-content .submit-dialog').on('click', function (e) {
											return window.location.href = $target.attr('href');
										});
									} else {
										return window.location.href = $target.attr('href');
									}
								}
							});
						}
					};
				})(this));
			});
		};

		return UILeaveConfirmationDialog;

	})();
});



define('UI.View.LoadingUtil', ['lodash', 'jquery', 'TweenLite', 'TimelineLite', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton'], function (_, $, TweenLite, TimelineLite, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus) {
	var UILoadingUtil;
	UILoadingUtil = (function () {
		function UILoadingUtil() {
			this.enableElement = bind(this.enableElement, this);
			this.disableElement = bind(this.disableElement, this);
			this.initialize = bind(this.initialize, this);
			this.hasInitialized = false;
			this.$document = $(document);
			this.$window = $(document.defaultView);
			this.$mainContainer = $('#mainContainer');
		}

		UILoadingUtil.prototype.initialize = function () {
			var $document, $mainContainer, $window;
			if (this.hasInitialized) {
				return false;
			}
			this.hasInitialized = true;
			$document = this.$document;
			$window = this.$window;
			$mainContainer = this.$mainContainer;
			this.disabledClass = 'disabled-for-loading';
			this.disabledClassNoGif = 'disabled-for-loading-no-gif';
			this.allDisabledClasses = this.disabledClass + ' ' + this.disabledClassNoGif;
		};

		UILoadingUtil.prototype.disableElement = function ($wrapper, $button, showGif) {

			var self = this, $loadingSpan, appliedDisabledClass;
			if (showGif == null) {
				showGif = true;
			}
			appliedDisabledClass = this.disabledClass;
			if (!showGif) {
				appliedDisabledClass = this.disabledClassNoGif;
			}
			if ($button && $button.length) {
				$loadingSpan = $button.find('.loading-gif');
				if (!$loadingSpan.length) {
					$loadingSpan = $(document.createElement('span')).addClass('loading-gif');
					$button.append($loadingSpan);
				}
			}
			$wrapper.addClass(appliedDisabledClass);
			($button || $wrapper).prop('disabled', true);
			return function () {
				self.enableElement($wrapper, $button);
			};
		};

		UILoadingUtil.prototype.enableElement = function ($wrapper, $button) {
			$wrapper.removeClass(this.allDisabledClasses);
			return ($button || $wrapper).prop('disabled', false);
		};

		return UILoadingUtil;

	})();
	window.UILoadingUtil = UILoadingUtil = new UILoadingUtil();
	UILoadingUtil.initialize();

	return UILoadingUtil;
});



define('UI.View.Multiship', ['jquery', 'React', 'ReactDOM', 'moment', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton', 'UI.View.Dialogs', 'UI.View.LoadingUtil', 'UI.View.FormUtilities', 'Util.Browser', 'UI.View.QuantityControls', 'UI.View.VerifyAddress', 'Util.Ajax'], function ($, React, ReactDOM, moment, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus, UIDialogs, LoadingUtil, FormUtil, BrowserUtil, UIQuantityControls, UIVerifyAddress, AjaxUtil) {
	var UIMultiship;
	return UIMultiship = (function () {
		function UIMultiship() {
			this.showGiftMessageModal = bind(this.showGiftMessageModal, this);
			this.showShippingModal = bind(this.showShippingModal, this);
			this.showProductsModal = bind(this.showProductsModal, this);
			this.showAddressModal = bind(this.showAddressModal, this);
			this.submitOpenModal = bind(this.submitOpenModal, this);
			this.setActiveModalStatus = bind(this.setActiveModalStatus, this);
			this.modalBuilder = bind(this.modalBuilder, this);
			this.refreshPageContents = bind(this.refreshPageContents, this);
			this.buildModalRequest = bind(this.buildModalRequest, this);
			this.setUpRecipientListeners = bind(this.setUpRecipientListeners, this);
			this.setUpContinueToPayment = bind(this.setUpContinueToPayment, this);
			this.activateModalLinks = bind(this.activateModalLinks, this);
			this.multishipMainWrapperID = '#multiship-main-wrapper';
			this.$bodyAndHTML = $('body , html');
			this.$body = $('body');
			this.$main = $('#main');
			this.$multishipMainWrapper = $(this.multishipMainWrapperID);
			if (!this.$multishipMainWrapper.length) {
				return;
			}
			this.activeClassName = 'active';
			this.totalOrderProducts = -1;
			this.totalAssignedProducts = -1;
			this.sendingModalRequest = false;
			this.showingHoldingProducts = false;
			this.ignoreEmptyShipments = false;
			this.ignoreUnassignedProducts = false;
			return;
		}




		UIMultiship.prototype.initialize = function (force) {
			if (!force && !this.$multishipMainWrapper.length) {
				return false;
			}
			this.activateModalLinks();
			this.setUpRecipientListeners();
			this.setUpContinueToPayment();
			return true;
		};

		UIMultiship.prototype.activateModalLinks = function () {
			var $allLinks, $inactiveLinks, activatedClass, hrefString;
			activatedClass = 'updated-href';
			hrefString = 'href';
			$allLinks = this.$body.find('a');
			$inactiveLinks = $allLinks.not('.' + activatedClass);
			return $inactiveLinks.each((function (_this) {
				return function (index) {
					var $inactiveLink;
					$inactiveLink = $($inactiveLinks[index]);
					$inactiveLink.attr(hrefString, $inactiveLink.data(hrefString));
					return $inactiveLink.addClass(activatedClass);
				};
			})(this));
		};

		UIMultiship.prototype.setUpContinueToPayment = function () {
			var $multishipWrap, continueCTASelector, multishipFormSelector, noShippingMethodSelector;
			$multishipWrap = this.$multishipMainWrapper;
			multishipFormSelector = '.checkout-multiship-form';
			continueCTASelector = '.multiship-continue-to-payment-cta';
			noShippingMethodSelector = '.shipping-not-complete.products-assigned';
			$multishipWrap.on('click', continueCTASelector, (function (_this) {
				return function (e) {
					var $buttonRow, $continueButton, $emptyShipmentsCopy, $emptyShipmentsList, $exitButton, $extraEmptyShipments, $firstShipmentWithoutMethod, $modalMainContents, $multishipForm, $okButton, $shipmentsWithoutMethod, extraEmptyShipmentsCopy, extraEmptyShipmentsTitle, holdingURL, missingModalClass, missingShipmentTitle, numProductsAssigned, totalOrderProducts;
					if (_this.sendingModalRequest === true) {
						e.preventDefault();
						return false;
					}
					$multishipForm = $multishipWrap.find(multishipFormSelector);
					numProductsAssigned = parseInt($multishipForm.data('num-items-added'));
					totalOrderProducts = parseInt($multishipForm.data('total-order-items'));
					$shipmentsWithoutMethod = $multishipWrap.find(noShippingMethodSelector);
					$extraEmptyShipments = $multishipWrap.find('.no-products-assigned-to-shipment');
					if (numProductsAssigned !== totalOrderProducts && _this.ignoreUnassignedProducts === false) {
						e.preventDefault();
						_this.showingHoldingProducts = true;
						holdingURL = $multishipForm.data('holding-ship-products-url') + '&numAdded=' + numProductsAssigned;
						return _this.buildModalRequest(holdingURL, _this.showProductsModal);
					} else if ($shipmentsWithoutMethod.length > 0) {
						e.preventDefault();
						$firstShipmentWithoutMethod = $shipmentsWithoutMethod.first();
						missingShipmentTitle = 'Please enter a delivery method for ' + $firstShipmentWithoutMethod.data('recipient-title');
						missingModalClass = 'multiship-missing-shipment-modal';
						$okButton = $('<button>').addClass('account-button').text('OK');
						return _this.modalBuilder($okButton, missingShipmentTitle, missingModalClass, function (dialogID) {
							var $body, $modalBody;
							$body = _this.$body;
							$modalBody = $body.find('.' + missingModalClass);
							$okButton = $modalBody.find('.account-button');
							return $okButton.on('click', function (e) {
								e.preventDefault();
								UIDialogs.close(dialogID);
								return _this.setActiveModalStatus(false);
							});
						});
					} else if ($extraEmptyShipments.length > 0 && _this.ignoreEmptyShipments === false) {
						e.preventDefault();
						extraEmptyShipmentsTitle = 'You have shipments with no products assigned';
						extraEmptyShipmentsCopy = 'If you proceed to billing, extra shipments will be ignored. You can also go back now and assign products to those shipments';
						missingModalClass = 'multiship-missing-shipment-modal';
						$continueButton = $('<button>').addClass('account-button continue-button').text('Continue to Billing');
						$exitButton = $('<button>').addClass('account-button go-back-button').text('Go Back');
						$buttonRow = $('<div>');
						$emptyShipmentsList = $('<ul>').addClass('empty-shipments-actions');
						$emptyShipmentsCopy = $('<p>').text(extraEmptyShipmentsCopy);
						$extraEmptyShipments.each(function (index) {
							var $emptyShipmentLi, shipmentTitle;
							shipmentTitle = $($extraEmptyShipments[index]).data('recipient-title');
							$emptyShipmentLi = $('<li>').text(shipmentTitle);
							return $emptyShipmentsList.append($emptyShipmentLi);
						});
						$modalMainContents = $('<div>');
						$modalMainContents.append($emptyShipmentsList);
						$modalMainContents.append($emptyShipmentsCopy);
						$buttonRow.append($continueButton);
						$buttonRow.append($exitButton);
						$modalMainContents.append($buttonRow);
						return _this.modalBuilder($modalMainContents, extraEmptyShipmentsTitle, missingModalClass, function (dialogID) {
							var $body, $goBackButton, $modalBody;
							$body = _this.$body;
							$modalBody = $body.find('.' + missingModalClass);
							$continueButton = $modalBody.find('.continue-button');
							$goBackButton = $modalBody.find('.go-back-button');
							$continueButton.on('click', function (e) {
								UIDialogs.close(dialogID);
								_this.setActiveModalStatus(false);
								_this.ignoreEmptyShipments = true;
								return $multishipWrap.find(continueCTASelector).trigger('click');
							});
							return $goBackButton.on('click', function (e) {
								UIDialogs.close(dialogID);
								return _this.setActiveModalStatus(false);
							});
						});
					}
				};
			})(this));
		};

		UIMultiship.prototype.setUpRecipientListeners = function () {
			var $multishipWrap, addAddressClass, addGiftMessageClass, addNewRecipientClass, addProductsClass, addShippingClass, editAddressClass, editGiftMessageClass, editProductsClass, editShippingClass;
			$multishipWrap = this.$multishipMainWrapper;
			addAddressClass = '.add-recipient-address';
			editAddressClass = '.edit-recipient-address';
			addNewRecipientClass = '.add-another-recipient';
			addProductsClass = '.add-recipient-products';
			editProductsClass = '.edit-recipient-products';
			addShippingClass = '.add-recipient-shipping';
			editShippingClass = '.edit-recipient-shipping';
			addGiftMessageClass = '.add-recipient-gift-message';
			editGiftMessageClass = '.edit-recipient-gift-message';
			$multishipWrap.on('click', [addAddressClass, editAddressClass, addNewRecipientClass].join(','), (function (_this) {
				return function (e) {
					e.preventDefault();
					return _this.buildModalRequest($(e.currentTarget).attr('href'), _this.showAddressModal);
				};
			})(this));
			$multishipWrap.on('click', [addProductsClass, editProductsClass].join(','), (function (_this) {
				return function (e) {
					e.preventDefault();
					return _this.buildModalRequest($(e.currentTarget).attr('href'), _this.showProductsModal);
				};
			})(this));
			$multishipWrap.on('click', [addShippingClass, editShippingClass].join(','), (function (_this) {
				return function (e) {
					e.preventDefault();
					return _this.buildModalRequest($(e.currentTarget).attr('href'), _this.showShippingModal);
				};
			})(this));
			$multishipWrap.on('click', [addGiftMessageClass, editGiftMessageClass].join(','), (function (_this) {
				return function (e) {
					e.preventDefault();
					return _this.buildModalRequest($(e.currentTarget).attr('href'), _this.showGiftMessageModal);
				};
			})(this));
		};

		UIMultiship.prototype.buildModalRequest = function (actionURL, modalFunction, completeCallback) {
			var andSymbol, formatAjaxString, fullURL, questionMarkSymbol;
			if (this.sendingModalRequest === true) {
				return false;
			}
			this.setActiveModalStatus(true);
			andSymbol = '&';
			questionMarkSymbol = '?';
			formatAjaxString = 'format=ajax';
			if (actionURL.indexOf(questionMarkSymbol) === -1) {
				actionURL += questionMarkSymbol;
			} else {
				actionURL += andSymbol;
			}
			fullURL = actionURL + 'format=ajax';
			$.ajax({
				type: "GET",
				url: fullURL,
				error: (function (_this) {
					return function (request, status, error) { };
				})(this),
				success: (function (_this) {
					return function (response) {
						return modalFunction(response);
					};
				})(this)
			}).always(function () {
				this.sendingModalRequest = false;
				completeCallback();
			});
		};

		UIMultiship.prototype.refreshPageContents = function (response) {
			var $multishipForm, $multishipMainWrapper, multishipMainWrapperID, reloadAction;
			multishipMainWrapperID = this.multishipMainWrapperID;
			$multishipMainWrapper = this.$multishipMainWrapper;
			$multishipForm = $multishipMainWrapper.find('.checkout-multiship-form');
			reloadAction = $multishipForm.attr('data-refresh-url');
			if (reloadAction.indexOf('?') < 0) {
				reloadAction += '?';
			} else {
				reloadAction += '&';
			}
			reloadAction += 'format=ajax';
			$.ajax({
				type: "GET",
				url: reloadAction,
				error: (function (_this) {
					return function (request, status, error) { };
				})(this),
				success: (function (_this) {
					return function (response) {
						var $newMultishipWrapper, $response;
						$response = $(response);
						$newMultishipWrapper = $response.filter(multishipMainWrapperID);
						$multishipMainWrapper.html($newMultishipWrapper.html());
						return _this.activateModalLinks();
					};
				})(this)
			});
		};

		UIMultiship.prototype.modalBuilder = function (response, mTitle, mWrapperClass, mCallback, cCallback) {
			var $body, $modalBody, dialogSettings, setActiveModalStatus;
			$body = this.$body;
			$modalBody = $('<div>').addClass('temp-modal').html(response);
			setActiveModalStatus = this.setActiveModalStatus;
			dialogSettings = {
				title: mTitle,
				altWrapperClass: mWrapperClass,
				body: $modalBody,
				hideFooter: true,
				openCallback: (function (_this) {
					return function (dialogID) {
						return mCallback(dialogID);
					};
				})(this),
				closeCallback: (function (_this) {
					return function () {
						if (cCallback) {
							cCallback.call();
						}
						return setActiveModalStatus(false);
					};
				})(this)
			};
			UIDialogs.prompt(dialogSettings);
		};

		UIMultiship.prototype.setActiveModalStatus = function (newModalStatus) {
			this.sendingModalRequest = newModalStatus;
		};

		UIMultiship.prototype.submitOpenModal = function (formData, action, dialogID) {
			var refreshPageContents, setActiveModalStatus;
			refreshPageContents = this.refreshPageContents;
			setActiveModalStatus = this.setActiveModalStatus;
			$.ajax({
				type: "POST",
				data: formData,
				url: action,
				success: (function (_this) {
					return function (response) {
						refreshPageContents(response);
						UIDialogs.closeAll();
						return setActiveModalStatus(false);
					};
				})(this)
			});
		};

		UIMultiship.prototype.showAddressModal = function (response) {
			var $modalForm, $tempWrapper, modalTitle, sendInitialClick;
			$tempWrapper = $('<div>').addClass('temp-modal').html(response);
			$modalForm = $tempWrapper.find('#edit-address-form');
			modalTitle = $modalForm.attr('data-modal-title');
			sendInitialClick = false;
			if (modalTitle.indexOf('#') !== -1) {
				sendInitialClick = true;
			}
			this.modalBuilder(response, modalTitle, 'multiship-address-modal', (function (_this) {
				return function (dialogID) {
					var $addNewAddressLink, $addressSelectList, $body, $fieldWrapper, $submitAndSave, hideClass, setQASFields;
					$body = _this.$body;
					$modalForm = $body.find('#edit-address-form');
					$addNewAddressLink = $modalForm.find('.add-new-address-link');
					$fieldWrapper = $body.find('#multiship-address-field-list');
					$submitAndSave = $modalForm.find('.submit-address-modal');
					hideClass = 'hide';
					setQASFields = function (isValid) {
						$modalForm.find("[name*='addressVerified']").val(isValid);
						$modalForm.find("[name*='addressCorrected']").val(isValid);
						$modalForm.find("[name*='customerBypassAddressVerification']").val(isValid);
						return $modalForm.find('label.error').remove();
					};
					$addressSelectList = $modalForm.find('.select-address select');
					$addressSelectList.on('change', function (e) {
						var $selected, $self, selectedAddress, selectedVal, uiVerifyAddress;
						$self = $(e.target);
						$selected = $self.find(":selected");
						selectedVal = $selected.val();
						if (selectedVal === "null" || selectedVal === "") {
							return;
						}
						if (selectedVal !== "addnew") {
							selectedAddress = $self.find(':selected').data("address");
							uiVerifyAddress = new UIVerifyAddress();
							uiVerifyAddress.populateForm(selectedAddress);
							$fieldWrapper.addClass(hideClass);
							$addNewAddressLink.removeClass(hideClass);
							setQASFields('true');
						} else {
							if (!sendInitialClick) {
								$modalForm.find('input[type=text] , input[type=tel]').val('');
								$modalForm.find('#multiship-address-field-list select').val('').trigger('change');
							}
							$fieldWrapper.removeClass(hideClass);
							$addNewAddressLink.addClass(hideClass);
							setQASFields('false');
							sendInitialClick = false;
						}
						$submitAndSave.parent().removeClass(hideClass);
						return UIDialogs.updateDialogs();
					});
					$addressSelectList.change();
					$addNewAddressLink.on('click', function (e) {
						e.preventDefault();
						$addressSelectList.val('addnew');
						return $addressSelectList.trigger('change');
					});
					if (sendInitialClick === true) {
						$addNewAddressLink.trigger('click');
					}
					$modalForm.on('change', 'input[name*="address"]:not(:checkbox)', function (e) {
						return setQASFields('false');
					});
					return $submitAndSave.on('click', function (e) {
						var action, bypassInputVal, formData, uiVerifyAddress, verifiedInputVal;
						e.preventDefault();
						action = $modalForm.attr('action') + '?format=ajax';
						verifiedInputVal = $modalForm.find("[name*='addressVerified']").val();
						bypassInputVal = $modalForm.find("[name*='customerBypassAddressVerification']").val();
						if (SitePreferences.QAS_ACTIVE && !(verifiedInputVal === "true" || bypassInputVal === "true")) {
							uiVerifyAddress = new UIVerifyAddress();
							return uiVerifyAddress.verifyMultiship(function (addressIsVerified) {
								var formData;
								if (addressIsVerified === true) {
									formData = $modalForm.serialize() + '&' + $submitAndSave.attr('name') + '=' + $submitAndSave.attr('value');
									return _this.submitOpenModal(formData, action, dialogID);
								}
							});
						} else {
							formData = $modalForm.serialize() + '&' + $submitAndSave.attr('name') + '=' + $submitAndSave.attr('value');
							return _this.submitOpenModal(formData, action, dialogID);
						}
					});
				};
			})(this));
		};

		UIMultiship.prototype.showProductsModal = function (response) {
			var $modalBody, activeClassName, fullName, holdingTitle, productTitle;
			activeClassName = this.activeClassName;
			$modalBody = $('<div>').addClass('temp-modal').html(response);
			fullName = $modalBody.find('#shipment-product-assignments').data('full-name');
			productTitle = 'Select Items to be shipped to ' + fullName;
			if (this.showingHoldingProducts === true) {
				holdingTitle = 'Some items in your Bag were not added to a shipment.';
				this.modalBuilder(response, holdingTitle, 'multiship-holding-modal', (function (_this) {
					return function (dialogID) {
						var $backButton, $body, $continueButton, continueCTASelector;
						_this.showingHoldingProducts = false;
						$body = _this.$body;
						$modalBody = $body.find('.multiship-holding-modal');
						$backButton = $modalBody.find('.go-back');
						$continueButton = $modalBody.find('.continue-button');
						continueCTASelector = '.multiship-continue-to-payment-cta';
						if ($continueButton.length !== 0) {
							$continueButton.on('click', function (e) {
								e.preventDefault();
								UIDialogs.close(dialogID);
								_this.setActiveModalStatus(false);
								_this.ignoreUnassignedProducts = true;
								return _this.$multishipMainWrapper.find(continueCTASelector).trigger('click');
							});
						}
						return $backButton.on('click', function (e) {
							e.preventDefault();
							_this.setActiveModalStatus(false);
							return UIDialogs.close(dialogID);
						});
					};
				})(this));
			} else {
				this.modalBuilder(response, productTitle, 'multiship-products-modal', (function (_this) {
					return function (dialogID) {
						var $modalForm, $shipmentItems, $submitAndSave, productsDialogID;
						$modalForm = _this.$body.find('#shipment-product-assignments');
						$shipmentItems = $modalForm.find('.add-to-shipment-item');
						$submitAndSave = $modalForm.find('.submit-products-modal');
						productsDialogID = dialogID;
						UIQuantityControls.setUpControlSets($modalForm, false, null);
						$shipmentItems.each(function (index) {
							var $itemQtyInput, $itemToggle, $shipmentItem;
							$shipmentItem = $($shipmentItems[index]);
							$itemToggle = $shipmentItem.find('.input-checkbox');
							$itemQtyInput = $shipmentItem.find('.item-quantity input');
							return $itemToggle.on('change', function (e) {
								if ($shipmentItem.hasClass(activeClassName)) {
									UIQuantityControls.updateLineItemQty(0, 0, $itemQtyInput);
								} else {
									UIQuantityControls.updateLineItemQty(1, 0, $itemQtyInput);
								}
								return $shipmentItem.toggleClass(activeClassName);
							});
						});
						return $submitAndSave.on('click', function (e) {
							var action, formData;
							e.preventDefault();
							action = $modalForm.attr('action') + '?format=ajax';
							formData = $modalForm.serialize();
							return _this.submitOpenModal(formData, action, dialogID);
						});
					};
				})(this));
			}
		};

		UIMultiship.prototype.showShippingModal = function (response) {
			var $modalBody, activeClassName, fullName, shippingTitle;
			activeClassName = this.activeClassName;
			$modalBody = $('<div>').addClass('temp-modal').html(response);
			fullName = $modalBody.find('.multiship-shipping-method-form').data('full-name');

			if (!fullName || !fullName.length) {
				try { AjaxUtil.postLog('Session timed out while accessing calendar'); } catch (ex) { }
				$(document).trigger('sees:session-timeout');
			}

			this.submitting = false;

			shippingTitle = 'Shipping for ' + fullName;
			this.modalBuilder(response, shippingTitle, 'multiship-shipping-modal', (function (_this) {
				return function (dialogID) {
					var $isExpeditedField, $modalForm, $selectedDateField, $selectedDateRangeEndField, $shipmentIDField, $submitAndSave, data;
					$modalForm = _this.$body.find('.multiship-shipping-method-form');
					$submitAndSave = $modalForm.find('.submit-shipping-modal');
					$isExpeditedField = $modalForm.find('[name=dwfrm_singleshippingmethod_isExpedited]');
					$selectedDateField = $modalForm.find('[name=dwfrm_singleshippingmethod_selectedDate]');
					$selectedDateRangeEndField = $modalForm.find('[name=dwfrm_singleshippingmethod_selectedDateRangeEnd]');
					$shipmentIDField = $modalForm.find('[name=shipmentID]');
					if ($selectedDateField.val() === "") {
						data = {
							expedited: $isExpeditedField.val() === 'true',
							shipmentID: $shipmentIDField.val()
						};
						ReactDOM.render(React.createElement(ReactViewCalendar, {
							"flux": FluxApp,
							"data": data
						}), $('#ShippingCalendarMountPoint').get(0));
					} else {
						data = {
							expedited: $isExpeditedField.val() === 'true',
							shipmentID: $shipmentIDField.val(),
							delivery: moment($selectedDateField.val(), 'YYYY-MM-DD').utc()
						};
						data.selectedDelivery = data.delivery.clone();
						if (!data.expedited) {
							data.delivery = [moment($selectedDateField.val(), 'YYYY-MM-DD').utc(), moment($selectedDateRangeEndField.val(), 'YYYY-MM-DD').utc()];
						}
						ReactDOM.render(React.createElement(ReactViewCalendar, {
							"flux": FluxApp,
							"data": data
						}), $('#ShippingCalendarMountPoint').get(0));
					}
					UIDialogs.updateDialogs();


					return $submitAndSave.on('click', function (e) {
						var action, formData;
						e.preventDefault();
						if (_this.submitting) { return; };
						_this.submitting = true;

						$(this).prop('disabled', true).toggleClass('disabled');
						action = $modalForm.attr('action') + '?format=ajax';
						formData = $modalForm.serialize() + '&' + $submitAndSave.attr('name') + '=' + $submitAndSave.attr('value');
						return _this.submitOpenModal(formData, action, dialogID);
					});

				};
			})(this), (function (_this) {
				return function () {
					var $modalForm = _this.$body.find('.multiship-shipping-method-form');
					if ($modalForm.find('.Calendar__week__group.selected, .day.deliverable.selected').length) {
						$modalForm.find('.submit-shipping-modal').trigger('click');
					}
				};
			})(this));
		};

		UIMultiship.prototype.showGiftMessageModal = function (response) {
			var $modalBody, activeClassName, fullName, giftModalTitle;
			activeClassName = this.activeClassName;
			$modalBody = $('<div>').addClass('temp-modal').html(response);
			fullName = $modalBody.find('.shipment-gift-message-assignments').data('full-name');
			giftModalTitle = fullName;
			this.modalBuilder(response, giftModalTitle, 'multiship-gift-message-modal', (function (_this) {
				return function (dialogID) {
					var $currentCountSpan, $giftMsgSelector, $modalForm, $submitAndSave, $textArea, maxLength, updateCharCount, initMsg;
					$modalForm = _this.$body.find('.shipment-gift-message-assignments');
					$giftMsgSelector = $modalForm.find('#gift-message-selector');
					$textArea = $modalForm.find('.input-textarea');
					initMsg = $textArea.val().trim();
					$submitAndSave = $modalForm.find('.submit-gift-message-modal');
					$currentCountSpan = $modalForm.find('.current-char-count');
					maxLength = $textArea.attr('maxlength');
					updateCharCount = function () {
						var currentCharCount;
						currentCharCount = $textArea.val().length;
						return $currentCountSpan.text(currentCharCount);
					};
					$giftMsgSelector.on('change', function (e) {
						var $activeOption, messageText;
						$activeOption = $giftMsgSelector.find(":selected");
						if ($activeOption.val() !== "-1") {
							messageText = $activeOption.text();
							$textArea.val(messageText);
							return updateCharCount();
						}
					});
					$textArea.on('keyup', function (e) {
						return updateCharCount();
					});
					return $submitAndSave.on('click', function (e) {
						var action, formData, validator, msg;
						e.preventDefault();
						validator = $modalForm.validate();
						if ($.validator && !$modalForm.valid()) {
							validator.focusInvalid();

						}
						$(this).prop('disabled', true).toggleClass('disabled');
						action = $modalForm.attr('action') + '?format=ajax';
						formData = $modalForm.serialize();
						msg = $textArea.val().trim();

						return _this.submitOpenModal(formData, !initMsg.length && msg.length && msg.localeCompare(initMsg));
					});
				};
			})(this));
		};

		return UIMultiship;

	})();
});



define('UI.View.Notification', ['jquery', 'Flux.App'], function ($, FluxApp) {
	var UINotification;
	return UINotification = (function () {
		function UINotification() {
			this.setPosition = bind(this.setPosition, this);
			this.notificationClass = 'notification';
			this.openedClass = 'notification-opened';
			this.isOpened = false;
			this.$delay = 5000;
			this.notification = null;
		}

		UINotification.prototype.initialize = function () {
			this.notification = $('.' + this.notificationClass);
			if (!this.notification.length) {
				this.notification = $('<div class=' + this.notificationClass + ' />').prependTo('body');
			}

			return FluxApp.stores.BrowserStore.on('change', (function (_this) {
				return function () {
					var breakpoint, previousBreakpoint, ref, resized;
					ref = FluxApp.stores.BrowserStore.getState().properties, previousBreakpoint = ref.previousBreakpoint, breakpoint = ref.breakpoint, resized = ref.resized;
					if (!_this.isOpened) {
						return;
					}
					return _this.setPosition();
				};
			})(this));
		};

		UINotification.prototype.setPosition = function () {
			var breakpoint, previousBreakpoint, ref, resized, scrollTop;
			ref = FluxApp.stores.BrowserStore.getState().properties, previousBreakpoint = ref.previousBreakpoint, breakpoint = ref.breakpoint, resized = ref.resized, scrollTop = ref.scrollTop;
			if (breakpoint === 'tablet') {
				return this.notification.css({
					top: scrollTop
				});
			} else {
				return this.notification.css({
					top: 0
				});
			}
		};

		UINotification.prototype.displayMessage = function (msg) {
			//if (!this.notification) { return; }
			this.isOpened = true;
			this.notification.text(msg).addClass(this.openedClass);
			return this.setPosition();
		};

		UINotification.prototype.hideMessage = function () {
			//if (!this.notification) { return; }
			this.isOpened = false;
			return this.notification.removeClass(this.openedClass).delay(3000).text('').css({
				top: 0
			});
		};

		return UINotification;

	})();

});



define('UI.View.OrderConfirmation', ['jquery', 'dataLayer'], function ($, dataLayer) {
	var UIOrderConfirmation;
	return UIOrderConfirmation = (function () {
		function UIOrderConfirmation() {
			this.initialize = bind(this.initialize, this);
			this.$wrapper = $('.confirmation-body');
		}

		UIOrderConfirmation.prototype.initialize = function () {
			var data, i, idArr, len, price, ref, row;
			if (!this.$wrapper.hasClass('confirmation-body')) {
				return false;
			}
			this.$items = $('.item-details');
			idArr = [];
			price = 0;
			ref = this.$items;
			for (i = 0, len = ref.length; i < len; i++) {
				row = ref[i];
				data = $(row).data('productinfo');
				idArr.push(data.id);
				price += parseFloat(data.price);
			}
			price = price.toFixed(2);
			dataLayer.push({
				google_tag_params: {
					ecomm_totalvalue: parseFloat(price),
					ecomm_prodid: idArr,
					ecomm_pagetype: 'purchase'
				}
			});
			return true;
		};

		return UIOrderConfirmation;

	})();
});



define('UI.View.OrderForms', ['jquery', 'lodash', 'Flux.App', 'UI.View.QuantityControls'], function ($, _, FluxApp, QuantityControls) {
	var OrderForms;
	return OrderForms = (function () {
		function OrderForms() {
			this.handleProductAddSuccess = bind(this.handleProductAddSuccess, this);
			this.$orderForms = $('.order-actions form');
			this.$siteHeader = $('#site-header');
			this.isAddingToCart = false;
		}

		OrderForms.prototype.initialize = function () {
			return this.$orderForms.each((function (_this) {
				return function (index, el) {
					var $el, $parent;
					$el = $(el);
					$parent = $el.parent();
					$el.find('button.button').on('click', function (e) {
						e.preventDefault();
						return _this.addToCart($el, $(e.currentTarget));
					});
					return QuantityControls.setUpControlSets($parent, false);
				};
			})(this));
		};

		OrderForms.prototype.addToCart = function ($form, $button) {
			var $qty, formData, maxVal, url;
			if (this.isAddingToCart) {
				return false;
			}
			this.isAddingToCart = true;
			$qty = $form.find('[name="Quantity"]');
			$qty.val(!$qty.val().length || isNaN($qty.val()) || (+$qty.val()) == 0 ? '1' : $qty.val());
			maxVal = +($qty.data('max-val') || -1);
			if (maxVal > 0) {
				if ((+$qty.val()) > maxVal) {
					$button.prop('disabled', true).addClass('disabled');
					this.isAddingToCart = false;
					return false;
				}
				$qty.data('max-val', maxVal - $qty.val());
				$button.prop('disabled', $qty.data('max-val') <= 0);
				$button.toggleClass('disabled', $button.prop('disabled'));
				$form.closest('.order-actions').find('.qty-msg').remove();
			}
			formData = $form.serializeArray();
			url = $form.attr('action');
			url += (((!!~url.indexOf('?')) ? '&' : '?') + 'format=ajax&target=dialog');
			$.ajax({
				type: "POST",
				url: url,
				data: formData,
				error: (function (_this) {
					return function (request, status, error) {
						return console.log('- error adding to cart -');
					};
				})(this),
				success: (function (_this) {
					return function (response) {
						return _this.handleProductAddSuccess(response);
					};
				})(this),
				complete: (function (_this) {
					return function (jqXHR, textStatus) {
						$qty.val('1');
						return _this.isAddingToCart = false;
					};
				})(this)
			});
		};

		OrderForms.prototype.handleProductAddSuccess = function (response) {
			var f, newCartData;
			newCartData = response;
			f = (function (_this) {
				return function () {
					var newFormattedQty;

					FluxApp.actions.updateCartThenAlert(newCartData);

					newFormattedQty = newCartData.outputString;
					newFormattedQty = _.unescape(newFormattedQty);
					return _this.$siteHeader.find('.cart-qty-inner').html(newFormattedQty);
				};
			})(this);
			setTimeout(f, 500);
		};

		return OrderForms;

	})();
});



define('UI.View.PayByCheck', ['lodash', 'jquery', 'ViewportCommandBusSingleton', 'UI.View.VerifyAddress'], function (_, $, ViewportCommandBus, UIVerifyAddress) {
	var PayByCheck;
	return PayByCheck = (function () {
		function PayByCheck() {
			this.submit = bind(this.submit, this);
			this.disable = bind(this.disable, this);
			this.activate = bind(this.activate, this);
			this.initialize = bind(this.initialize, this);
			this.$wrapper = $('#wrapper');
			this.payByCheckVal = 'PAY_BY_CHECK';
			this.payByCheckOptionClass = 'pay-by-check-option';
			this.widgetID = '';
			this.$payByCheckOption = this.$wrapper.find('.' + this.payByCheckOptionClass);
			if (!this.$payByCheckOption.length) {
				return false;
			}
		}

		PayByCheck.prototype.initialize = function () {
			if (!this.$payByCheckOption.length) {
				return false;
			}
			this.$save = $("[name$='billing_save']");
			this.$form = this.$save.closest("form");
			this.$recaptchaWrapper = this.$form.find(".recaptcha-wrapper");
			this.$recaptchaEle = this.$form.find(".pay-by-check-captcha");
			this.$recaptchaError = this.$recaptchaWrapper.find('.recaptcha-error');
			this.captchaRequired = false;
			this.recaptchaComplete = false;
			this.captchaActiveClass = 'active';
			this.captchaCompleteClass = 'complete';
			UIVerifyAddress = new UIVerifyAddress();
			this.verifyAddressCallback = UIVerifyAddress.handleAddressVerification;
			this.$form.on("click", "[name$='creditCardUUID']", (function (_this) {
				return function (e) {
					return _this.disable();
				};
			})(this));
			return this.$form.on("click", "[value='" + this.payByCheckVal + "']", (function (_this) {
				return function (e) {
					return _this.activate();
				};
			})(this));
		};

		PayByCheck.prototype.activate = function () {
			var $rError, $rWrapper, recaptchaCallback, recaptchaExpiredCallback;
			$rWrapper = this.$recaptchaWrapper;
			$rError = this.$recaptchaError;
			recaptchaCallback = (function (_this) {
				return function () {
					_this.recaptchaComplete = true;
					$rError.addClass('hide');
					return $rWrapper.addClass(_this.captchaCompleteClass);
				};
			})(this);
			recaptchaExpiredCallback = (function (_this) {
				return function () {
					_this.recaptchaComplete = false;
					return $rWrapper.removeClass(_this.captchaCompleteClass);
				};
			})(this);
			this.$save.on("click", this.submit);
			this.captchaRequired = true;
			if (this.widgetID === '') {
				this.widgetID = grecaptcha.render(this.$recaptchaEle.get(0), {
					"sitekey": this.$recaptchaEle.attr('data-sitekey'),
					"callback": recaptchaCallback,
					"expired-callback": recaptchaExpiredCallback,
					"size": 'compact'
				});
			}
			return this.$recaptchaWrapper.addClass(this.captchaActiveClass);
		};

		PayByCheck.prototype.disable = function () {
			this.captchaRequired = false;
			this.$save.off("click", this.submit);
			return this.$recaptchaWrapper.removeClass(this.captchaActiveClass);
		};

		PayByCheck.prototype.submit = function (e) {
			e.preventDefault();
			if (this.captchaRequired) {
				if (this.recaptchaComplete) {
					return this.verifyAddressCallback(this.$save, this.$form);
				} else {
					return this.$recaptchaError.removeClass('hide');
				}
			}
		};

		return PayByCheck;

	})();
});

define('UI.View.PerformanceTesting', ['jquery', 'UI.View.Dialogs'], function ($, UIDialogs) {
	var UIPerformanceTesting;
	return UIPerformanceTesting = (function () {
		function UIPerformanceTesting() { }

		UIPerformanceTesting.prototype.initialize = function () {
			var $body, fillWrapperSelector;
			$body = $('body');
			fillWrapperSelector = '#autofill-forms .fill-list';
			return $body.on('click', fillWrapperSelector, (function (_this) {
				return function (e) {
					var $fields, $fillList, $formToFill, fieldSuffix, formID;
					e.preventDefault();
					$fillList = $(e.currentTarget);
					formID = $fillList.attr('data-form-id');
					fieldSuffix = $fillList.attr('data-field-suffix');
					$formToFill = $('form[name=' + '"formID"' + ']');
					$fields = $fillList.find('.fill-field');
					return $fields.each(function (index) {
						var $fillField, $subOptions, $targetField, fieldLabel, fieldValue, fullID;
						$fillField = $($fields[index]);
						fieldLabel = $fillField.find('.field-label').text().trim();
						fieldValue = $fillField.find('.field-value').text().trim();
						fullID = formID + fieldSuffix + fieldLabel;
						$targetField = $('#' + fullID);
						if ($targetField.is('input[type="text"]')) {
							$targetField.val(fieldValue);
						}
						if ($targetField.is('select')) {
							$subOptions = $targetField.find('option');
							$subOptions.each(function (index) {
								var $option;
								$option = $($subOptions[index]);
								if ($option.text().toUpperCase() === fieldValue.toUpperCase()) {
									$option.attr("selected", "selected").trigger("click");
									$targetField.trigger("change");
									return false;
								} else {
									return true;
								}
							});
						}
						return $targetField.trigger('change');
					});
				};
			})(this));
		};

		return UIPerformanceTesting;

	})();
});



define('UI.View.ProductDetail', ['lodash', 'jquery', 'TweenLite', 'TimelineLite', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton', 'UI.View.LoadingUtil', 'UI.View.Dialogs', 'UI.View.KeyHandlerUtils', 'UI.View.WrapDialogUtil', 'dataLayer', 'UI.View.ShipmentsList', 'UI.View.Cart'], function (_, $, TweenLite, TimelineLite, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus, LoadingUtil, UIDialogs, UIKeyHandlerUtils, UIWrapUtil, dataLayer, UIShipmentsList, UICart) {
	var ProductDetail;
	return ProductDetail = (function () {
		ProductDetail.prototype.CN = 'ProductDetail';

		function ProductDetail() {
			this.sendLoadReviewsRequest = bind(this.sendLoadReviewsRequest, this);
			this.initReviews = bind(this.initReviews, this);
			this.handleProductAddSuccess = bind(this.handleProductAddSuccess, this);
			this.handleProductAddError = bind(this.handleProductAddError, this);
			this.addToCart = bind(this.addToCart, this);
			this.handleDataLayer = bind(this.handleDataLayer, this);
			this.updateQuantity = bind(this.updateQuantity, this);
			this.quantityControls = bind(this.quantityControls, this);
			this.initVariantDropdowns = bind(this.initVariantDropdowns, this);
			this.initThumbnails = bind(this.initThumbnails, this);
			this.initMainImages = bind(this.initMainImages, this);
			this.initProductTabs = bind(this.initProductTabs, this);
			this.initWrapDialog = bind(this.initWrapDialog, this);
			this.updateProductVariant = bind(this.updateProductVariant, this);
			this.productVariantSuccess = bind(this.productVariantSuccess, this);
			this.reInitImages = bind(this.reInitImages, this);
			this.initVariantUpdate = bind(this.initVariantUpdate, this);

			UIKeyHandlerUtil = new UIKeyHandlerUtils();
			UIKeyHandlerUtil.initialize();

			this.$wrapper = $('#wrapper');
			if (!this.$wrapper.hasClass('pt_product-detail')) {
				return false;
			}
			this.addToCartFormSelector = '.add-to-cart-form';
			this.addToCartButtonSelector = '#add-to-cart';
			this.primaryImagesSelector = '.product-primary-images';
			this.thumbnailsSelector = '.product-thumbnails';
			this.$siteHeader = $('#site-header');
			this.$main = $('#main');
			this.$pdpRow1 = this.$main.find('#pdp-row-1');
			this.$productPrimaryImages = this.$main.find(this.primaryImagesSelector);
			this.$thumbnailsWrapper = this.$main.find(this.thumbnailsSelector);
			this.$pdpRow2 = this.$main.find('#pdp-row-2');
			this.$productTabs = this.$main.find('.product-tabs');
			this.$pdpRow6 = this.$main.find('#pdp-row-6');
			this.activeClassName = 'active';
			this.inactiveClassName = 'inactive';
			this.ajaxTimingDelay = 300;
			this.ajaxTimeoutLimit = 10000;
			this.browserStore = FluxApp.stores.BrowserStore;
			this.cartStore = FluxApp.stores.CartStore;
			this.isAddingToCart = false;
			this.updatingProductVariant = false;
			this.reviewScrollTween = null;
			this.stickyHeaderOffset = 100;
		}


		ProductDetail.prototype.initialize = function () {
			var $addToCartButton, $button, productData, self = this;
			if (!this.$wrapper.hasClass('pt_product-detail')) {
				return false;
			}

			this.initMainImages();
			this.initThumbnails();
			this.initVariantUpdate();
			this.initVariantDropdowns();
			this.quantityControls();
			this.initWrapDialog();
			this.$pdpRow1.on('click', this.addToCartButtonSelector, (function (_this) {
				return function (e) {
					e.preventDefault();
					return _this.addToCart();
				};
			})(this));

			// handle add to shipments button
			this.$wrapper.on('click', '.add-to-shipments', function (e) {
				var $this = $(this),
					shipmentsList = UIShipmentsList.getInstance(),
					pid = $this.closest('form').find('input[name="pid"]').val();

				shipmentsList.show(pid).done(function (response) {
					if (response.timeout) { return; }
					FluxApp.actions.updateCartThenAlert(response);
				});
			});

			$(document).on('click', '.product-actions [data-pin-href]', (function (_this) {
				return function (e) {
					return dataLayer.push({
						event: 'socialInt',
						socialNetwork: 'Pinterest',
						socialAction: 'Share',
						socialTarget: $(e.currentTarget).data('pin-href')
					});
				};
			})(this));
			$addToCartButton = this.$pdpRow1.find(this.addToCartButtonSelector);
			$button = $addToCartButton;
			productData = $button.data('productinfo');
			if (productData) {
				dataLayer.push({
					google_tag_params: {
						ecomm_totalvalue: parseFloat(productData.price),
						ecomm_prodid: productData.id,
						ecomm_pagetype: 'product'
					}
				});
			}
			this.initProductTabs();
			if (this.$pdpRow6.data('bv-enabled')) {
				return this.sendLoadReviewsRequest(0, this.initReviews);
			}
		};

		ProductDetail.prototype.initVariantUpdate = function () {
			var $productVariations, selectableVariantClass, selectedVariantClass;
			$productVariations = this.$pdpRow1.find('.product-variations');
			selectableVariantClass = '.emptyswatch:not(.unselectable) .swatchanchor';
			selectedVariantClass = '.selected .swatchanchor';
			if ($productVariations.length) {
				this.$pdpRow1.on('click', selectableVariantClass, (function (_this) {
					return function (e) {
						var $variantLink, variantHref;
						e.preventDefault();
						$variantLink = $(e.currentTarget);
						variantHref = $variantLink.attr('href');
						return _this.updateProductVariant(variantHref);
					};
				})(this));
				return this.$pdpRow1.on('click', selectedVariantClass, (function (_this) {
					return function (e) {
						return e.preventDefault();
					};
				})(this));
			}
		};

		ProductDetail.prototype.reInitImages = function () {
			this.$productPrimaryImages = this.$main.find(this.primaryImagesSelector);
			this.$thumbnailsWrapper = this.$main.find(this.thumbnailsSelector);
			this.initMainImages();
			this.initThumbnails();
		};

		ProductDetail.prototype.productVariantSuccess = function (response) {
			var $newA2CForm, $newDetails, $newImages, $newProductActions, $newProductContent, $newVariations, $oldA2CForm, $pdpAllImages, $productActions, $productVariations, a2CClass, newDetailsSelector, newImagesSelector, newPrimary, newthumbs, oldPrimary, oldthumbs, pdpTitleSelector, productActionsSelector, thumbsSelector, variationsClass;
			variationsClass = '.product-variations';
			a2CClass = '.product-add-to-cart';
			pdpTitleSelector = '.pdp-title-col';
			thumbsSelector = '.productthumbnail';
			newDetailsSelector = '#item-details';
			newImagesSelector = '#item-images';
			productActionsSelector = '.product-actions';
			$oldA2CForm = this.$pdpRow1.find(a2CClass);
			$pdpAllImages = $('#pdp-all-images');
			$productVariations = this.$pdpRow1.find(variationsClass);
			$productActions = this.$pdpRow1.find(productActionsSelector);
			$newProductContent = $(response);
			$newVariations = $newProductContent.find(variationsClass);
			$newA2CForm = $newProductContent.filter(a2CClass);
			$newProductActions = $newProductContent.filter(productActionsSelector);
			$newDetails = $($newProductContent.filter(newDetailsSelector).text());
			$newImages = $($newProductContent.filter(newImagesSelector).text());
			$productVariations.html($newVariations.html());
			$oldA2CForm.html($newA2CForm.html());
			$(pdpTitleSelector).html($newDetails.html());
			$productActions.attr('class', $newProductActions.attr('class'));
			oldthumbs = $pdpAllImages.find(thumbsSelector).map((function (_this) {
				return function (idx, element) {
					return element.src;
				};
			})(this)).get().join();
			newthumbs = $newImages.find(thumbsSelector).map((function (_this) {
				return function (idx, element) {
					return element.src;
				};
			})(this)).get().join();
			oldPrimary = $pdpAllImages.find('.primary-image');
			newPrimary = $newImages.find('.primary-image');
			if (oldthumbs !== newthumbs || oldPrimary.attr('src') !== newPrimary.data('lazy')) {
				$pdpAllImages.children().remove();
				$pdpAllImages.html($newImages.html());
				this.reInitImages();
			}
		};

		ProductDetail.prototype.updateProductVariant = function (variantHref) {
			var $productVariations, $qtySelector, f;
			if (this.updatingProductVariant) {
				return;
			}
			this.updatingProductVariant = true;
			$productVariations = this.$pdpRow1.find('.product-variations');
			$qtySelector = this.$pdpRow1.find('#Quantity');
			variantHref += '&format=ajax&Quantity=' + ($qtySelector.val() || 1);
			LoadingUtil.disableElement(this.$pdpRow1, null, false);
			f = (function (_this) {
				return function () {
					return $.ajax({
						type: "GET",
						url: variantHref,
						timeout: _this.ajaxTimeoutLimit,
						error: function (request, status, error) { },
						success: function (response) {
							_this.productVariantSuccess(response);
						},
						complete: function (jqXHR, textStatus) {
							_this.updatingProductVariant = false;
							return LoadingUtil.enableElement(_this.$pdpRow1, null);
						}
					});
				};
			})(this);
			return setTimeout(f, this.ajaxTimingDelay);
		};

		ProductDetail.prototype.initWrapDialog = function () {
			var $selectedWrap, changeWrapSelector;
			$selectedWrap = this.$pdpRow1.find('.selected-wrap-row');
			if (!$selectedWrap.length) {
				return;
			}
			changeWrapSelector = '.selected-wrap-image-tile , .change-wrap-trigger';
			return this.$pdpRow1.on('click', changeWrapSelector, (function (_this) {
				return function (e) {
					var $wrapDialogContents;
					$wrapDialogContents = _this.$pdpRow1.find('#wrap-selection-dialog-wrapper');
					return UIWrapUtil.createWrapDialog($wrapDialogContents, function (wrapVariantURL, variantID) {
						return _this.updateProductVariant(wrapVariantURL);
					});
				};
			})(this));
		};

		ProductDetail.prototype.initProductTabs = function () {
			var $productTabs;
			$productTabs = this.$productTabs;
			if ($productTabs.length) {
				return this.$productTabs.each((function (_this) {
					return function (index) {
						var $tabContents, $tabControls, $tabWrapper;
						$tabWrapper = $($productTabs[index]);
						$tabContents = $tabWrapper.find('.tab-contents');
						$tabControls = $tabWrapper.find('.tab-control');

						function setTab(tab) {
							var liIndex, link, parentLi;
							link = $(tab);
							$tabControls.removeClass(_this.activeClassName);
							link.addClass(_this.activeClassName);
							parentLi = link.closest('li');
							liIndex = parentLi.index();
							return $tabContents.slick('slickGoTo', parseInt(liIndex));
						}


						$tabContents.slick({
							dots: false,
							infinite: false,
							speed: 500,
							swipe: false,
							adaptiveHeight: true
						});

						$tabControls.on('click', function (e) {
							e.preventDefault();
							return setTab(e.currentTarget);
						});

						setTab($tabControls.not(':hidden').first());

						return FluxApp.stores.BrowserStore.on('change', function () {
							var changedFromDesktop, changedToDesktop, curBreakpoint, prevBreakpoint;
							curBreakpoint = _this.browserStore.properties.breakpoint;
							prevBreakpoint = _this.browserStore.properties.previousBreakpoint;
							changedToDesktop = curBreakpoint === 'desktop' && prevBreakpoint !== 'desktop';
							changedFromDesktop = curBreakpoint !== 'desktop' && prevBreakpoint === 'desktop';

							if (changedToDesktop || changedFromDesktop) {
								setTab($tabControls.not(':hidden').first());
							}

						});
					};
				})(this));
			}
		};

		ProductDetail.prototype.initMainImages = function () {
			var $mainImgCTAs;
			$mainImgCTAs = this.$productPrimaryImages.find('a.main-image');
			return $mainImgCTAs.on('click', (function (_this) {
				return function (e) {
					return e.preventDefault();
				};
			})(this));
		};

		ProductDetail.prototype.initThumbnails = function () {
			var $productPrimaryImages, $thumbnailsWrapper, phoneSettings;
			$productPrimaryImages = this.$productPrimaryImages;
			$thumbnailsWrapper = this.$thumbnailsWrapper;
			$thumbnailsWrapper = this.$thumbnailsWrapper;
			phoneSettings = {
				breakpoint: 769,
				settings: {
					swipe: true
				}
			};
			$productPrimaryImages.on('init', (function (_this) {
				return function (slick, direction) {
					$productPrimaryImages.css('opacity', '1');
					return $thumbnailsWrapper.css('opacity', '1');
				};
			})(this));
			$productPrimaryImages.slick({
				lazyLoad: 'ondemand',
				infinite: false,
				slidesToShow: 1,
				slidesToScroll: 1,
				swipe: false,
				prevArrow: null,
				nextArrow: null,
				responsive: [phoneSettings]
			});
			$thumbnailsWrapper.on('click', '.thumbnail', (function (_this) {
				return function (e) {
					var $sibilings, $thumbnail, i;
					e.preventDefault();
					$thumbnail = $(e.currentTarget);
					$sibilings = $thumbnail.siblings();
					i = $thumbnail.index();
					$productPrimaryImages.slick('slickGoTo', i, true);
					$sibilings.removeClass('active');
					return $thumbnail.addClass('active');
				};
			})(this));
			return true;
		};

		ProductDetail.prototype.initVariantDropdowns = function () {
			var $variantWrapper;
			$variantWrapper = this.$pdpRow1.find('.variant-dropdown');
			return $variantWrapper.on('change', 'select', (function (_this) {
				return function (e) {
					var $variantSelect, $variantVal;
					e.preventDefault();
					$variantSelect = $(e.currentTarget);
					$variantVal = $variantSelect.val();
					if ($variantVal === "") {
						return false;
					}
					return location.assign($variantVal);
				};
			})(this));
		};

		ProductDetail.prototype.quantityControls = function ($ctnr) {
			var decrementSelector, incrementSelector, quantityInputSelector, $qtyInput;

			$ctnr = $ctnr || this.$pdpRow1;
			decrementSelector = '.quantity-decrement';
			incrementSelector = '.quantity-increment';
			quantityInputSelector = '#Quantity,.quantity-input';

			$ctnr.on('click', decrementSelector, (function (_this) {
				return function (e) {
					e.preventDefault();
					return _this.updateQuantity(-1, quantityInputSelector);
				};
			})(this));
			$ctnr.on('click', incrementSelector, (function (_this) {
				return function (e) {
					e.preventDefault();
					return _this.updateQuantity(1, quantityInputSelector);
				};
			})(this));
			$ctnr.on('keydown', quantityInputSelector, (function (_this) {
				return function (e) {
					return UIKeyHandlerUtil.isQuantityKeydownValid(e, quantityInputSelector);
				};
			})(this));
			$ctnr.on('change', quantityInputSelector, (function (_this) {
				return function (e) {
					var $button, newValue;
					newValue = UIKeyHandlerUtil.normalizeQuantity(quantityInputSelector);
					$button = $('button#add-to-cart');
					if (!newValue) {
						$ctnr.find(quantityInputSelector).val('1');
						return $button.removeClass('disabled');
					} else {
						return $button.removeClass('disabled');
					}
				};
			})(this));
			return UIKeyHandlerUtil.normalizeQuantity(quantityInputSelector);
		};

		ProductDetail.prototype.updateQuantity = function (qtyChange, quantityInput) {
			var $button, $quantityInput, currentQty, newQuantity, newValue;

			$quantityInput = quantityInput ? $(quantityInput) : this.$pdpRow1.find('#Quantity');

			if (isNaN(qtyChange)) {
				qtyChange = 0;
			}
			currentQty = parseInt($quantityInput.val(), 10);
			if (isNaN(currentQty)) {
				currentQty = 0;
			}
			newQuantity = currentQty + qtyChange;
			if (newQuantity < 1) {
				newQuantity = 1;
			}
			$quantityInput.val(newQuantity);
			newValue = UIKeyHandlerUtil.normalizeQuantity($quantityInput);
			$button = $('button#add-to-cart');
			if (!newValue) {
				$quantityInput.val('');
				return $button.addClass('disabled');
			} else {
				return $button.removeClass('disabled');
			}
		};

		ProductDetail.prototype.handleDataLayer = function (button) {
			var $button, productData;
			$button = $(button);
			productData = $button.closest('[data-productinfo]').data('productinfo');
			if (!productData) {
				return;
			}
			productData.quantity = +($button.closest('form').find('[name="Quantity"]').val() || 1);
			dataLayer.push({
				event: 'addToCart',
				ecommerce: {
					currencyCode: window.SitePreferences.CURRENCY_CODE,
					add: {
						products: [productData]
					}
				}
			});			
			if (SitePreferences.INCLUDE_FACEBOOK_CHECKOUT_DATA) {			
				fbq('track', 'AddToCart', {
					content_ids: productData.id,
					content_type: 'product',
					content_name: productData.name,                 
					content_category: productData.category,                
					value: productData.price,
					currency: 'USD'
				});
			}			
		};

		ProductDetail.prototype.addToCart = function () {			
			var $addToCartForm, $quantityInput, currentQty, formData, url, img, self = this;
			if (this.isAddingToCart) {
				return false;
			}
			$quantityInput = this.$pdpRow1.find('#Quantity');
			currentQty = parseInt($quantityInput.val());
			if (isNaN(currentQty) || currentQty < 1) {
				this.updateQuantity(0);
			}
			this.isAddingToCart = true;

			img = new Image(0, 0);
			img.src = "https://link.p0.com/1x1c.dyn?p=5MPJGA14";

			$addToCartForm = this.$pdpRow1.find(this.addToCartFormSelector);
			LoadingUtil.disableElement(this.$pdpRow1, this.$pdpRow1.find(this.addToCartButtonSelector));
			formData = $addToCartForm.serializeArray();
			url = $addToCartForm.attr('action');
			url += (((!!~url.indexOf('?')) ? '&' : '?') + 'format=ajax&target=dialog');

			$.ajax({
				type: "POST",
				url: url,
				timeout: this.ajaxTimeoutLimit,
				data: formData,
				error: (function (_this) {
					return function (xhr, status, error) {
						return _this.handleProductAddError(status);
					};
				})(this),
				success: (function (_this) {
					return function (response) {
						return _this.handleProductAddSuccess(response);
					};
				})(this),
				complete: (function (_this) {
					return function (jqXHR, textStatus) {
						return _this.isAddingToCart = false;
					};
				})(this)
			});
		};

		ProductDetail.prototype.handleProductAddError = function (status) {
			if (status === 'timeout') {
				UICart.refreshMiniCart().done(FluxApp.actions.updateCartThenAlert);
				return LoadingUtil.enableElement(this.$pdpRow1, this.$pdpRow1.find(this.addToCartButtonSelector));
			}
			window.location = window.location.href;
		};

		ProductDetail.prototype.handleProductAddSuccess = function (response) {
			var f, newCartData;

			newCartData = response;
			// error
			if (!newCartData.cartData) {
				window.location = window.location.href;
				return;
			}

			f = (function (_this) {
				return function () {
					var $addToCartButton, newFormattedQty;
					$addToCartButton = _this.$pdpRow1.find(_this.addToCartButtonSelector);
					_this.handleDataLayer($addToCartButton);
					FluxApp.actions.updateCartThenAlert(newCartData);
					newFormattedQty = newCartData.outputString;
					newFormattedQty = _.unescape(newFormattedQty);
					_this.$siteHeader.find('.cart-qty-inner').html(newFormattedQty);
					return LoadingUtil.enableElement(_this.$pdpRow1, $addToCartButton);
				};
			})(this);

			setTimeout(f, this.ajaxTimingDelay);
		};

		ProductDetail.prototype.initReviews = function () {
			var $allReviewsSection, $customerReviewsList, $featuredReview, $helpfulCTAs, $loadMoreReviewsCTA, $pdpRow6, $readLessClass, $readMoreClass, $scrollToReviewsCTA, $writeReviewCTA, headerReviewClass, helpfulnessURL, loadMoreURL, textToggle, totalReviewCount;
			$pdpRow6 = this.$pdpRow6;
			$featuredReview = this.$main.find('.pdp-sample-review');
			$allReviewsSection = this.$main.find('#pdp-customer-reviews');
			headerReviewClass = '.pdp-row-1-review-summary';
			if (!$featuredReview.length && !$allReviewsSection.length) {
				return false;
			}
			if ($allReviewsSection.length) {
				$writeReviewCTA = $allReviewsSection.find('#write-a-review-cta');
				$readMoreClass = '.read-more';
				$readLessClass = '.read-less';
				$customerReviewsList = $allReviewsSection.find('.customer-reviews-list');
				totalReviewCount = parseInt($allReviewsSection.find('.total-review-count').text());
				loadMoreURL = $allReviewsSection.data('loadmoreurl');
				helpfulnessURL = $allReviewsSection.data('submitfeedbackurl');
				this.$pdpRow1.on('click', headerReviewClass, (function (_this) {
					return function (e) {
						var primaryReviewOffset;
						dataLayer.push({
							event: 'review',
							detail: window.pageContext.product.name,
							action: 'shortcut'
						});
						primaryReviewOffset = $allReviewsSection.offset().top - _this.stickyHeaderOffset;
						return _this.reviewScrollTween = TweenLite.to($('html,body'), .4, {
							scrollTop: primaryReviewOffset
						});
					};
				})(this));
				if ($featuredReview.length) {
					$scrollToReviewsCTA = $featuredReview.find('.read-reviews-cta .button');
					$scrollToReviewsCTA.on('click', (function (_this) {
						return function (e) {
							var adjustment, breakpoint, browserProps, reviewsSectionTop;
							e.preventDefault();
							browserProps = FluxApp.stores.BrowserStore.getState().properties;
							breakpoint = browserProps.breakpoint;
							adjustment = 0;
							if (breakpoint === 'desktop') {
								adjustment = 100;
							}
							reviewsSectionTop = $allReviewsSection.offset().top - adjustment;
							return TweenLite.to($('html,body'), .75, {
								ease: Power1.easeInOut,
								scrollTop: reviewsSectionTop
							});
						};
					})(this));
				}
				$writeReviewCTA.on('click', (function (_this) {
					return function (e) {
						var $bvReviewCTA;
						e.preventDefault();
						$bvReviewCTA = $('.bv-primarySummary-rating-container .bv-write-review');
						if ($bvReviewCTA.length) {
							$bvReviewCTA = $bvReviewCTA.first().prop("onclick", null);
							return $bvReviewCTA.first().trigger('click');
						}
					};
				})(this));
				$allReviewsSection.on('click', $readMoreClass, (function (_this) {
					return function (e) {
						return textToggle('.shortened-text', '.full-text', e);
					};
				})(this));
				$allReviewsSection.on('click', $readLessClass, (function (_this) {
					return function (e) {
						return textToggle('.full-text', '.shortened-text', e);
					};
				})(this));
				textToggle = (function (_this) {
					return function (hideClass, showClass, e) {
						var $parentText, $readMoreLink, $textToHide, $textToShow;
						e.preventDefault();
						$readMoreLink = $(e.currentTarget);
						$parentText = $readMoreLink.parentsUntil('.review-text').parent();
						$textToHide = $parentText.find(hideClass);
						$textToShow = $parentText.find(showClass);
						$textToHide.addClass('hide');
						return $textToShow.removeClass('hide');
					};
				})(this);
				$loadMoreReviewsCTA = $allReviewsSection.find('.load-more');
				if ($loadMoreReviewsCTA.length) {
					$loadMoreReviewsCTA.on('click', (function (_this) {
						return function (e) {
							var currentReviewCount, masterID, url;
							e.preventDefault();
							masterID = $loadMoreReviewsCTA.data('masterid');
							currentReviewCount = $allReviewsSection.find('.customer-review').length;
							LoadingUtil.disableElement($loadMoreReviewsCTA, $loadMoreReviewsCTA);
							url = loadMoreURL;
							url += '?format=ajax&pid=' + masterID + '&offset=' + currentReviewCount;
							return $.ajax({
								type: "GET",
								url: url,
								success: function (response) {
									var $currentReviewEle, $newReviews, $response, newCurrentReviewCount;
									$response = $(response);
									$newReviews = $response.find('.customer-review');
									$currentReviewEle = $allReviewsSection.find('.current-review-count');
									newCurrentReviewCount = currentReviewCount + $newReviews.length;
									$customerReviewsList.append($newReviews);
									$currentReviewEle.text(newCurrentReviewCount);
									if (newCurrentReviewCount === totalReviewCount) {
										return $loadMoreReviewsCTA.remove();
									}
								},
								complete: function (jqXHR, textStatus) {
									return LoadingUtil.enableElement($loadMoreReviewsCTA, $loadMoreReviewsCTA);
								}
							});
						};
					})(this));
				}
				$helpfulCTAs = $allReviewsSection.find('.yes-helpful , .no-helpful');
				if ($helpfulCTAs.length) {
					$allReviewsSection.on('click', '.yes-helpful , .no-helpful', (function (_this) {
						return function (e) {
							var $helpfulCTA, $parent, contentID, url, vote;
							e.preventDefault();
							$helpfulCTA = $(e.currentTarget);
							$parent = $helpfulCTA.parent();
							contentID = $parent.data('contentid');
							vote = '';
							$parent.html('Thank you for your feedback!');
							if ($helpfulCTA.hasClass('yes-helpful')) {
								vote = 'Positive';
							} else {
								vote = 'Negative';
							}
							url = helpfulnessURL;
							url += '?format=ajax&cid=' + contentID + '&vote=' + vote;
							return $.ajax({
								type: "POST",
								url: url,
								data: {},
								error: function (request, status, error) {
									console.log('error - ');
									console.log(error);
								},
								success: function (response) { },
								complete: function (jqXHR, textStatus) { }
							});
						};
					})(this));
				}
			}
		};

		ProductDetail.prototype.sendLoadReviewsRequest = function (currentReviewCount, callback) {
			var $pdpRow6, loadMoreURL, masterID, url;
			if (callback == null) {
				callback = null;
			}
			if (this.$pdpRow6.length !== 0) {
				$pdpRow6 = this.$pdpRow6;
				loadMoreURL = $pdpRow6.data('loadinitialurl');
				masterID = $pdpRow6.data('pid');
				if (masterID && typeof masterID === 'string') {
					masterID = masterID.replace('seasonal', '');
				}
				url = loadMoreURL;
				url += '?format=ajax&pid=' + masterID + '&offset=' + currentReviewCount;
				return $.ajax({
					type: "GET",
					url: url,
					success: (function (_this) {
						return function (response) {
							$("#pdp-row-6").append($(response));
							if (typeof callback === 'function') {
								return callback();
							}
						};
					})(this)
				});
			}
		};

		ProductDetail.getInstance = function () {
			return new ProductDetail();
		}

		return ProductDetail;

	})();
});



define('UI.View.QuantityControls', ['lodash', 'jquery', 'TweenLite', 'TimelineLite', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton', 'UI.View.FormUtilities'], function (_, $, TweenLite, TimelineLite, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus, UIFormUtilities) {
	var UIQuantityControls;
	UIQuantityControls = (function () {
		function UIQuantityControls() {
			this.updateControlStates = bind(this.updateControlStates, this);
			this.updateLineItemQty = bind(this.updateLineItemQty, this);
			this.setUpControlSets = bind(this.setUpControlSets, this);
			this.initialize = bind(this.initialize, this);
			this.hasInitialized = false;
			this.$document = $(document);
			this.$window = $(document.defaultView);
		}

		UIQuantityControls.prototype.initialize = function () {
			var $document, $window;
			if (this.hasInitialized) {
				return false;
			}
			this.hasInitialized = true;
			$document = this.$document;
			return $window = this.$window;
		};

		UIQuantityControls.prototype.setUpControlSets = function ($sectionWrapper, isInCart, updateQuantiyCallback) {
			var $qtySelectors, lessClass, moreClass, qtyControlClass, removeSelector;
			$sectionWrapper = $($sectionWrapper);
			qtyControlClass = ' .quantity-controls';
			removeSelector = ' .remove-from-cart-col a';
			lessClass = ' .less';
			moreClass = ' .more';
			$qtySelectors = $sectionWrapper.find(qtyControlClass);
			if ($qtySelectors.length === 0) {
				return false;
			}
			$qtySelectors.each((function (_this) {
				return function (index) {
					var $oneQtyInput, $qtySelector;
					$qtySelector = $($qtySelectors[index]);
					$oneQtyInput = $qtySelector.find('input');
					return _this.updateControlStates($oneQtyInput);
				};
			})(this));
			$sectionWrapper.on('click', lessClass + ',' + moreClass, (function (_this) {
				return function (e) {
					var $qtyControl, $qtyInput, origQty, qtyChange;
					e.preventDefault();
					$qtyControl = $(e.currentTarget);
					qtyChange = $qtyControl.data('qty-change');
					$qtyInput = $qtyControl.parent().find('input');
					origQty = parseInt($qtyInput.val());
					return _this.updateLineItemQty(origQty, qtyChange, $qtyInput);
				};
			})(this));
			$sectionWrapper.on('keyup', qtyControlClass + ' input', (function (_this) {
				return function (e) {
					var $qtyInput, code, origQty;
					$qtyInput = $(e.currentTarget);
					origQty = parseInt($qtyInput.val());
					code = e.keyCode || e.which;
					if (code !== 13) {
						return _this.updateLineItemQty(origQty, 0, $qtyInput);
					}
				};
			})(this));
			$sectionWrapper.on('keyup keypress', qtyControlClass + ' input', (function (_this) {
				return function (e) {
					var code;
					code = e.keyCode || e.which;
					if (code === 13) {
						e.preventDefault();
						return false;
					}
				};
			})(this));
			if (isInCart) {
				$sectionWrapper.on('blur', qtyControlClass + ' input', (function (_this) {
					return function (e) {
						var $qtyInput, origQty;
						$qtyInput = $(e.currentTarget);
						origQty = parseInt($qtyInput.val());
						return _this.sendQtyUpdate($qtyInput);
					};
				})(this));
				return $sectionWrapper.on('click', removeSelector, (function (_this) {
					return function (e) {
						var $parentCartItem, $qtyInput, $removeCTA;
						e.preventDefault();
						$removeCTA = $(e.currentTarget);
						$parentCartItem = $removeCTA.parentsUntil('.cart-item-right-col').parent();
						$qtyInput = $parentCartItem.find(qtyControlClass + ' input');
						$qtyInput.val(0);
						return _this.sendQtyUpdate($qtyInput);
					};
				})(this));
			}
		};

		UIQuantityControls.prototype.updateLineItemQty = function (inputQty, qtyChange, $qtyInput) {
			var $form, $orderActions, inputLength, maxVal, minVal, msgVal, newQty, previousQty, templateString;
			$qtyInput = $($qtyInput);
			previousQty = parseInt($qtyInput.data('previous-qty'));
			minVal = parseInt($qtyInput.data('min-val'));
			maxVal = typeof $qtyInput.data('max-val') === "undefined" ? -1 : parseInt($qtyInput.data('max-val'));
			inputLength = $.trim($qtyInput.val()).length;
			if (inputLength === 0) {
				$qtyInput.val('');
				return true;
			}
			if (isNaN(inputQty)) {
				$qtyInput.val(previousQty);
				return false;
			}
			newQty = inputQty + qtyChange;
			if (newQty < minVal) {
				newQty = minVal;
			}
			$form = $qtyInput.closest('form');
			$form.closest('.order-actions').find('.qty-msg').remove();
			if (maxVal >= 0 && newQty > maxVal) {
				$orderActions = $form.closest('.order-actions');
				if (maxVal) {
					templateString = window.Resources.MAX_ORDER_FORMS;
					msgVal = maxVal;
				} else {
					templateString = window.Resources.MAX_ORDER_FORMS_ADDED;
					msgVal = $qtyInput.data('limit');
				}
				$('<div class="row qty-msg fonts-copy">' + jQuery.validator.format(templateString, msgVal) + window.Resources.MAX_ORDER_FORMS_HOWMANY + '</div>').appendTo($form.closest('.order-actions'));
				newQty = maxVal || 1;
			}
			$qtyInput.val(newQty);
			$qtyInput.text(newQty);
			$qtyInput.data('previous-qty', newQty);
			$qtyInput.trigger('change');
			this.updateControlStates($qtyInput, newQty);
			return true;
		};

		UIQuantityControls.prototype.updateControlStates = function ($qtyInput, newQty) {
			var $lessControl, $moreControl, $qtyControlRow, maxVal, minVal;
			if (newQty == null) {
				newQty = -1;
			}
			$qtyControlRow = $qtyInput.parent().parent();
			$lessControl = $qtyControlRow.find('.less');
			$moreControl = $qtyControlRow.find('.more');
			minVal = parseInt($qtyInput.data('min-val'));
			maxVal = parseInt($qtyInput.data('max-val'));
			if (newQty === -1) {
				newQty = parseInt($qtyInput.data('previous-qty'));
			}
			if (newQty > minVal) {
				$lessControl.addClass('active');
			} else {
				$lessControl.removeClass('active');
			}
			if (newQty < maxVal) {
				$moreControl.addClass('active');
			} else {
				$moreControl.removeClass('active');
			}
		};

		return UIQuantityControls;

	})();
	UIQuantityControls = new UIQuantityControls();
	UIQuantityControls.initialize();
	return UIQuantityControls;
});

define('UI.View.ReCaptcha', ['jquery'], function ($) {
	var ReCaptcha;
	return ReCaptcha = (function () {
		function ReCaptcha() {
			this.$cta = $('.cta button.disabled-for-loading');
			this.$captchaContainer = $('.captcha-container');
		}

		ReCaptcha.prototype.initialize = function () {
			window.recaptchaCallback = (function (_this) {
				return function () {
					return _this.$cta.removeClass('disabled-for-loading');
				};
			})(this);
			if (this.$captchaContainer.length) {
				return window.onloadCallback = (function (_this) {
					return function () {
						return grecaptcha.render(_this.$captchaContainer.get(0), {
							sitekey: _this.$captchaContainer.attr('data-sitekey'),
							callback: window.recaptchaCallback
						});
					};
				})(this);
			}
		};

		return ReCaptcha;

	})();
});



define('UI.View.SearchResults', ['jquery', 'TweenLite', 'TimelineLite', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton', 'UI.View.LoadingUtil', 'UI.View.FormUtilities', 'Util.Browser', 'dataLayer'], function ($, TweenLite, TimelineLite, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus, LoadingUtil, FormUtil, BrowserUtil, dataLayer) {
	var UISearchResults;
	return UISearchResults = (function () {
		function UISearchResults() {
			this.initLoadMore = bind(this.initLoadMore, this);
			this.initCategoryRefinements = bind(this.initCategoryRefinements, this);
			this.initMobileRefinements = bind(this.initMobileRefinements, this);
			this.sendRefinementRequest = bind(this.sendRefinementRequest, this);
			this.initRefineMentsBar = bind(this.initRefineMentsBar, this);
			this.initResultToggle = bind(this.initResultToggle, this);
			this.initLoadState = bind(this.initLoadState, this);
			this.showContentTab = bind(this.showContentTab, this);
			this.showProductsTab = bind(this.showProductsTab, this);
			this.removeParam = bind(this.removeParam, this);
			this.showProductsTabAndRefine = bind(this.showProductsTabAndRefine, this);
			this.onPopHistoryState = bind(this.onPopHistoryState, this);
			this.pushHistoryState = bind(this.pushHistoryState, this);
			this.initCarouselTiles = bind(this.initCarouselTiles, this);
			this.initScrollToTop = bind(this.initScrollToTop, this);
			this.$bodyAndHTML = $('body , html');
			this.$main = $('#main');
			this.$searchResultsWrapper = this.$main.find('#search-results-wrapper');
			if (!this.$searchResultsWrapper.length) {
				return;
			}
			this.$refinementsWrapper = this.$main.find('#search-refinement-bar');
			this.$categoryFilters = this.$refinementsWrapper.find('.category-filter.top-level.has-sub-cats');
			this.activeClassName = 'active';
			this.carouselAnimateTime = .25;
			this.allProductsLoaded = false;
			this.historyObj = {
				active: "",
				previous: ""
			};
		}

		UISearchResults.prototype.initialize = function () {
			var data, idArr, j, len, priceArr, ref, row;
			if (!this.$searchResultsWrapper.length) {
				return false;
			}
			this.FormUtil = new FormUtil();
			this.initCarouselTiles();
			this.initLoadMore();
			this.initRefineMentsBar();
			this.initMobileRefinements();
			this.initResultToggle();
			this.initScrollToTop();
			this.initCategoryRefinements();
			window.onpopstate = (function (_this) {
				return function (event) {
					return _this.onPopHistoryState(event);
				};
			})(this);
			this.initLoadState();
			this.$items = $('.product-tile-info');
			idArr = [];
			priceArr = [];
			ref = this.$items;
			for (j = 0, len = ref.length; j < len; j++) {
				row = ref[j];
				data = $(row).data('productinfo');
				idArr.push(data.id);
				priceArr.push(parseFloat(data.price));
			}
			dataLayer.push({
				google_tag_params: {
					ecomm_totalvalue: priceArr,
					ecomm_prodid: idArr,
					ecomm_pagetype: 'searchresults'
				}
			});
			return true;
		};

		UISearchResults.prototype.initScrollToTop = function () {
			var $backToTopCTA, $bodyAndHTML, $main, activeClassName, animateMoveMS, bufferFromBottom, heightToShow, scrollToTopMS;
			heightToShow = 360;
			bufferFromBottom = 20;
			animateMoveMS = .35;
			scrollToTopMS = 1.25;
			activeClassName = this.activeClassName;
			$bodyAndHTML = this.$bodyAndHTML;
			$main = this.$main;
			$backToTopCTA = $main.find('#back-to-top-cta');
			$backToTopCTA.on('click', (function (_this) {
				return function (e) {
					var $wrap;
					e.preventDefault();
					$wrap = $(e.currentTarget);
					return TweenLite.to([document.documentElement, document.body], 1.25, {
						scrollTop: 0,
						ease: Expo.easeOut
					});
				};
			})(this));
			FluxApp.stores.BrowserStore.on('change', (function (_this) {
				return function () {
					var browserState, scrollBottom, scrollTop;
					browserState = FluxApp.stores.BrowserStore.getState().properties;
					scrollTop = browserState.scrollTop;
					scrollBottom = browserState.scrollBottom;
					if ($backToTopCTA.length !== 0) {
						if (scrollTop >= heightToShow && !$backToTopCTA.hasClass(activeClassName)) {
							TweenLite.to($backToTopCTA, animateMoveMS, {
								opacity: 1
							});
							return $backToTopCTA.addClass(activeClassName);
						} else if (scrollTop < heightToShow && $backToTopCTA.hasClass('active')) {
							TweenLite.to($backToTopCTA, animateMoveMS, {
								opacity: 0
							});
							return $backToTopCTA.removeClass(activeClassName);
						}
					}
				};
			})(this));
		};

		UISearchResults.prototype.initCarouselTiles = function () {
			var $gridTiles, $searchResultsGrid;
			$searchResultsGrid = this.$searchResultsWrapper.find('#search-results-grid');
			if ($searchResultsGrid.length === 0) {
				return false;
			}
			$gridTiles = $searchResultsGrid.find('.default-tile , .small-tile , .large-tile, .pieces-tile').not('.carousel-loaded');
			$gridTiles.each((function (_this) {
				return function (index) {
					var $carousel, $gridTile;
					$gridTile = $($gridTiles[index]);
					$carousel = $gridTiles.find('.product-tile-carousel');
					$carousel.on('init', function (slick, direction) {
						return $gridTile.addClass('carousel-loaded');
					});

					return $carousel.slick({
						infinite: false,
						slidesToShow: 1,
						slidesToScroll: 1,
						waitForAnimate: false,
						arrows: false,
						dots: true
					});
				};
			})(this));
			return true;
		};

		UISearchResults.prototype.pushHistoryState = function (newStateName, newHref) {
			if (!('pushState' in window.history)) {
				return true;
			}

			if (this.historyObj['active'] !== newStateName || newStateName === 'refinement') {
				this.historyObj['previous'] = this.historyObj['active'];
				this.historyObj['active'] = newStateName;
				return window.history.pushState(this.historyObj, '', newHref);
			}
		};

		UISearchResults.prototype.onPopHistoryState = function () {
			var callbacks, newHref, poppedStateName;
			callbacks = {
				'content': this.showContentTab,
				'products': this.showProductsTabAndRefine,
				'refinement': this.showProductsTabAndRefine
			};
			poppedStateName = '';
			newHref = document.location.href;
			this.historyObj['previous'] = this.historyObj['active'];
			if ((typeof event !== "undefined" && event !== null) && (event.state != null) && event.state.hasOwnProperty('active')) {
				poppedStateName = event.state['active'];
				this.historyObj['active'] = event.state['active'];
				return callbacks[poppedStateName](newHref);
			} else {
				if (document.location.href.indexOf('resultType=content') !== -1) {
					poppedStateName = 'content';
				} else {
					if (this.historyObj['previous'] === 'content') {
						poppedStateName = 'products';
					} else {
						poppedStateName = 'refinement';
					}
				}
				this.historyObj['active'] = poppedStateName;
				return callbacks[poppedStateName](newHref);
			}
		};

		UISearchResults.prototype.showProductsTabAndRefine = function (newHref) {
			var $searchResultsWrapper;
			$searchResultsWrapper = this.$searchResultsWrapper;
			if ($searchResultsWrapper.hasClass('hide')) {
				return this.showProductsTab(newHref);
			} else {
				return this.sendRefinementRequest(newHref);
			}
		};

		UISearchResults.prototype.removeParam = function (key, sourceURL) {
			var i, param, params_arr, queryString, rtn;
			rtn = sourceURL.split("?")[0];
			param;
			params_arr = [];
			queryString = "";
			if (sourceURL.indexOf("?") !== -1) {
				queryString = sourceURL.split("?")[1];
			}
			if (queryString !== "") {
				params_arr = queryString.split("&");
				i = params_arr.length - 1;
				while (i >= 0) {
					param = params_arr[i].split("=")[0];
					if (param === key) {
						params_arr.splice(i, 1);
					}
					i -= 1;
				}
				rtn = rtn + "?" + params_arr.join("&");
			}
			return rtn;
		};

		UISearchResults.prototype.showProductsTab = function (url) {
			var $contentResultsList, $searchResultsWrapper, $showContent, $showProducts, resultToggle;
			resultToggle = this.$main.find('.search-header-toggle');
			$showProducts = resultToggle.find('#show-product-results');
			$showContent = resultToggle.find('#show-content-results');
			$searchResultsWrapper = this.$searchResultsWrapper;
			$contentResultsList = this.$main.find('#content-results-wrapper');
			$contentResultsList.addClass('hide');
			$showContent.removeClass('active');
			$showProducts.addClass('active');
			return $searchResultsWrapper.removeClass('hide');
		};

		UISearchResults.prototype.showContentTab = function (url) {
			var $contentResultsList, $searchResultsWrapper, $showContent, $showProducts, resultToggle;
			resultToggle = this.$main.find('.search-header-toggle');
			$showProducts = resultToggle.find('#show-product-results');
			$showContent = resultToggle.find('#show-content-results');
			$searchResultsWrapper = this.$searchResultsWrapper;
			$contentResultsList = this.$main.find('#content-results-wrapper');
			$searchResultsWrapper.addClass('hide');
			$showProducts.removeClass('active');
			$showContent.addClass('active');
			return $contentResultsList.removeClass('hide');
		};

		UISearchResults.prototype.initLoadState = function () {
			var $contentResultsList;
			$contentResultsList = this.$main.find('#content-results-wrapper');
			if ($contentResultsList.length && !$contentResultsList.hasClass('hide')) {
				return this.historyObj['active'] = 'content';
			} else {
				return this.historyObj['active'] = 'products';
			}
		};

		UISearchResults.prototype.initResultToggle = function () {
			var resultToggle, showContentID, showProductsID;
			resultToggle = this.$main.find('.search-header-toggle');
			showProductsID = '#show-product-results';
			showContentID = '#show-content-results';
			this.$main.on('click', showProductsID, (function (_this) {
				return function (e) {
					var newHref;
					e.preventDefault();
					newHref = _this.removeParam('resultType', window.location.href);
					_this.pushHistoryState('products', newHref);
					return _this.showProductsTab();
				};
			})(this));
			return this.$main.on('click', showContentID, (function (_this) {
				return function (e) {
					var newHref;
					e.preventDefault();
					newHref = _this.removeParam('resultType', window.location.href);
					newHref = newHref + '&resultType=content';
					_this.pushHistoryState('content', newHref);
					return _this.showContentTab();
				};
			})(this));
		};

		UISearchResults.prototype.initRefineMentsBar = function () {
			var $currentAttributeFilters, $currentResultsCount, $refinementsWrapper, $resetLinkWrapper, $searchResultsGrid, currentSortSelectClass, refinementLinkClass;
			$refinementsWrapper = this.$refinementsWrapper;
			$currentAttributeFilters = $refinementsWrapper.find('#attribute-filters');
			$currentResultsCount = this.$searchResultsWrapper.find('.results-count');
			$searchResultsGrid = this.$searchResultsWrapper.find('#search-results-grid');
			$resetLinkWrapper = $refinementsWrapper.find('.reset-refinements');
			currentSortSelectClass = '.search-result-options select';
			refinementLinkClass = 'refinement-link';
			FormUtil = this.FormUtil;
			$refinementsWrapper.on('click', '.' + refinementLinkClass, (function (_this) {
				return function (e) {
					var $refinementLink, refineURL;
					$refinementLink = $(e.currentTarget);
					if (!$refinementLink.hasClass('refinement-imposter')) {
						e.preventDefault();
						dataLayer.push({
							event: 'filter',
							action: $refinementLink.closest('.refinement').data('att-id'),
							value: $refinementLink.text(),
							detail: window.pageContext.category
						});
						refineURL = $refinementLink.attr('href');
						_this.sendRefinementRequest(refineURL);
						return _this.pushHistoryState('refinement', refineURL);
					}
				};
			})(this));
			$searchResultsGrid.on('change', currentSortSelectClass, (function (_this) {
				return function (e) {
					var $refinementOption, refineURL;
					e.preventDefault();
					$refinementOption = $(e.currentTarget);
					dataLayer.push({
						event: 'sort',
						value: $refinementOption.find('option:selected').text(),
						detail: window.pageContext.category
					});
					refineURL = $refinementOption.val();
					_this.sendRefinementRequest(refineURL);
					return _this.pushHistoryState('refinement', refineURL);
				};
			})(this));
			$resetLinkWrapper.on('click', 'a', (function (_this) {
				return function (e) {
					var $resetLink, refineURL;
					e.preventDefault();
					$resetLink = $(e.currentTarget);
					refineURL = $resetLink.attr('href');
					if ('pushState' in window.history && refineURL === document.location.href) {
						return;
					}
					dataLayer.push({
						event: 'filter',
						action: 'reset',
						value: 'reset',
						detail: window.pageContext.category
					});
					_this.sendRefinementRequest(refineURL);
					return _this.pushHistoryState('refinement', refineURL);
				};
			})(this));
			$refinementsWrapper.on('click', '.refinement-set h3', (function (_this) {
				return function (e) {
					var $refinementSetHeader;
					e.preventDefault();
					$refinementSetHeader = $(e.currentTarget);
					$refinementSetHeader.parent().toggleClass('active');
					return false;
				};
			})(this));
			return true;
		};

		UISearchResults.prototype.sendRefinementRequest = function (refineURL) {
			var $currentAttributeFilters, $currentResultsCount, $currentSortSelect, $refinementsWrapper, $resetLinkWrapper, $searchResultsGrid, refinementLinkClass;
			$refinementsWrapper = this.$refinementsWrapper;
			$currentAttributeFilters = $refinementsWrapper.find('#attribute-filters');
			$currentResultsCount = this.$searchResultsWrapper.find('.results-count');
			$searchResultsGrid = this.$searchResultsWrapper.find('#search-results-grid');
			$resetLinkWrapper = $refinementsWrapper.find('.reset-refinements');
			$currentSortSelect = '.search-result-options .selectbox-sub';
			refinementLinkClass = 'refinement-link';
			FormUtil = this.FormUtil;
			if (refineURL.indexOf('?') === -1) {
				refineURL += '?';
			} else {
				refineURL += '&';
			}
			refineURL += "format=ajax";
			return $.ajax({
				type: "GET",
				url: refineURL,
				data: {},
				error: (function (_this) {
					return function (request, status, error) {
						console.log('error - ');
						console.log(error);
					};
				})(this),
				success: (function (_this) {
					return function (response) {
						var $ajaxAttributeFilters, $ajaxResetRefinements, $ajaxResultWrapper, $ajaxResultsCount, $ajaxResultsGrid, $newSortSelect, $noResultsMessage, $response;
						$response = $(response);
						$ajaxResultWrapper = $response.filter('#search-results-wrapper');
						$ajaxAttributeFilters = $ajaxResultWrapper.find('#attribute-filters');
						$ajaxResultsCount = $ajaxResultWrapper.find('.results-count');
						$ajaxResultsGrid = $ajaxResultWrapper.find('#search-results-grid');
						$ajaxResetRefinements = $ajaxResultWrapper.find('.reset-refinements');
						if ($ajaxResultsGrid.length === 0) {
							$noResultsMessage = $ajaxResultWrapper.find('.no-product-results-wrapper');
							$searchResultsGrid.html($noResultsMessage.html());
							$currentResultsCount.html($ajaxResultsCount.html());
						} else {
							$currentAttributeFilters.html($ajaxAttributeFilters.html());
							$currentResultsCount.html($ajaxResultsCount.html());
							$searchResultsGrid.html($ajaxResultsGrid.html());
							$resetLinkWrapper.html($ajaxResetRefinements.html());
							$newSortSelect = $searchResultsGrid.find('.form-row.selectbox');
							FormUtil.addCustomSelectbox($newSortSelect);
							_this.initCarouselTiles();
						}
					};
				})(this)
			});
		};

		UISearchResults.prototype.initMobileRefinements = function () {
			var $refinementsMain, $refinementsMobileHeader, $refinementsWrapper;
			$refinementsWrapper = this.$refinementsWrapper;
			$refinementsMobileHeader = $refinementsWrapper.find('.search-refinement-mobile-header');
			$refinementsMain = $refinementsWrapper.find('.search-refinements-main');
			if ($refinementsMobileHeader.length) {
				$refinementsMobileHeader.on('click', (function (_this) {
					return function (e) {
						return $refinementsWrapper.toggleClass('active');
					};
				})(this));
			}
			return true;
		};

		UISearchResults.prototype.initCategoryRefinements = function () {
			return this.$categoryFilters.each((function (_this) {
				return function (k, el) {
					var $el;
					$el = $(el);
					return $el.find('> a').on('click', function (e) {
						e.preventDefault();
						return $el.toggleClass('expanded');
					});
				};
			})(this));
		};

		UISearchResults.prototype.initLoadMore = function () {
			var $searchResultsGrid, loadMoreCTAClass, loadingProducts;
			$searchResultsGrid = this.$searchResultsWrapper.find('#search-results-grid');
			loadMoreCTAClass = '#load-more-products';
			loadingProducts = false;
			$searchResultsGrid.on('click', loadMoreCTAClass, (function (_this) {
				return function (e) {
					var $loadMoreCTA, $searchResultsItems, numCurrentProducts, productsPerPage, totalProducts, url;
					e.preventDefault();
					loadingProducts = true;
					$loadMoreCTA = $(e.currentTarget);
					url = $loadMoreCTA.data('url');
					productsPerPage = parseInt($loadMoreCTA.data('productsperpage'));
					totalProducts = parseInt($loadMoreCTA.data('totalproducts'));

					if ($('#ContentCountPerPageArray').length) {
						var ContentCountPerPageArray = $('#ContentCountPerPageArray').val();
						var gridPage = parseInt($('#gridPage').val()) + 1;
						$('#gridPage').val(gridPage);
						var contentCount = ContentCountPerPageArray.split(',');
					}

					$searchResultsItems = $searchResultsGrid.find('#search-result-items');
					numCurrentProducts = $searchResultsItems.find('.grid-tile').length;

					if ($('#ContentCountPerPageArray').length) {
						for (j = 0; j < gridPage; j++) {
							numCurrentProducts = numCurrentProducts - contentCount[j];
						}
					}

					LoadingUtil.disableElement($loadMoreCTA, $loadMoreCTA);

					return $.ajax({
						type: "GET",
						url: url,
						data: {},
						error: function (request, status, error) {
							console.log('error loading products');
							LoadingUtil.enableElement($loadMoreCTA, $loadMoreCTA);
							loadingProducts = false;
						},
						success: function (response) {
							var $responseGridTiles, $responseSearchItems, numResponseProducts, $responseLoadMore;
							$responseSearchItems = $(response);
							$responseLoadMore = $responseSearchItems.find('#load-more-products');
							$responseGridTiles = $responseSearchItems.find('.grid-tile');
							numResponseProducts = $responseGridTiles.length;
							if (numResponseProducts > 0) {
								$searchResultsItems.append($responseGridTiles);
							}

							if ($responseLoadMore.length) {
								$loadMoreCTA.data('url', $responseLoadMore.data('url'));
							}
							else {
								$loadMoreCTA.remove();
							}

							_this.initCarouselTiles();
							LoadingUtil.enableElement($searchResultsItems, $loadMoreCTA);
							loadingProducts = false;
						},
						complete: function (jqXHR, textStatus) { }
					});
				};
			})(this));
			return FluxApp.stores.BrowserStore.on('change', (function (_this) {
				return function () {
					var $loadMoreLocalRef, $main, atTriggerHeight, browserState, scrollBottom, scrollTop, triggerHeight, triggerOffset;
					$loadMoreLocalRef = $searchResultsGrid.find(loadMoreCTAClass).filter(':visible');
					if ($loadMoreLocalRef.length === 0) {
						return false;
					}
					browserState = FluxApp.stores.BrowserStore.getState().properties;
					scrollTop = browserState.scrollTop;
					scrollBottom = browserState.scrollBottom;
					triggerOffset = 400;
					$main = _this.$main;
					triggerHeight = $main.offset().top + $main.height() - triggerOffset;
					atTriggerHeight = scrollBottom > triggerHeight;
					if (!loadingProducts && atTriggerHeight) {
						return $loadMoreLocalRef.trigger('click');
					}
				};
			})(this));
		};

		return UISearchResults;

	})();
});


/*
 * updateCarouselState: => return false;
 */


/*
 * carousel.on 'mouseenter', (e) => activeCarousel = $ e.currentTarget
 * activeCarousel.slick( 'slickGoTo' , 1 , false )
 * #activeCarousel.css('background-color','teal') carousel.on 'mouseleave', (e) =>
 * activeCarousel = $ e.currentTarget activeCarousel.slick( 'slickGoTo' , 0 ,
 * false ) #activeCarousel.css('background-color','pink')
 */


/*
 * Testing Load More scroll #console.log 'theight - ' + triggerHeight + ' - ' +
 * typeof triggerHeight #console.log 'sBot - ' + scrollBottom + ' - ' + typeof
 * scrollBottom #console.log 'atTHeight - ' + atTriggerHeight
 */



define('UI.View.SendToFriend', ['jquery', 'UI.View.Dialogs', 'UI.View.FormUtilities', 'dataLayer'], function ($, UIDialogs, UIFormUtilities, dataLayer) {
	var UISendToFriend;
	return UISendToFriend = (function () {
		function UISendToFriend() {
			this.previewSendSuccess = bind(this.previewSendSuccess, this);
			this.previewSuccess = bind(this.previewSuccess, this);
			this.validateSuccess = bind(this.validateSuccess, this);
			this.requestContent = bind(this.requestContent, this);
			this.handleSuccess = bind(this.handleSuccess, this);
		}

		UISendToFriend.prototype.initialize = function () {
			var url;
			url = window.Urls.sendToFriendShow + "&pid=" + window.location.href.split("/").pop().split('.html')[0] + "&format=ajax";
			return $('.send-to-friend').on('click', (function (_this) {
				return function (e) {
					e.preventDefault();
					dataLayer.push({
						event: 'socialInt',
						socialNetwork: 'E-mail',
						socialAction: 'E-mail',
						socialTarget: url
					});
					return $.ajax({
						type: "POST",
						url: url,
						success: function (response) {
							return _this.handleSuccess(response, url);
						}
					});
				};
			})(this));
		};

		UISendToFriend.prototype.handleSuccess = function (response, url) {
			var $footer, FormUtilities, dialogSettings, elementBody, newEle;
			newEle = $(document.createElement('div'));
			elementBody = newEle.html(response);
			dialogSettings = {
				title: 'Send To A Friend',
				showAsRequired: true,
				body: elementBody,
				submitText: 'Sign Up',
				openCallback: (function (_this) {
					return function (dialogID) { };
				})(this),
				closeCallback: function () { },
				submitCallback: function (callToClose) { }
			};
			UIDialogs.prompt(dialogSettings);
			$('.sees-dialog-content').addClass('sendtofriend-dialog-content');
			FormUtilities = new UIFormUtilities;
			FormUtilities.initialize();
			$('.form-row-button button, .sendtofriend-dialog-footer a').on('click', (function (_this) {
				return function (e) {
					return e.preventDefault();
				};
			})(this));
			$footer = $('.sees-dialog-content');
			$footer.on('click', '.send-button, .edit-button', (function (_this) {
				return function () {
					return _this.requestContent(true, window.Urls.sendToFriendSubmit, _this.validateSuccess);
				};
			})(this));
			$footer.on('click', '.preview-button', (function (_this) {
				return function () {
					return _this.requestContent(true, window.Urls.sendToFriendPreview, _this.previewSuccess);
				};
			})(this));
			return $footer.on('click', '.send-button-direct', (function (_this) {
				return function () {
					return _this.requestContent(false, window.Urls.sendToFriendSubmit, _this.previewSendSuccess);
				};
			})(this));
		};

		UISendToFriend.prototype.validateForm = function () {
			var $friendsemail, $modal, emailTest, validated;
			validated = true;
			$modal = $('.sees-dialog-content');
			$modal.find('input.required').each(function () {
				var $el;
				$el = $(this);
				if ($el.val().length === 0) {
					return validated = false;
				}
			});
			$friendsemail = $modal.find('#dwfrm_sendtofriend_friendsemail').val();
			emailTest = new RegExp("^[\\w-\.]{1,}\@([\\da-zA-Z-]{1,}\.){1,}[\\da-zA-Z-]{2,3}$");
			if (!emailTest.test($friendsemail)) {
				validated = false;
			}
			if ($friendsemail !== $modal.find('#dwfrm_sendtofriend_confirmfriendsemail').val()) {
				validated = null;
			}
			return validated;
		};

		UISendToFriend.prototype.requestContent = function (validate, url, successHandler) {
			var postData, showConfirmationMessage, urlValue, validated;
			postData = $('#send-to-friend-form').serializeArray();
			urlValue = url;
			if (validate) {
				validated = this.validateForm();
				if (validated) {
					urlValue = url;
				} else {
					urlValue = window.Urls.sendToFriendRenderForm;
					if (validated === null) {
						showConfirmationMessage = true;
					}
				}
			}
			return $.ajax({
				type: "POST",
				url: urlValue,
				data: postData,
				success: (function (_this) {
					return function (response) {
						var $dialog, $errorMessage, FormUtilities;
						FormUtilities = new UIFormUtilities;
						FormUtilities.initialize();
						$dialog = $('.sees-dialog-content');
						$dialog.find('.dialog-main').html(response);
						if (showConfirmationMessage) {
							$errorMessage = $('#dwfrm_sendtofriend_confirmfriendsemail').parent().find('.form-caption');
							$errorMessage.addClass('error-message');
							$errorMessage.html(window.Resources.EMAIL_MISMATCH);
						}
						return successHandler($dialog, validated);
					};
				})(this)
			});
		};

		UISendToFriend.prototype.validateSuccess = function ($dialog, validated) {
			if (validated) {
				$dialog.find('.account-button').hide();
				$dialog.find('.close-dialog').css('display', 'inline-block');
				return $dialog.addClass('small-dialog');
			} else {
				$dialog.find('.edit-button').hide();
				return $dialog.find('.preview-button').show();
			}
		};

		UISendToFriend.prototype.previewSuccess = function ($dialog, validated) {
			if (validated) {
				$dialog.find('.preview-button').hide();
				$dialog.find('.edit-button').css('display', 'inline-block');
				return $dialog.find('.send-button').removeClass('send-button').addClass('send-button-direct');
			}
		};

		UISendToFriend.prototype.previewSendSuccess = function ($dialog, validated) {
			$dialog.find('.account-button').hide();
			$dialog.find('.close-dialog').css('display', 'inline-block');
			return $dialog.addClass('small-dialog');
		};

		return UISendToFriend;

	})();
});

var bind1 = function (fn, me) { return function () { return fn.apply(me, arguments); }; };

define('UI.View.SiteFooter', ['jquery', 'ViewportCommandBusSingleton', 'dataLayer'], function ($, ViewportCommandBus, dataLayer) {
	var UISiteFooter;
	return UISiteFooter = (function () {
		function UISiteFooter() {
			this.$siteFooter = $('#site-footer');
			this.socialSelector = '.social-links a[data-ga-network]';
		}

		UISiteFooter.prototype.initialize = function () {
			return this.$siteFooter.on('click', this.socialSelector, (function (_this) {
				return function (e) {
					var $socialLink;
					$socialLink = $(e.currentTarget);
					dataLayer.push({
						event: 'socialInt',
						socialNetwork: $socialLink.data('ga-network'),
						socialAction: 'Follow',
						socialTarget: $socialLink.attr('href')
					});
				};
			})(this));
		};

		return UISiteFooter;

	})();
});

var hasProp = {}.hasOwnProperty;

define('UI.View.ValidateAddress', ['jquery', 'UI.View.Notification'], function ($, UINotification) {

	function UIValidateAddress() {
		this.UINotification = new UINotification();
		this.init();
	}

	UIValidateAddress.prototype.init = function () {
		$.validator.setDefaults({
			ignore: ':hidden:not(.address input)'
		});

		$.validator.addMethod("uspostal", UIValidateAddress.validatePostalCode, Resources.INVALID_ZIP);
		$.validator.addMethod("rxvalidate", UIValidateAddress.validateField, Resources.INVALID_FIELD);
		$.validator.addMethod("phoneext", UIValidateAddress.validatePhoneExtension, Resources.INVALID_EXT);
		$.validator.addMethod("usstreet", UIValidateAddress.validateStreet, Resources.INVALID_STREET);
		$.validator.addMethod("giftmsg", UIValidateAddress.validateGiftMsg, Resources.INVALID_GIFT_MESSAGE || 'Invalid characters in message');
		$.validator.addClassRules({
			"postal": {
				required: true,
				uspostal: true
			},
			"address1": {
				required: true,
				usstreet: true
			},
			"phoneext": {
				required: false,
				phoneext: true
			},
			"street1": {
				required: true,
				usstreet: true
			},
			"rxvalidate": {
				rxvalidate: true
			}
		});

		return this;
	};

	UIValidateAddress.prototype.validate = function ($form, $ctnr, includeHidden) {
		return $form.validate({
			ignore: includeHidden ? [] : ':hidden',
			invalidHandler: function (form, validator) {
				var oError;

				$ctnr = $ctnr || $('html, body');

				if (!validator.numberOfInvalids() || !validator.errorList.length) {
					return;
				}

				// safety code
				oError = _.find(validator.errorList, function (item) { return !!item && !!item.element; });

				if (!oError) {
					return;
				}

				$ctnr.animate({
					scrollTop: $(oError.element).position().top - $('#site-header').outerHeight()
				}, 250, function () {
					validator.focusInvalid();
				});

			}
		});
	}

	UIValidateAddress.validateField = function (value, element, params) {
		var optional = this.optional(element);
		var val = $(element).val();

		return this.optional(element) || !$(element).data('pattern') || (new RegExp($(element).data('pattern'))).test(value);
	};

	UIValidateAddress.validatePostalCode = function (value, element, params) {
		return this.optional(element) || UIValidateAddress.validateField.apply(this, arguments) || /^((\d{5})|(\d{5}-\d{4})|(\d{9}))$/.test(value);
	};

	UIValidateAddress.validatePhoneExtension = function (value, element, params) {
		return this.optional(element) || !$(element).data('pattern') || (new RegExp($(element).data('pattern'))).test(value);
	};

	UIValidateAddress.validateStreet = function (value, element, params) {
		if (/^\d+$/.test($.trim(value || ''))) {
			$(element).rules('add', { messages: { usstreet: Resources.INVALID_STREET_NAME } });
			return false;
		}

		return this.optional(element) || UIValidateAddress.validateField.apply(this, arguments) || /^[0-9A-Za-z \/\.,#'-]*[A-Za-z][0-9A-Za-z \/\.,#'-]*$/.test(value);
	};

	UIValidateAddress.validateGiftMsg = UIValidateAddress.validateField;

	UIValidateAddress.validateForm = function ($form, $ctnr, includeHidden) {
		return (new UIValidateAddress()).validate($form, $ctnr, includeHidden);
	}

	return UIValidateAddress
});

define('UI.View.VerifyAddress', ['jquery', 'UI.View.Dialogs', 'UI.View.LoadingUtil', 'UI.View.AlignmentUtil', 'UI.View.Notification', 'Util.Ajax', 'UI.View.ValidateAddress'], function ($, UIDialogs, LoadingUtil, UIAlignmentUtil, UINotification, AjaxUtil, UIValidateAddress) {
	var UIVerifyAddress;
	return UIVerifyAddress = (function () {
		function UIVerifyAddress() {
			this.enableForm = bind(this.enableForm, this);
			this.handleSuccess = bind(this.handleSuccess, this);
			this.handleAddressVerification = bind(this.handleAddressVerification, this);
			this.$body = $('body');
			this.$ShippingForm = $('.checkout-shipping');
			this.$BillingForm = $('.checkout-billing:not(.gift-card)');
			this.$ProfileForm = $('#edit-address-form');
			this.$RegistrationForm = $('#RegistrationForm');
			this.$AVD = $('.address-verification-dialog');
			this.$RequestAttempts = 0;
			this.$debug = false;
			this.formArray = [];
			this.multishipDialogID = -1;
			this.UINotification = new UINotification();
		}

		UIVerifyAddress.prototype.initialize = function () {
			this.UINotification.initialize();

			$('.address').on('click', 'button[type="submit"]:not(.cancel)', (function (_this) {
				return function (e) {
					var $form, $self, $container, $addressWrapper, $addressVerified, validator, oError;
					$self = $(e.target);
					$form = $self.closest('form');
					$addressWrapper = $form.find('.new-address-wrapper');
					validator = UIValidateAddress.validateForm($form);

					if (!$form.valid() && validator.numberOfInvalids() && validator.errorList.length) {
						e.preventDefault();

						// safety code
						oError = _.find(validator.errorList, function (item) { return !!item && !!item.element; });

						if (!oError) {
							return;
						}

						if ($addressWrapper.hasClass('hidden') && $addressWrapper.find('input.error,select.error').length) {
							$addressWrapper.removeClass('hidden').show();
						}

						$('html,body').animate({
							scrollTop: $(oError.element).offset().top - $('#site-header').outerHeight()
						}, 250, function () {
							$(oError.element).focus().select();
							_this.UINotification.displayMessage('Please correct the fields below to continue.');
							$form.one('focusin', 'input, select', function (e) {
								_this.UINotification.hideMessage();
							});
						});
					}

				};
			})(this));

			if (SitePreferences.QAS_ACTIVE) {

				$addressVerified = $("form [name*='addressVerified']");

				if (!$addressVerified.length) {
					return this;
				}

				UIVerifyAddress.initializeFlags($addressVerified.closest('form'));


				return $('.checkout-shipping, #edit-address-form, #RegistrationForm').not('.no-verify').on('click', 'button[type="submit"]', (function (_this) {
					return function (e) {
						var $form, $self;
						e.preventDefault();
						$self = $(e.target);

						$form = $self.closest('form');
						return _this.handleAddressVerification($self, $form);
					};
				})(this));
			}
		};

		UIVerifyAddress.prototype.verifyMultiship = function (callback) {
			var $multishipAddressForm, $submitButton, appendAjax, postData, url;
			if (!SitePreferences.QAS_ACTIVE) {
				callback(true);
			}
			$multishipAddressForm = this.$body.find('.multiship-address-modal-form');
			$submitButton = $multishipAddressForm.find('button[type="submit"]');
			postData = $multishipAddressForm.serializeArray();
			postData.push({
				name: $submitButton.attr('name'),
				value: $submitButton.val()
			});
			appendAjax = "?format=ajax";
			url = Urls.verifyMultiShippingAddress + appendAjax;
			if ($.validator === void 0) {

				callback(true);
			}
			if ($.validator && $multishipAddressForm.valid()) {
				this.formArray.push({
					"form": $multishipAddressForm,
					"self": $submitButton
				});
				this.triggerSubmitForm = (function (_this) {
					return function () {
						return callback(true);
					};
				})(this);
				return this.submitAjax($multishipAddressForm, postData);
			} else {

				return callback(false);
			}
		};

		UIVerifyAddress.prototype.handleAddressVerification = function ($self, $form) {
			var addressWrapper, postData, url, validator, wrapperContainsError;
			if ($self.is(".cancel-button, .cancel, .select") && !$self.is(".shiptomultiplebutton")) {
				LoadingUtil.enableElement($form, $self);
				UIDialogs.close();
				return;
			}
			validator = $form.validate({
				ignore: []
			});

			if ($.validator && !$form.valid()) {
				addressWrapper = $form.find('.new-address-wrapper');

				if (addressWrapper.length) {
					wrapperContainsError = !!_.find(validator.errorList, function (errorObject) {
						var containsError;
						containsError = $.contains(addressWrapper[0], errorObject.element);
						return containsError;
					});
					if (wrapperContainsError) {
						addressWrapper.removeClass('hidden');
					}
				}

				this.UINotification.displayMessage('Please complete all required fields to continue.');
				window.scrollTo(0, $(validator.errorList[0].element).offset().top - $('#site-header').outerHeight() - 100);
				$form.on('focusin', 'input, select', (function (_this) {
					return function (e) {
						$form.off('focusin');
						return _this.UINotification.hideMessage();
					};
				})(this));
				return false;
			}
			if ($form.find("[name$='addressVerified']").val() === "true" || $form.find("[name$='customerBypassAddressVerification']").val() === "true") {

				this.formArray.push({
					"form": $form,
					"self": $self
				});
				this.triggerSubmitForm();
				LoadingUtil.enableElement($form, $self);
				UIDialogs.close();
				return;
			}
			if (this.$BillingForm.length > 0) {
				postData = $form.find("[name*='billingAddress'], [name*='securekey']").serializeArray();
			} else if (this.$RegistrationForm.length > 0) {
				postData = $form.find("[name*='profileaddress'], [name*='securekey']").serializeArray();
			} else {
				postData = $form.serializeArray();
			}
			postData.push({
				name: $self.attr('name'),
				value: $self.val()
			});
			url = this.getUrl($form);
			if ($.validator === void 0) {

				return;
			}
			if ($.validator && $form.valid()) {
				this.formArray.push({
					"form": $form,
					"self": $self
				});
				LoadingUtil.disableElement($form, $self);
				return this.submitAjax($form, postData);
			}
		};

		UIVerifyAddress.prototype.submitAjax = function (form, postData) {
			var url;
			url = this.getUrl(form);

			$.ajax({
				type: "POST",
				url: url,
				data: postData,
				error: (function (_this) {
					return function (request, status, error) {
						if (status === 'timeout') {
							_this.$RequestAttempts++;
							_this.submitAjax(form, postData);
						}
					};
				})(this),
				success: (function (_this) {
					return function (response) {
						return _this.handleSuccess(response, form);
					};
				})(this)
			});
		};

		UIVerifyAddress.prototype.showSuggestedModal = function (response, $form) {
			var $dlgContent = $('<div class="address-verification-dialog"></div>').append(response);

			dialogSettings = {
				title: 'Verify Address',
				showAsRequired: false,
				body: $dlgContent,
				submitText: null,
				altWrapperClass: 'verify-address-dialog-wrap',
				openCallback: function (dialogID) {
					var $useOriginalCTA = $dlgContent.find('[name="dwfrm_addForm_useOrig"]'),
						$useAcceptInterCTA = $dlgContent.find('[name="dwfrm_addForm_acceptInter"]'),
						$useMakeChangesCTA = $dlgContent.find('[name="dwfrm_addForm_refine"]');

					new UIAlignmentUtil('.sees-dialog-wrapper .qas-field-group');

					$useOriginalCTA.on('click', function (e) {
						e.preventDefault();
						$form.find("[name*='addressVerified']").val("false");
						$form.find("[name*='addressCorrected']").val("false");
						$form.find("[name*='customerBypassAddressVerification']").val("true");
						$dlgContent.trigger('dialog:original');
						UIDialogs.close();
					});

					$useAcceptInterCTA.on('click', function (e) {
						var address = null;

						e.preventDefault();

						$form.find("[name*='addressVerified']").val("true");
						$form.find("[name*='addressCorrected']").val("true");
						$form.find("[name*='customerBypassAddressVerification']").val("false");

						try {
							address = JSON.parse($('script.address-json.recommended').text());
						} catch (ex) { }

						$dlgContent.trigger('dialog:accept', address);
						UIDialogs.close();
					});

					$useMakeChangesCTA.on('click', function (e) {
						e.preventDefault();
						$dlgContent.trigger('dialog:cancel');
						UIDialogs.close();
					});

				},
				closeCallback: function () {
					$dlgContent.trigger('dialog:close');
				},
				submitCallback: function () {
					$dlgContent.trigger('dialog:submit');
				}
			};

			UIDialogs.prompt(dialogSettings);
			return $dlgContent;
		}

		UIVerifyAddress.prototype.handleSuccess = function (response, form) {
			var $responseObj, address, dialogSettings, newEle, newaddressEle;
			newEle = $(document.createElement('div'));
			$responseObj = $(response);
			newEle.html(response);
			newEle.addClass("address-verification-dialog");
			if (newEle.find(".address-accepted").length) {

				newaddressEle = newEle.find("#newaddress");
				address = newaddressEle.data("address");
				this.populateForm(address);
				form.find("[name*='addressVerified']").val("true");
				form.find("[name*='addressCorrected']").val("true");
				return this.triggerSubmitForm();
			} else if (newEle.find(".verifyaddress-error").length) {

				return this.triggerSubmitForm();
			} else if (newEle.find(".verifyaddress").length) {
				dialogSettings = {
					title: 'Verify Address',
					showAsRequired: false,
					body: newEle,
					submitText: null,
					altWrapperClass: 'verify-address-dialog-wrap',
					openCallback: (function (_this) {
						return function (dialogID) {
							var $dialogWrapper, $useAcceptInterCTA, $useMakeChangesCTA, $useOriginalCTA;

							$dialogWrapper = $('.address-verification-dialog');
							$useOriginalCTA = $dialogWrapper.find('[name="dwfrm_addForm_useOrig"]');
							$useAcceptInterCTA = $dialogWrapper.find('[name="dwfrm_addForm_acceptInter"]');
							$useMakeChangesCTA = $dialogWrapper.find('[name="dwfrm_addForm_refine"]');
							new UIAlignmentUtil('.sees-dialog-wrapper .qas-field-group');
							$useOriginalCTA.on('click', function (e) {
								e.preventDefault();

								form.find("[name*='addressVerified']").val("false");
								form.find("[name*='addressCorrected']").val("false");
								form.find("[name*='customerBypassAddressVerification']").val("true");
								return _this.triggerSubmitForm();
							});
							$useAcceptInterCTA.on('click', function (e) {
								e.preventDefault();

								address = $dialogWrapper.find('#newaddress').attr('data-address');
								_this.populateForm(address);
								form.find("[name*='addressVerified']").val("true");
								form.find("[name*='addressCorrected']").val("true");
								form.find("[name*='customerBypassAddressVerification']").val("false");
								return _this.triggerSubmitForm();
							});
							$useMakeChangesCTA.on('click', function (e) {
								e.preventDefault();

								return UIDialogs.close(dialogID, function () {

									form.find('.new-address-wrapper').removeClass('hidden');
									return _this.enableForm();
								}, true);
							});
							return $('.all-matches-row .showHide').on('click', function (e) {
								return $('.picklist').toggle();
							});
						};
					})(this),
					closeCallback: (function (_this) {
						return function () {

							return _this.enableForm();
						};
					})(this),
					submitCallback: function (callToClose) {

					}
				};
				return UIDialogs.prompt(dialogSettings);
			}
		};

		UIVerifyAddress.prototype.fillAddressFields = function (address, $form) {
			var field, $field;

			if (address === void 0) {
				return;
			}

			if (typeof address === 'string') {
				address = JSON.parse(address);
			}

			address.countryCode = address.countryCode || 'US';

			for (field in address) {
				if (!address.hasOwnProperty(field) || field === 'ID' || field === 'UUID' || field === 'key') {
					continue;
				}

				$field = $form.find('[name$="' + field.replace('Code', '') + '"]');

				if (!$field.attr('maxlength') || address[field].length <= +$field.attr('maxlength')) {
					$field.val(address[field]);
				}

				if (field === 'countryCode') {
					$form.find('[name$="country"]').trigger('change');
					$form.find('[name*="state"]').val(address.stateCode);
				}
			}

		};

		UIVerifyAddress.prototype.populateForm = function (address) {
			var $multishipAddressForm;
			$multishipAddressForm = this.$body.find('.multiship-address-modal-form');
			if ($multishipAddressForm.length > 0) {
				this.fillAddressFields(address, $multishipAddressForm);
				return;
			}
			if (this.$ShippingForm.length > 0) {
				this.fillAddressFields(address, this.$ShippingForm);

			}
			if (this.$BillingForm.length > 0) {
				this.fillAddressFields(address, this.$BillingForm);

			}
			if (this.$ProfileForm.length > 0) {
				this.fillAddressFields(address, this.$ProfileForm);

			}
			if (this.$RegistrationForm.length > 0) {
				this.fillAddressFields(address, this.$RegistrationForm);

			}
		};

		UIVerifyAddress.prototype.emptyForm = function ($form) { };

		UIVerifyAddress.prototype.resetForm = function ($form) {
			$form.trigger('reset');
			$form.find('select').trigger('change');
			$form.find('input:checkbox').prop('checked', true).trigger('change');
		}

		UIVerifyAddress.prototype.clearForm = function () {
			if (this.$ShippingForm.length > 0) {
				this.emptyForm(this.$ShippingForm);
			}
			if (this.$BillingForm.length > 0) {
				this.emptyForm(this.$BillingForm);
			}
			if (this.$ProfileForm.length > 0) {
				this.emptyForm(this.$ProfileForm);
			}
			if (this.$RegistrationForm.length > 0) {
				return this.emptyForm(this.$RegistrationForm);
			}
		};

		UIVerifyAddress.prototype.enableForm = function () {
			return $.each(this.formArray, (function (_this) {
				return function (i, k) {
					LoadingUtil.enableElement(k.form, k.self);
					return _.omit(_this.formArray, 0);
				};
			})(this));
		};

		UIVerifyAddress.prototype.getUrl = function ($form, type) {
			var appendAjax, url;
			appendAjax = "?format=ajax";
			if ($('.multiship-address-modal-form').length > 0) {
				url = Urls.verifyMultiShippingAddress + appendAjax;
			} else if (this.$ShippingForm.length > 0) {
				url = Urls.verifyShippingAddress + appendAjax;
			} else if (this.$BillingForm.length > 0) {
				url = Urls.verifyBillingAddress + appendAjax;
			} else if (this.$RegistrationForm.length > 0) {
				url = Urls.verifyProfileAddress + appendAjax;
			} else if (this.$ProfileForm.length > 0) {
				url = Urls.verifyAccountAddress + appendAjax;
			} else if (type === "form" && $form !== (void 0 || null)) {
				url = $form.attr('action') + appendAjax;
			} else {
				url = $form.attr('action') + appendAjax;
			}
			return url;
		};

		UIVerifyAddress.prototype.triggerSubmitForm = function () {
			var $eventSourceButton, $input;
			if (this.$ShippingForm.length > 0) {
				$eventSourceButton = this.formArray[this.formArray.length - 1].self;
				$input = $("<input>");
				$input.attr("type", "hidden").attr("name", $eventSourceButton.attr("name")).val($eventSourceButton.val());
				return this.$ShippingForm.append($input).trigger('submit');
			} else if (this.$BillingForm.length > 0) {
				$input = $("<input>");
				$input.attr("type", "hidden").attr("name", "dwfrm_billing_save").val($('[name="dwfrm_billing_save"]').val());
				return this.$BillingForm.append($input).trigger('submit');
			} else if (this.$RegistrationForm.length > 0) {
				$input = $("<input>");
				$input.attr("type", "hidden").attr("name", "dwfrm_profile_confirm").val($('[name="dwfrm_profile_confirm"]').val());
				return this.$RegistrationForm.append($input).trigger('submit');
			} else if (this.$ProfileForm.length > 0) {

				if ($('[name="dwfrm_profile_address_edit"]').length > 0) {

					$input = $("<input>");
					$input.attr("type", "hidden").attr("name", "dwfrm_profile_address_edit").val($('[name="dwfrm_profile_address_edit"]').val());
					return this.$ProfileForm.append($input).trigger('submit');
				} else if ($('[name="dwfrm_profile_address_create"]').length > 0) {

					$input = $("<input>");
					$input.attr("type", "hidden").attr("name", "dwfrm_profile_address_create").val($('[name="dwfrm_profile_address_create"]').val());
					return this.$ProfileForm.append($input).trigger('submit');
				}
			}
		};

		UIVerifyAddress.prototype.validateCreditCard = function (value, element, params) {
			var $currMonth, $currYear, $d, month, year;
			$d = new Date();
			$currMonth = $d.getMonth() + 1;
			$currYear = $d.getFullYear();
			month = parseInt($(params.month).val(), 10);
			year = parseInt($(params.year).val(), 10);
			if ((month < $currMonth && year <= $currYear) || year < $currYear) {
				return false;
			} else {
				return true;
			}
		};

		UIVerifyAddress.prototype.debugLog = function (msg) {
			if (this.$debug) {
				return console.log(msg);
			}
		};

		// generic handler for address verification
		UIVerifyAddress.prototype.verifyAddress = function ($form) {
			var self = this,
				action = { action: 'VerifyAddress-Verify', params: { format: 'ajax', wrap: '1' } },
				enableElement,
				data = {},
				kvpList;


			kvpList = $form.serializeArray();

			enableElement = UILoadingUtil.disableElement($form, $form, true);

			kvpList.forEach(function (item) {
				var $el = $('[name="' + item.name + '"]').first(),
					formId = $el.data('formid'),
					segments;

				if (!formId) {
					segments = $el.attr('name').split('_');
					formId = segments[segments.length - 1];
				}

				data[formId] = item.value || null;
			});

			AjaxUtil.actionPostJson(action, data).done(function (response) {
				var $ctnr = $('<div></div>').append(response),
					$addressJson = $ctnr.find('script.address-json'),
					$verifyAddress = $ctnr.find('.verifyaddress'),
					$modal,
					address;

				// no address returned
				if (!$verifyAddress.length && !$addressJson.length) {
					$form.trigger('submit');
					enableElement();
					return;
				}

				// accepted. fill form and submit.
				if ($addressJson.length && $addressJson.hasClass('accepted')) {
					self.fillAddressFields($addressJson.text(), $form);
					$form.find("[name$='addressVerified']").val("true");
					$form.find("[name$='addressCorrected']").val("true");
					$form.find("[name$='customerBypassAddressVerification']").val("false");
					enableElement();
					$form.trigger('verify:verified');
					return;
				}

				$ctnr.dialog({
					modal: true,
					width: 'auto',
					height: 'auto',
					maxHeight: document.documentElement.clientHeight,
					maxWidth: document.documentElement.clientWidth,
					title: 'Verify Address',
					autoOpen: false,
					dialogClass: 'sees-dialog address-verify',
					position: { my: "center", at: "center", of: window },
					close: function (e) {
						$form.trigger('verify:edit');
						$(this).dialog('destroy').remove();
					},
					open: function () {
						enableElement();
						$ctnr.find('.qas-field-group').syncDimensions('height');

						// attach events
						$ctnr.on('click', 'button.edit', function (e) {
							e.preventDefault();
							$form.trigger('verify:edit');
							$ctnr.dialog('close');
						}).on('click', 'button.use-orig', function (e) {
							e.preventDefault();
							$form.find("[name$='addressVerified']").val("false");
							$form.find("[name$='customerBypassAddressVerification']").val("true");
							$form.trigger('verify:useorig');
							$ctnr.dialog('close');
						}).on('click', 'button.accept', function (e) {
							e.preventDefault();
							self.fillAddressFields($addressJson.text(), $form);
							$form.find("[name$='addressVerified']").val("true");
							$form.find("[name$='addressCorrected']").val("true");
							$form.find("[name$='customerBypassAddressVerification']").val("false");
							$form.trigger('verify:accepted');
							$ctnr.dialog('close');
						});
					}
				});

				$ctnr.dialog('open');
			});
		}

		UIVerifyAddress.initializeFlags = function ($form) {
			var inputSelector = 'input[name*="address"]:not(:checkbox)', verifySelector;

			if ($form.data('initcomplete')) { return; }

			verifySelector = $form.find('.verify').length ? '.verify' : inputSelector;

			$form.on('change', inputSelector, function (e) {
				!!e.originalEvent && $form.find("[name*='addressList']").val('addnew');
			}).on('change', verifySelector, function (e) {
				$form.find("[name*='addressVerified']").val("false");
				$form.find("[name*='addressCorrected']").val("false");
				$form.find("[name*='customerBypassAddressVerification']").val("false");
			}).data('initcomplete', 1);
		}

		return UIVerifyAddress;

	})();
});

define('UI.View.ViewportSingleton', ['Flux.App', 'ViewportCommandBusSingleton', 'TweenLite', 'Util.Browser', 'jquery', 'lodash'], function (FluxApp, ViewportCommandBus, TweenLite, Browser, $, _) {
	var Viewport;
	Viewport = (function () {
		var _freezeViewport, _setViewportComponentHeights, _thawViewport, animationTiming, breakpointTranslateCfg, centerPanel, leftPanel, leftPanelCloseBtn, leftPanelContent, mainContainer, rightPanel, rightPanelCloseBtn, rightPanelCloseLink, rightPanelContent, scrim, scrollHeight, scrollTop, wrapper, $searchField;

		function Viewport() { }

		wrapper = document.getElementById('wrapper');

		scrim = document.getElementById('scrim');

		mainContainer = document.getElementById('mainContainer');

		leftPanel = document.getElementById('leftPanel');

		rightPanel = document.getElementById('rightPanel');

		centerPanel = document.getElementById('centerPanel');

		leftPanelCloseBtn = document.querySelector('#leftPanel__close button');

		rightPanelCloseBtn = document.querySelector('#rightPanel__close button');

		rightPanelCloseLink = document.querySelector('#rightPanel__close a');

		leftPanelContent = document.querySelector('#leftPanel__content');

		rightPanelContent = document.querySelector('#rightPanel__content');

		$searchField = $('#leftPanel .search-field');

		scrollTop = 0;

		scrollHeight = 0;

		if (!centerPanel) {
			return Viewport;
		}

		scrim.onclick = leftPanelCloseBtn.onclick = function () {
			return ViewportCommandBus.push(function () {
				return FluxApp.actions.changePanel('center');
			});
		};

		if (rightPanelCloseBtn) {
			rightPanelCloseBtn.onclick = scrim.onclick;
		}

		if (rightPanelCloseLink) {
			rightPanelCloseLink.onclick = function () {
				return ViewportCommandBus.push(function () {
					return FluxApp.actions.changePanel('center');
				});
			};
		}

		breakpointTranslateCfg = {
			mobile: {
				portrait: {
					left: '80%',
					right: '80%'
				},
				landscape: {
					left: '80%',
					right: '80%'
				}
			},
			tablet: {
				portrait: {
					left: '50%',
					right: '50%'
				},
				landscape: {
					left: '50%',
					right: '50%'
				}
			},
			desktop: {
				portrait: {
					left: 430,
					right: 430
				},
				landscape: {
					left: 430,
					right: 430
				}
			}
		};

		animationTiming = {
			panelIn: .5
		};

		FluxApp.stores.BrowserStore.on('change', function () {
			var currentPanel, properties;
			currentPanel = FluxApp.stores.ViewportStore.getState().properties.currentPanel;
			properties = FluxApp.stores.BrowserStore.getState().properties;
			if (currentPanel === 'center') {
				return;
			}
			if (properties.resized || properties.orientation !== properties.previousOrientation) {
				return _setViewportComponentHeights();
			}
		});

		FluxApp.stores.ViewportStore.on('change', function () {
			var breakpoint, currentPanel, nextPanel, orientation, ref, x, $scrim;

			$scrim = $('#scrim');
			currentPanel = FluxApp.stores.ViewportStore.getState().properties.previousPanel;
			nextPanel = FluxApp.stores.ViewportStore.getState().properties.currentPanel;
			ref = FluxApp.stores.BrowserStore.getState().properties;
			breakpoint = ref.breakpoint;
			orientation = ref.orientation;
			x = breakpointTranslateCfg[breakpoint][orientation][nextPanel];

			if (nextPanel === 'left') {
				_freezeViewport('left');
				if (currentPanel === 'center') {
					TweenLite.to(mainContainer, animationTiming.panelIn, {
						x: x,
						onComplete: function () {
							ViewportCommandBus.completeCommand();
							if (breakpoint === Browser.Breakpoints.DESKTOP) {
								$searchField.focus();
								FluxApp.actions.focusSearchField();
							}
						}
					});
					scrim.classList.add('scrim--active');
					wrapper.classList.add('menu--open');

					// hack for iOS safari 11 fix
					if (Browser.isTablet || Browser.isMobile) {
						$scrim.hide();
						setTimeout(function () { $scrim.show(); }, 500);
					}

				}
				if (currentPanel === 'right') {
					TweenLite.to(mainContainer, animationTiming.panelIn, {
						x: x,
						onComplete: function () {
							return ViewportCommandBus.completeCommand();
						}
					});
				}
			}
			if (nextPanel === 'center') {
				if (currentPanel === 'left') {
					TweenLite.to(mainContainer, animationTiming.panelIn, {
						x: '0%',
						onComplete: function () {
							ViewportCommandBus.completeCommand();
							return mainContainer.style.transform = 'initial';
						}
					});
				}
				if (currentPanel === 'right') {
					TweenLite.to(mainContainer, animationTiming.panelIn, {
						x: '0%',
						onComplete: function () {
							ViewportCommandBus.completeCommand();
							return mainContainer.style.transform = 'initial';
						}
					});
				}
				scrim.classList.remove('scrim--active');
				wrapper.classList.remove('menu--open');
				_thawViewport();
			}
			if (nextPanel === 'right') {
				_freezeViewport('right');
				x = '-' + x;
				if (currentPanel === 'left') {
					TweenLite.to(mainContainer, animationTiming.panelIn, {
						x: x,
						onComplete: function () {
							return ViewportCommandBus.completeCommand();
						}
					});
				}
				if (currentPanel === 'center') {
					TweenLite.to(mainContainer, animationTiming.panelIn, {
						x: x,
						onComplete: function () {
							return ViewportCommandBus.completeCommand();
						}
					});
					scrim.classList.add('scrim--active');
					return wrapper.classList.add('menu--open');
				}
			}
		});

		_setViewportComponentHeights = function () {
			var docHeight;
			docHeight = document.documentElement.clientHeight - 1;
			wrapper.style.height = document.getElementById('rightPanel').clientHeight;
			wrapper.scrollTop = scrollTop;

			if (rightPanel) {
				rightPanel.style.top = scrollTop + 'px';
			}
			leftPanel.style.type = scrollTop + 'px';
			leftPanel.style.height = docHeight + 'px';
			leftPanelContent.style.height = parseInt(leftPanel.style.height) - parseInt(leftPanelContent.offsetTop) + 'px';

			return scrim.style.height = scrollHeight + 'px';
		};

		_freezeViewport = function (nextPanel) {
			var docHeight;
			scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
			scrollHeight = document.body.scrollHeight;
			docHeight = document.documentElement.clientHeight - 1;
			wrapper.style.height = docHeight + 'px';
			if (rightPanel) {
				rightPanel.style.top = scrollTop + 'px';
			}
			leftPanel.style.top = scrollTop + 'px';
			leftPanel.style.height = docHeight + 'px';
			leftPanelContent.style.height = parseInt(leftPanel.style.height) - parseInt(leftPanelContent.offsetTop) + 'px';

			scrim.style.height = docHeight + 'px';
			if (nextPanel === 'right' && rightPanelContent) {
				if (docHeight < rightPanelContent.offsetHeight) {
					wrapper.style.height = (rightPanelContent.offsetHeight + 80) + 'px';
					scrim.style.top = wrapper.scrollTop + 'px';
					scrim.style.height = (rightPanelContent.offsetHeight + 80) + 'px';
				}
			}
		};

		_thawViewport = function () {
			scrollTop = wrapper.scrollTop;
			wrapper.style.height = 'auto';
			document.body.style.overflow = 'auto';

			if (rightPanel) {
				rightPanel.style.top = '0px';
				rightPanel.style.height = 'auto';
			}
			leftPanel.style.top = '0px';
			leftPanel.style.height = 'auto';

			document.body.scrollTop = scrollTop;
			return document.documentElement.scrollTop = scrollTop;

		};

		return Viewport;

	})();
	return new Viewport();
});

define('UI.View.OrderCatalog', ['lodash', 'jquery', 'ViewportCommandBusSingleton', 'UI.View.VerifyAddress'], function (_, $, ViewportCommandBus, UIVerifyAddress) {
	var OrderCatalog;
	return OrderCatalog = (function () {
		function OrderCatalog() {
			this.submit = bind(this.submit, this);
			this.disable = bind(this.disable, this);
			this.activate = bind(this.activate, this);
			this.initialize = bind(this.initialize, this);
			this.$siteHeader = $('#site-header');
			this.$main = $('#main');
			// Use $form for event 
			this.$orderCatalogBtn = $('#orderCatalogSubmit');
			this.$form = this.$main.find('.catalog-request-form');
			this.$wrapper = $('#wrapper');
			this.widgetID = '';
			this.initOrderCatalogSubmit = bind(this.initOrderCatalogSubmit, this);
			if (this.$wrapper.length === 0) {
				return false;
			}
		}

		OrderCatalog.prototype.initialize = function () {
			this.$recaptchaWrapper = this.$form.find(".recaptcha-wrapper");
			this.$recaptchaEle = this.$form.find(".recaptcha");
			this.$recaptchaError = this.$recaptchaWrapper.find('.recaptcha-error');
			this.captchaRequired = false;
			this.recaptchaComplete = false;
			this.captchaActiveClass = 'active';
			this.captchaCompleteClass = 'complete';
			//UIVerifyAddress = new UIVerifyAddress();
			//this.verifyAddressCallback = UIVerifyAddress.handleAddressVerification;
			return this.initOrderCatalogSubmit();
		};

		OrderCatalog.prototype.initOrderCatalogSubmit = function () {
			var $rError, $rWrapper, recaptchaCallback, recaptchaExpiredCallback;
			$rWrapper = this.$recaptchaWrapper;
			$rError = this.$recaptchaError;
			recaptchaCallback = (function (_this) {
				return function () {
					_this.recaptchaComplete = true;
					$rError.addClass('hide');
					return $rWrapper.addClass(_this.captchaCompleteClass);
				};
			})(this);
			recaptchaExpiredCallback = (function (_this) {
				return function () {
					_this.recaptchaComplete = false;
					return $rWrapper.removeClass(_this.captchaCompleteClass);
				};
			})(this);

			this.$form.on('click', 'button.catalog-submit', this.submit)
				.on('verify:verified verify:useorig verify:accepted', function (e) {
					//this.$form.trigger('submit');
					this.submit;
					$(this).trigger('submit');
				});

			return this.$recaptchaWrapper.addClass(this.captchaActiveClass);
		};

		OrderCatalog.prototype.disable = function () {
			this.captchaRequired = false;

			return this.$recaptchaWrapper.removeClass(this.captchaActiveClass);
		};

		OrderCatalog.prototype.submit = function (e) {
			e.preventDefault();

			var $this = $(e.currentTarget),
				$form = $this.closest('form'),
				uiVerifyAddress = new UIVerifyAddress();
			this.verifyAddressCallback = UIVerifyAddress.handleAddressVerification;

			if (this.captchaRequired) {
				if (this.recaptchaComplete) {
					return uiVerifyAddress.verifyAddress($form);
				}
				else {
					return this.$recaptchaError.removeClass('hide');
				}
			}
			else {
				return uiVerifyAddress.verifyAddress($form);
			}

		};

		return OrderCatalog;

	})();
});

define('UI.View.WrapDialogUtil', ['lodash', 'jquery', 'TweenLite', 'TimelineLite', 'Fluxxor', 'Flux.App', 'Flux.FluxMixin', 'ViewportCommandBusSingleton', 'UI.View.Dialogs', 'dataLayer'], function (_, $, TweenLite, TimelineLite, Fluxxor, FluxApp, FluxMixin, ViewportCommandBus, UIDialogs, dataLayer) {
	var UIWrapUtil, WrapDialogUtil;
	WrapDialogUtil = (function () {
		function WrapDialogUtil() {
			this.createWrapDialog = bind(this.createWrapDialog, this);
			this.$wrapper = $('#wrapper');
			this.$siteHeader = $('#site-header');
			this.$main = $('#main');
		}

		WrapDialogUtil.prototype.createWrapDialog = function ($wrapDialogContents, saveCallback) {
			var dialogSettings;
			dialogSettings = {
				title: null,
				showAsRequired: false,
				body: $wrapDialogContents,
				submitText: null,
				openCallback: (function (_this) {
					return function (dialogID) {
						var $cancelWrapCTA, $dialogContent, $saveWrapCTA, $swatchCarousels, $swatchOptions;
						$dialogContent = $('.sees-dialog-content').find('#wrap-selection-dialog-wrapper');
						$swatchCarousels = $dialogContent.find('.wrap-images-detail-carousel');
						$swatchOptions = $dialogContent.find('.wrap-option:not(.unselectable)');
						$swatchOptions.on('click', function (e) {
							var $swatchOption, swatchID;
							$swatchOption = $(e.currentTarget);
							swatchID = $swatchOption.data('wrap-id');
							$swatchOptions.removeClass('selected');
							$swatchOption.addClass('selected');
							$swatchCarousels.removeClass('active');
							return $swatchCarousels.filter('[data-wrap-id="' + swatchID + '"]').addClass('active');
						});
						$swatchCarousels.each(function (index) {
							var $swatchCarousel;
							$swatchCarousel = $($swatchCarousels[index]);
							return $swatchCarousel.slick({
								lazyLoad: 'progressive',
								dots: true,
								infinite: false,
								slidesToShow: 1,
								slidesToScroll: 1,
								prevArrow: null,
								nextArrow: null
							});
						});
						$saveWrapCTA = $dialogContent.find('.save-wrap-cta .button');
						$saveWrapCTA.on('click', function (e) {
							var $selectedWrap, wrapID, wrapVariantURL;
							e.preventDefault();
							$selectedWrap = $swatchOptions.filter('.selected');
							wrapVariantURL = $selectedWrap.data('item-url');
							wrapID = $selectedWrap.data('wrap-id');
							dataLayer.push({
								event: 'wrap',
								action: 'selected',
								detail: window.pageContext.hasOwnProperty('product') ? window.pageContext.product.name : window.pageContext.type,
								value: wrapID
							});
							saveCallback(wrapVariantURL, wrapID);
							return UIDialogs.close(dialogID);
						});
						$cancelWrapCTA = $dialogContent.find('.cancel-wrap-change');
						return $cancelWrapCTA.on('click', function (e) {
							e.preventDefault();
							return UIDialogs.close(dialogID);
						});
					};
				})(this),
				closeCallback: function () { },
				submitCallback: function (callToClose) { }
			};
			return UIDialogs.prompt(dialogSettings);
		};

		return WrapDialogUtil;

	})();
	UIWrapUtil = new WrapDialogUtil();
	return UIWrapUtil;
});

define('UI.View.YTPlayerDialog', ['jquery', 'lodash', 'UI.View.Dialogs', 'Util.Browser'], function ($, _, UIDialogs, UtilBrowser) {
	var YTPlayerDialog, touchEnabled;
	touchEnabled = false;
	return YTPlayerDialog = (function () {
		function YTPlayerDialog() { }

		YTPlayerDialog.prototype.initialize = function () {
			var firstScriptTag, tag;
			$('iframe.dialog[src*="youtube.com"]').each((function (_this) {
				return function (i, el) {
					var $el, $newEl, embedUrl, videoId, imageSrc, playBtnSrc;
					$el = $(el);
					embedUrl = $el.attr('src');
					videoId = _.last(embedUrl.split('/'));
					imageSrc = "//img.youtube.com/vi/" + videoId + "/hqdefault.jpg";
					playBtnSrc = window.Urls.playBtnImg;
					$newEl = $("<div data-youtube='" + embedUrl + "' style='height:100%;width:100%;'><img class='ytplayer-thumbnail' src='" + imageSrc + "' /><img class='play-icon' src='" + playBtnSrc + "' /></div>");
					return $el.replaceWith($newEl);
				};



			})(this));
			window.onYouTubeIframeAPIReady = this.onYouTubeIframeAPIReady;
			tag = document.createElement('script');
			tag.src = '//www.youtube.com/iframe_api';
			firstScriptTag = document.getElementsByTagName('script')[0];
			firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
			return $('body').one('touchstart', '[data-youtube], [data-youtube-player-size]', function (e) {
				return touchEnabled = true;
			});
		};

		YTPlayerDialog.prototype.onYouTubeIframeAPIReady = function () {
			var cleanUpYTPlayerDialog, promptYTPlayerDialog;
			$('body').on('click', '[data-youtube]', function (e) {
				var $el, videoId;
				e.preventDefault();
				$el = $(this);
				videoId = _.last($el.data('youtube').split('/'));
				return promptYTPlayerDialog(videoId);
			});
			cleanUpYTPlayerDialog = function (player) {
				player.destroy();
				UIDialogs.scrollable = false;
			};
			return promptYTPlayerDialog = (function (_this) {
				return function (videoId) {
					var player, playerID;
					player = null;
					playerID = _.uniqueId('YTPlayer_');
					UIDialogs.scrollable = false;
					return UIDialogs.prompt({
						title: '',
						body: $("<div id='" + playerID + "'></div>"),
						altWrapperClass: 'ytplayer-dialog',
						hideFooter: true,
						alwaysCenter: true,
						scrollable: true,
						openCallback: function (dialogID) {
							var $dialog, $player, playerWidth, $content;
							$dialog = $("[data-dialog-id=" + dialogID + "]");
							$content = $dialog.find('.sees-dialog-content');
							player = new YT.Player(playerID, {
								playerVars: {
									controls: '2',
									modestbranding: '1',
									showinfo: '0',
									theme: 'none',
									rel: '0'
								},
								height: $content.innerHeight(),
								width: $content.innerWidth(),
								videoId: videoId,
								events: {
									onReady: function (e) {
										if (!touchEnabled) {
											return e.target.playVideo();
										}
									},
									onStateChange: function (e) {
										if (e.data === YT.PlayerState.ENDED) {
											return UIDialogs.close(dialogID, _.partial(cleanUpYTPlayerDialog, player));
										}
									}
								}
							});
							$player = $("#" + playerID);
							playerWidth = $player.width();
						},
						closeCallback: function () {
							return cleanUpYTPlayerDialog(player);
						}
					});
				};
			})(this);
		};

		return YTPlayerDialog;

	})();
});

define('jquery', [], function () {
	return $;
});

define('ga', [], function () {
	return window.ga || {};
});

define('dataLayer', [], function () {
	return window.dataLayer || {};
});

define('Modernizr', [], function () {
	return Modernizr;
});

define('TweenMax', [], function () {
	return TweenMax;
});

define('TweenLite', [], function () {
	return TweenLite;
});

define('TimelineMax', [], function () {
	return TimelineMax;
});

define('TimelineLite', [], function () {
	return TimelineLite;
});

define('EasePack', [], function () {
	return EasePack;
});

define('CSSPlugin', [], function () {
	return CSSPlugin;
});

define('lodash', [], function () {
	return _;
});

define('Fluxxor', [], function () {
	return Fluxxor;
});
define('React', [], function () {
	return React;
});
define('ReactDOM', [], function () {
	return ReactDOM;
});

define('Rx', [], function () {
	return Rx;
});

define('Hammer', [], function () {
	return Hammer;
});

define('moment', [], function () {
	return moment;
});

define('DW.FluxResources', [], function () {
	return window.FluxResources;
});

define('DW.Constants', [], function () {
	return window.Constants;
});

define('DW.Resources', [], function () {
	return window.Resources;
});

define('DW.Urls', [], function () {
	return window.Urls;
});

define('DW.SitePreferences', [], function () {
	return window.SitePreferences;
});

define('DW.User', [], function () {
	return window.User;
});

require(['Fluxxor', 'React', 'ReactDOM', 'Flux.App', 'Flux.FluxMixin', 'React.StoreWatchMixin', 'App.Browser', 'React.View.HeaderNav', 'React.View.SearchPanel', 'React.View.MiniCart', 'UI.View.HeaderNav', 'UI.View.HeaderUtility', 'UI.View.PerformanceTesting', 'UI.View.ViewportSingleton', 'UI.View.FormUtilities', 'UI.View.CartMinimumOrder', 'UI.View.VerifyAddress', 'UI.View.Checkout', 'UI.View.Carousels', 'UI.View.Accordions', 'UI.View.Drawers', 'UI.View.ProductDetail', 'UI.View.OrderForms', 'UI.View.Dialogs', 'UI.View.QuantityControls', 'UI.View.SearchResults', 'UI.View.LoadingUtil', 'UI.View.GiftCardBalance', 'UI.View.Account', 'UI.View.EmailSignup', 'UI.View.SendToFriend', 'UI.View.InternationalShipping', 'UI.View.ChangeSitesDialog', 'UI.View.Cart', 'UI.View.Multiship', 'UI.View.AlignmentUtil', 'UI.View.Alignments', 'UI.View.PayByCheck', 'UI.View.WrapDialogUtil', 'UI.View.YTPlayerDialog', 'UI.View.SiteFooter', 'UI.View.ContentUtility', 'UI.View.OrderCatalog', 'UI.View.KeyHandlerUtils', 'UI.View.LeaveConfirmationDialog', 'UI.View.OrderConfirmation', 'UI.View.ContactUs', 'UI.View.AddressBookMsgs'], function (Fluxxor, React, ReactDOM, FluxApp, FluxMixin, StoreWatchMixin, Browser, ReactHeaderNav, ReactViewSearchPanel, ReactMiniCart, UIHeaderNav, UIHeaderUtility, UIPerformanceTesting, ViewportViewSingleton, UIFormUtilities, UICartMinimumOrder, UIVerifyAddress, UICheckout, UICarousels, UIAccordions, UIDrawers, UIProductDetail, UIOrderForms, UIDialogs, UIQuantityControls, UISearchResults, UILoadingUtil, UIGiftCardBalance, UIAccount, UIEmailSignup, UISendToFriend, UIInternationalShipping, UIChangeSitesDialog, UICart, UIMultiship, UIAlignmentUtil, UIAlignments, UIPayByCheck, UIWrapUtil, UIYTPlayerDialog, UISiteFooter, UIContentUtility, UIOrderCatalog, UIKeyHandlerUtils, UILeaveConfirmationDialog, UIOrderConfirmation, UIContactUs, UIAddressBookMsgs) {
	var cb, i, len, ref;
	UIHeaderNav = new UIHeaderNav();
	UIHeaderUtility = new UIHeaderUtility();
	UIFormUtilities = new UIFormUtilities();
	UICarousels = new UICarousels();
	UIAccordions = new UIAccordions();
	UIDrawers = new UIDrawers();
	UIProductDetail = new UIProductDetail();
	UIOrderForms = new UIOrderForms();
	UIVerifyAddress = new UIVerifyAddress();
	UICheckout = new UICheckout();
	UICartMinimumOrder = new UICartMinimumOrder();
	UISearchResults = new UISearchResults();
	UIGiftCardBalance = new UIGiftCardBalance();
	UIAccount = new UIAccount();
	UIEmailSignup = new UIEmailSignup();
	UISendToFriend = new UISendToFriend();
	UIInternationalShipping = new UIInternationalShipping();
	UIChangeSitesDialog = new UIChangeSitesDialog();
	UICart = new UICart();
	UIMultiship = new UIMultiship();
	UIPayByCheck = new UIPayByCheck();
	UIYTPlayerDialog = new UIYTPlayerDialog();
	UISiteFooter = new UISiteFooter();
	UIContentUtility = new UIContentUtility();
	UIOrderCatalog = new UIOrderCatalog();
	UIKeyHandlerUtils = new UIKeyHandlerUtils();
	UILeaveConfirmationDialog = new UILeaveConfirmationDialog();
	UIOrderConfirmation = new UIOrderConfirmation();
	UIContactUs = new UIContactUs();
	UIAddressBookMsgs = new UIAddressBookMsgs();

	UIHeaderNav.initialize();
	UIHeaderUtility.initialize();
	UIFormUtilities.initialize();
	UICarousels.initialize();
	UIAccordions.initialize();
	UIDrawers.initialize();
	UIProductDetail.initialize();
	UIOrderForms.initialize();
	UIVerifyAddress.initialize();
	UICheckout.initialize();
	UICartMinimumOrder.initialize();
	UISearchResults.initialize();
	UIGiftCardBalance.initialize();
	UIAccount.initialize();
	UISendToFriend.initialize();
	UIInternationalShipping.initialize();
	UIChangeSitesDialog.initialize();
	UICart.initialize();
	UIMultiship.initialize();
	UIPayByCheck.initialize();
	UIYTPlayerDialog.initialize();
	UISiteFooter.initialize();
	UIContentUtility.initialize();
	UIOrderCatalog.initialize();
	UIKeyHandlerUtils.initialize();
	UILeaveConfirmationDialog.initialize();
	UIOrderConfirmation.initialize();
	UIContactUs.initialize();
	UIAddressBookMsgs.initialize();
	UIPerformanceTesting = new UIPerformanceTesting();
	UIPerformanceTesting.initialize();


	if (window._q != null) {
		ref = window._q;
		for (i = 0, len = ref.length; i < len; i++) {
			cb = ref[i];
			cb();
		}
	}

	return window._qProcessed = true;
});

require(['jquery', 'Util.Browser', 'Util.Ajax', 'Flux.App', 'Hammer', 'UI.View.Dialogs'], function ($, Browser, AjaxUtil, FluxApp, Hammer, Dialogs) {
	var _pingId,
		$secureKeys = $('form input[name*="securekey"]');
	browserStore = FluxApp.stores.BrowserStore.getState().properties,
		$main = $('#main'),
		$ptAccount = $('.pt_account'),
		$fixedMenu = $('#fixedMenuPadding'),
		$siteHeader = $('#site-header'),
		$navWrapper = $('.relative-nav-wrapper');

	var CUST_STATUS = {
		verified: 'verified',
		registered: 'registered',
		guest: 'guest'
	};
	var SEES_EVENTS = {
		dialogOpen: 'sees:dialog-open',
		dialogClose: 'sees:dialog-close',
		sessionTimeout: 'sees:session-timeout'
	};

	function setHeaderHeight() {
		$navWrapper.height(function () {
			return Math.max.apply(null, $(this).children().map(function () { return $(this).outerHeight(); }).get());
		});

		Browser.isDesktop() && $fixedMenu.height($siteHeader.outerHeight());
	}

	function getNextZIndex() {
		var maxZIndex = $('.ui-dialog,.sees-dialog-wrapper,#sticky-container').getMaxZIndex() || 100;
		return maxZIndex + 1;
	}

	function extendDialog() {
		var anime = Browser.isMobile() ? 'slide' : null, 
			options = {
				dialogClass: 'sees-dialog',
				width: 'auto',
				height: 'auto',
				maxWidth: Browser.getViewportWidth(),
				minWidth: 350,
				hide: anime,
				closeOnEscape: false,
				show: anime
			};

		$.widget('ui.dialog', $.ui.dialog, {
			options: options,
			close: function () {
				this._super();
				this.element.trigger(SEES_EVENTS.dialogClose);
			},
			open: function () {
				var $self = $(this.element);
				this._isMobile = Browser.Breakpoints.Width.mobile();
				this.element.trigger(SEES_EVENTS.dialogOpen);
				this._super();
				var $closeButton = $self.parent().find('.ui-dialog-titlebar-close'),
					closeText = $.trim($self.parent().find('.ui-dialog-titlebar-close').text());

				$closeButton.text('').append('<span class="ui-button-text">' + closeText + '</span>');
				this.refresh();

				(new Hammer($self.parent()[0])).on("swipeleft", function (ev) {
					if (!~ev.srcEvent.type.indexOf('mouse')) {
						$self.dialog('close');
					}
				});

				return this;
			},
			_destroy: function () {
				this.element.trigger(SEES_EVENTS.dialogClose);
				this._super();
			},
			calcInternalHeight: function () {
				this._internalHeight = this.element.parent().outerHeight();
				return this;
			},
			refresh: function () {
				var settings = { position: { my: "center", at: "center", of: window } };

				if (!this.isOpen) { return; }

				this.calcInternalHeight();

				if (Browser.getViewportHeight() < this._internalHeight) {
					settings = { position: { my: "top", at: "top", of: window }, maxHeight: Browser.getViewportHeight() };
				}

				settings.width = this._isMobile ? Browser.getViewportWidth() : 'auto';

				return this.option(settings);
			}

		});
	}

	function extendJq() {

		$.fn.getMaxZIndex = function () {
			return Math.max.apply(null, $(this).map(function () {
				return $(this).zIndex() || 0
			}).get());
		}

		$.fn.square = function () {
			return this.each(function () {
				var $this = $(this);
				$this.css('height', $this.width());
			});
		}

		$.fn.syncDimensions = function () {
			if (!this.is(':visible')) {
				return this;
			}

			var args = [].slice.call(arguments),
				max = {},
				dimensions = this.map(function () {
					var $this = $(this);
					return {
						width: $this.outerWidth(true) + 2,
						height: $this.outerHeight(true) + 2
					};

				}).get();

			if (!args.length || ~args.indexOf('width')) {
				dimensions.sort(function (a, b) {
					return b.width - a.width;
				});

				max.width = Math.max.apply(null, _.pluck(dimensions, 'width'));
			}
			if (!args.length || ~args.indexOf('height')) {
				dimensions.sort(function (a, b) {
					return b.height - a.height;
				});

				max.height = dimensions[0].height;
			}

			return this.css(max);
		};

		$.fn.loader = function (action, settings) {
			var $self = $(this),
				cls = ['shade'],
				arg = arguments.length ? arguments[0] : null,
				show = !arg;

			if (typeof arg === 'string') {
				show = true;
				cls.push(arg);
			}
			else if (typeof arg === 'boolean') {
				show = arg;
			}

			if (show) {
				$('<div class="' + cls.join(' ') + '"></div>').width($self.width())
					.append($('<div class="loader"><div>We\'re processing your request<br/>Thanks for your patience</div></div>').css(settings || {}))
					.appendTo(this).fadeIn(250)
					.css("z-index", 32012);
			}
			else {
				this.find('.shade').remove();
			}

			return this;
		}

		$.extend({
			confirm: function (settings) {
				// message - message displayed
				// title - dialog title
				// yes - yes event handler
				// no - no event handler
				var $cfm,
					dialogClasses = ['confirm', 'sees-dialog'],
					deferred = $.Deferred();

				settings.dialogClass && dialogClasses.push(settings.dialogClass);
				settings.dialogClass = dialogClasses.join(' ');

				settings = $.extend({
					modal: true,
					autoOpen: false,
					resizable: false,
					buttons: [{
						text: "Yes",
						class: 'button',
						click: function (e) {
							settings.yes && settings.yes.call(this, e);
							deferred.resolve(true);
							$(this).dialog('close');
						}
					}, {
						text: "No",
						class: 'button',
						click: function (e) {
							e.preventDefault();
							settings.no && settings.no.call(this, e);
							deferred.resolve(false);
							$(this).dialog('close');
						}
					}
					],
					open: function () {
						$(this).dialog('option', {
							width: 'auto',
							height: 'auto'
						});
					},
					close: function (event, ui) {
						$(this).dialog('destroy').remove();
					}
				}, settings);

				$('<div></div>').append(settings.message).dialog(settings).dialog('open');

				return deferred.promise();

			},
			alert: function (settings) {
				// message - message displayed
				// title - dialog title
				// ok - ok event handler
				var deferred = $.Deferred();
				var dialogClasses = ['alert sees-dialog'];
				
				if ($('.sees-dialog.alert').length) {
					return deferred.promise();
				}

				settings.dialogClass && dialogClasses.push(settings.dialogClass);
				settings.dialogClass = dialogClasses.join(' ');

				settings = $.extend({
					modal: true,
					autoOpen: true,
					resizable: false,
					position: { my: "center", at: "center", of: window },
					closeText: 'Hide',
					buttons: [{
						text: "OK",
						class: 'button',
						click: function (e) {
							settings.ok && settings.ok.call(this, e);
							$(this).dialog("close");
						}
					}
					],
					open: function () {

						$(this).dialog('option', {
							width: 'auto',
							height: 'auto'
						});
					},
					close: function (event, ui) {
						deferred.resolve('ok');
						$(this).dialog('destroy').remove();
					}
				}, settings);

				$('<div class="sees-alert"></div>').html(settings.message).dialog(settings);

				return deferred.promise();
			}
		});

	}
	function cacheFormKeys() {

		if (!$secureKeys.length) { return; }

		klist = _.uniq($secureKeys.map(function () {
			return $(this).attr('name') + ':' + $(this).val();
		}).get()).join('|');

		document.cookie = 'dwsk=' + klist + ';path=/';
	}

	function handleRedirect(data) {
		if (data.timeout) {
			return $(document).trigger(SEES_EVENTS.sessionTimeout);
		}

		if (data.redirect) {
			return window.location = data.redirect;
		}
	}

	function setPromoBanner() {

		// Create a duplicate copy of the site banner in the homepage hero.
		var $hero = $('.site-promotional-banner-container-hero'),
			$ctnr = $('.site-promotional-banner-container'),
			$collapsedHero = $('.site-promotional-banner-container-collapsed-hero'),
			$collapsedCtnr = $('.site-promotional-banner-container-collapsed');


		if ($hero.length > 0 && $ctnr.length > 0 && $collapsedHero.length > 0 && $collapsedCtnr.length > 0) {
			$hero.html($ctnr.html());
			$collapsedHero.html($collapsedCtnr.html());
			return toggleSiteBanner();
		}

		toggleSiteBanner();
		if ($hero.length > 0 && $ctnr.length > 0 && $collapsedHero.length === 0) {
			$hero.html($ctnr.html());
			$('.site-promotional-banner-close-button.promo-banner-button').attr("style", "display:none");
			$('.site-promotion-inner').attr("style", "border: none;");
		}
	}

	function sessionPing() {
		AjaxUtil.ajaxAction('Customer-Status', { dataType: 'json', cache: false }).done(function (data) {
			var ctx = window.pageContext;
			if (ctx.sid === data.sid && ctx.cd.status === data.status) {
				return;
			}

			window.clearInterval(_pingId);
			data.timeout = 1;
			handleRedirect(data);
		});
	}

	function breakpointChange(state) {
		$(document.body).removeClass([Browser.Breakpoints.DESKTOP, Browser.Breakpoints.TABLET, Browser.Breakpoints.MOBILE].join(' '))
			.addClass(state.properties.breakpoint);

		if (!$ptAccount.length) {
			$('#fixedMenuPadding').height($('#site-header').outerHeight());
		}
	}

	function attachGlobalEvents() {
		var $htmlBody = $('html,body'), dialogClass = 'dialog-active';
		var inputTypes = ["email", "hidden", "number", "search", "tel", "text", "url"].map(function (type) {
			return 'input[type="' + type + '"]';
		}).concat(['textarea', 'input:text']);

		$(window).on(SEES_EVENTS.dialogOpen, function () {
			$htmlBody.addClass(dialogClass);
		}).on(SEES_EVENTS.dialogClose, function () {
			$htmlBody.removeClass(dialogClass);
		}).on('resize', function () {
			if (!$htmlBody.hasClass(dialogClass)) { return; }
			$('.sees-dialog .ui-dialog-content').dialog('refresh');
		}).on(SEES_EVENTS.sessionTimeout, function (e) {
			var $this = $(this),
				resMsg = 'timeout.' + (window.pageContext.cd.status || CUST_STATUS.registered),
				resTitle = 'timeout.title',
				resBody = 'timeout.body',
				resources = [
					{ key: resTitle, bundle: 'locale' },
					{ key: resBody, bundle: 'locale' },
					{ key: resMsg, bundle: 'locale' }
				];

			if ($this.data('to-processing')) {
				return;
			}
			$this.data('to-processing', true);

			AjaxUtil.getMsg(resources).done(function (messages) {
				var body = _.findWhere(messages, { key: resBody }).message,
					title = _.findWhere(messages, { key: resTitle }).message,
					msg = _.findWhere(messages, { key: resMsg }).message,
					settings = {
						message: '<div>' + body + '</div><div>' + msg + '</div>',
						title: title
					};

				if (window.pageContext.cd.status === CUST_STATUS.guest) {
					return $.alert(settings).done(function () {
						window.location = window.location.pathname;
					});
				}

				return $.confirm(settings).done(function (login) {
					window.location = login ? (window.Urls.loginUrl + '?return=1') : window.location.pathname;
				});
			});
		});

		FluxApp.stores.BrowserStore.on('change', function () {
			var state = this.getState();
			if (!state.properties.resized || state.properties.breakpoint === state.properties.previousBreakpoint) {
				return;
			}
			setHeaderHeight();
			breakpointChange(state);
		});

		$(document).on('click', function (e) {
			var $searchForm = $('#search-form');

			if ($searchForm.length && $searchForm.find('input[name="q"]').val().length > 2) {
				$('.autocomplete-suggestion-contents').css('display', 'none');
			}

		}).on('click', '[data-ym-pixel]', function (e) {
			var $this = $(this), img = new Image(0, 0);
			img.src = "https://link.p0.com/1x1c.dyn?p=" + $this.data('ym-pixel');
		}).on('click', '.content-popup', function (e) {
			var $this = $(this),
				fragment = $this.data('fragment');

			e.preventDefault();

			$.ajax({
				url: $this.attr('href') || $this.data('url')
			}).done(function (html) {
				var $content = $('<i>' + html + '<i>'),
					$fragment = fragment ? $content.find(fragment) : null,
					title,
					cid;
				
				if ($fragment && $fragment.length) {
					$content = $fragment;
				}
				$content.dialog();
			});
		}).on('blur change', inputTypes.join(), function (e) {
			var $this = $(this);
			$this.val($this.val().trim());
		}).on('submit', 'form', function (e) {
			$(this).find(inputTypes.join()).val(function (idx, value) {
				return value.trim();
			});
		}).ajaxSuccess(function (e, x, s, data) {
			handleRedirect(data);
		}).ajaxError(function (e, xhr, status, err) {
			var contentType = xhr.getResponseHeader('Content-Type'), data;

			if (contentType && ~contentType.indexOf('json')) {
				handleRedirect(JSON.parse(xhr.responseText));
			}
		});

		window['_fs_ready'] = function () {
			var fsurl = FS.getCurrentSessionURL();

			if (!fsurl) { return; }

			try {
				!!window.pageContext.cd.dwid && (FS.identify(window.pageContext.cd.dwid));
			} catch (ex) { }

			if (!~document.cookie.indexOf('fsdone')) {
				AjaxUtil.ajaxAction({
					action: 'resource-fs',
					params: { url: fsurl }
				}).done(function (response) {
					response.success && (document.cookie = 'fsdone=1;path=/');
				});
			}
		};

		$('.give-feedback').on('click', function (e) {
			oo_feedback.show(e);
		});

		if ($secureKeys.length) {
			_pingId = window.setInterval(sessionPing, 1000 * 60 * 5);
		}

		$('.site-promotional-banner-container').css('margin-top', '0');

		setHeaderHeight();
		breakpointChange(FluxApp.stores.BrowserStore.getState());
		cacheFormKeys();
	}

	setPromoBanner();
	extendDialog();
	extendJq();
	attachGlobalEvents();
});


function setBannerCookie(cname, cvalue) {
	document.cookie = cname + "=" + cvalue + ";path=/";
}
function getBannerCookie(cname) {
	var name = cname + "=";
	var ca = document.cookie.split(';');
	for (var i = 0; i < ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == ' ') {
			c = c.substring(1);
		}
		if (c.indexOf(name) == 0) {
			return c.substring(name.length, c.length);
		}
	}
	return "";
}
function deleteBannerCookie(cname) {
	document.cookie = cname + "=;expires=Thu, 01 Jan 1900 00:00:01 GMT;path=/";
}
function siteBannerCookieFound() {
	var cookie = getBannerCookie('sees-banner');
	if (cookie == '') {
		return false;
	}
	else {
		return true;
	}
}
function toggleSiteBanner() {
	if ($('.landing-hero').is(':visible')) {
		if (siteBannerCookieFound()) {
			$('.site-promotional-banner-container').hide();
			$('.site-promotional-banner-container-collapsed').hide();
			$('.site-promotional-banner-container-hero').hide();
			$('.site-promotional-banner-container-collapsed-hero').show();
		}
		else {
			$('.site-promotional-banner-container').hide();
			$('.site-promotional-banner-container-collapsed').hide();
			$('.site-promotional-banner-container-hero').show();
			$('.site-promotional-banner-container-collapsed-hero').hide();
		}
	}
	else {
		if (siteBannerCookieFound()) {
			$('.site-promotional-banner-container').hide();
			$('.site-promotional-banner-container-collapsed').show();
			$('.site-promotional-banner-container-hero').hide();
			$('.site-promotional-banner-container-collapsed-hero').hide();
		}
		else {
			$('.site-promotional-banner-container').show();
			$('.site-promotional-banner-container-collapsed').hide();
			$('.site-promotional-banner-container-hero').hide();
			$('.site-promotional-banner-container-collapsed-hero').hide();
		}
	}
}
$(document).on('click', '.close-site-banner', function (event) {
	event.preventDefault();
	setBannerCookie('sees-banner', 'site-promotional-banner-closed');
	setTimeout(function () {
		toggleSiteBanner();
	}, 100);
});
$(document).on('click', '.open-site-banner', function (event) {
	event.preventDefault();
	deleteBannerCookie('sees-banner');
	setTimeout(function () {
		toggleSiteBanner();
	}, 100);
});
function togglePromotionalSiteBanner(bannerNumber, delayTime) {
	if (bannerNumber == 1) {
		$('.site-promotional-banner-image').show();
		$('.site-promotional-banner-image2').hide();
		setTimeout(function () { togglePromotionalSiteBanner(2, delayTime); }, delayTime);
	}
	else {
		$('.site-promotional-banner-image').hide();
		$('.site-promotional-banner-image2').show();
		setTimeout(function () { togglePromotionalSiteBanner(1, delayTime); }, delayTime);
	}
}
function profitcalcQtyChange(event, calc, rows, selection) {
	var items_selected = 0;
	event.preventDefault();
	for (i = 0; i < rows; i++) {
		var ii = i + 1;
		var checkbox = 'checkbox_' + calc + '_' + ii.toString();
		if (selection == 'SELECTED') {
			if (document.getElementById(checkbox).checked) {
				items_selected++;
			}
		}
	}
	if (items_selected == 0) {
		//alert('Select one or more items.');
		showProfitCalcSelectionPopup();
	}
	else {
		for (i = 0; i < rows; i++) {
			var ii = i + 1;
			var qty = '#qty_' + calc + '_' + ii.toString();
			var checkbox = 'checkbox_' + calc + '_' + ii.toString();
			if (selection == 'SELECTED') {
				if (document.getElementById(checkbox).checked) {
					if ($('#change_all_qty_' + calc).val().trim() == '') {
						$(qty).val(0);
					}
					else {
						$(qty).val($('#change_all_qty_' + calc).val());
					}
					calculateProfit(document.getElementById(checkbox), calc);
					document.getElementById(checkbox).checked = false;
				}
			}
			else {
				if ($('#change_all_qty_' + calc).val().trim() == '') {
					$(qty).val(0);
				}
				else {
					$(qty).val($('#change_all_qty_' + calc).val());
				}
				calculateProfit(document.getElementById(checkbox), calc);
				document.getElementById(checkbox).checked = false;
			}
		}
		clearSelectAllCheckBox(calc);
	}
}
function clearSelectAllCheckBox(calc) {
	document.getElementById('profit_calc_select_all_' + calc).checked = false;
}
function showProfitCalcPopup(popupName, xPos, yPos) {
	var xPosition;
	var divHeight = $('.' + popupName).outerHeight();
	var yPosition = window.pageYOffset + ($(window).height() - divHeight) / 2;
	xPosition = ($(window).width() - $('.profitcalc_additional_profit').width()) / 2;
	xPosition = xPosition.toString() + 'px';
	yPosition = yPosition.toString() + 'px';
	$('.sees-dialog-scrim').css('display', 'inline-block');
	$('.' + popupName).css('top', yPosition);
	$('.' + popupName).css('display', 'inline-block');
	$('.' + popupName).css('left', xPosition);
	$('.' + popupName).show();
	resizeCopy();
}
function initProfitCalculatorDropDown(profitcalc) {
	var profitCalculatorOptionText = '';
	if (profitcalc == 'VALENTINES DAY') {
		profitCalculatorOptionText = 'VALENTINE&#39;S DAY';
	}
	else {
		profitCalculatorOptionText = profitcalc;
	}
	if (typeof $('.' + profitcalc.toLowerCase().replace(' ', '_') + '_enabled').val() != 'undefined') {
		$('#profit_calculator_select').append('<option value="' + profitcalc.replace(' ', '_').toLowerCase() + '_profit_calculator">' + profitCalculatorOptionText + ' FUNDRAISING</option>');
	}
	resizeCopy();
}
function selectFundraisingProgram(pgm) {
	$('.selected-fundraising-program').html(pgm);
}

function initFundraisingPage(pgm) {
	if (pgm == 'all_year_fundraising_program') {
		var oForm1 = document.forms["profcalc_1"];
		calculateProfit(oForm1.people_1, '1');
	}

	if (pgm == 'candy_bar_fundraising_program') {
		var oForm2 = document.forms["profcalc_2"];
		calculateProfit(oForm2.people_2, '2');
	}

	if (pgm == 'gift_certificate_program_materials') {
		var oForm3 = document.forms["profcalc_3"];
		calculateProfit(oForm3.people_3, '3');
	}

	if (pgm == 'Spring_Fundraising_Sales_Materials') {
		var oForm4 = document.forms["profcalc_4"];
		calculateProfit(oForm5.people_4, '4');
	}

	if (pgm == 'Valentines_Day_Fundraising_Sales_Materials') {
		var oForm5 = document.forms["profcalc_5"];
		calculateProfit(oForm6.people_5, '5');
	}

	if (pgm == 'Fall_Fundraising_Program') {
		var oForm6 = document.forms["profcalc_6"];
		calculateProfit(oForm6.people_6, '6');
	}

	if (pgm == 'Winter_Fundraising_Program') {
		var oForm7 = document.forms["profcalc_7"];
		calculateProfit(oForm7.people_7, '7');
	}

	resizeCopy();
}
$(function () {
	$('#profit_calculator_select').on('change', function () {
		$('.profit_calculator').hide();
		$('#' + $(this).val()).show();

		if ($(this).val() == 'all_year_profit_calculator') {
			var oForm1 = document.forms["profcalc_1"];
			calculateProfit(oForm1.people_1, '1');
		}
		if ($(this).val() == 'candy_bar_profit_calculator') {
			var oForm2 = document.forms["profcalc_2"];
			calculateProfit(oForm2.people_2, '2');
		}
		if ($(this).val() == 'gift_certificate_profit_calculator') {
			var oForm3 = document.forms["profcalc_3"];
			calculateProfit(oForm3.people_3, '3');
		}
		if ($(this).val() == 'valentines_day_profit_calculator') {
			var oForm4 = document.forms["profcalc_4"];
			calculateProfit(oForm4.people_4, '4');
		}
		if ($(this).val() == 'spring_profit_calculator') {
			var oForm5 = document.forms["profcalc_5"];
			calculateProfit(oForm5.people_5, '5');
		}
		if ($(this).val() == 'fall_profit_calculator') {
			var oForm6 = document.forms["profcalc_6"];
			calculateProfit(oForm6.people_6, '6');
		}
		if ($(this).val() == 'winter_profit_calculator') {
			var oForm7 = document.forms["profcalc_7"];
			calculateProfit(oForm7.people_7, '7');
		}
	});
});
function calculateProfit(obj, calc) {
	var i = 0;
	var unit_profit = 0;
	var unit_price = 0;
	var item_profit = 0;
	var item_price = 0;
	var total_profit = 0;
	var total_price = 0;
	var num_items;
	var non_bars_price = 0;
	var grand_total_profit = 0;
	var percent = 0;
	var projected_units = 0;
	var shipping_cost = 0;
	var shipping_cost_text = '';
	var formField;

	num_items = $('#num_items_' + calc).val();

	// Fix for IE Problem:  Need to update the input boxes with the latest values before calculating. 
	if (obj.name.substr(0, 3) == 'qty' || obj.name.substr(0, 6) == 'people') {
		$(obj.name).val(obj.value);
		//$('#qty_1_1').val(3);
	}

	for (i = 1; i <= num_items; i++) {

		projected_units = $('#qty_' + calc + '_' + i).val() * $('#people_' + calc).val();

		$('#projected_units_id_' + calc + '_' + i).html('<table border="0" width="100%" align="center"><tr><td align="center"><span id="calc_item_bold" class="calc_item_bold" style="padding-left:5px;">' + projected_units + '</span></td></tr></table>');

		unit_profit = $('#unit_profit_' + calc + '_' + i).val();

		unit_price = $('#unit_price_' + calc + '_' + i).val();

		$('#unit_profit_id_' + calc + '_' + i).html('<table border="0" width="100%" align="center"><tr><td align="right"><span id="calc_item_bold" class="calc_item_bold" style="padding-left:5px;">' + profitcalcFormatCurrency(unit_profit) + '</span></td></tr></table>');

		item_profit = $('#qty_' + calc + '_' + i).val() * unit_profit * $('#people_' + calc).val();

		item_price = $('#qty_' + calc + '_' + i).val() * unit_price * $('#people_' + calc).val();

		//$('#item_profit_id_'+calc+'_'+i).html('<table border="0" width="100%" style="border-color: navy; border-width: 1px 1px 1px 1px; border-style:solid"><tr><td align="right" nowrap style="padding-right:2px;"><span id="calc_profit" class="calc_profit">&nbsp;'+profitcalcFormatCurrency(item_profit)+'</span></td></tr></table> ');
		$('#item_profit_id_' + calc + '_' + i).html('<table border="0" width="100%"><tr><td align="right" nowrap style="padding-left:5px;padding-right:2px;"><span id="calc_profit" class="calc_profit">' + profitcalcFormatCurrency(item_profit) + '</span></td></tr></table> ');

		total_profit = total_profit + item_profit;

		total_price = total_price + item_price;

		if (calc != 2) {
			non_bars_price = non_bars_price + item_price;
		}
	}

	if (total_price < parseFloat($('#QDMinAmtThreshold').val())) {
		//$('#total_profit_id_'+calc).html('<table border="0" width="100%" style="border-color: navy; border-width: 1px 1px 1px 1px; border-style:solid" cellpadding="1" cellspacing="1"><tr><td align="right" nowrap style="padding-right:2px;"><span id="calc_profit" class="calc_profit">&nbsp;'+''+'</span></td></tr></table>');	
		$('#total_profit_id_' + calc).html('<table border="0" width="100%" cellpadding="1" cellspacing="1"><tr><td align="right" nowrap style="padding-right:2px;"><span id="calc_profit" class="calc_profit">' + '' + '</span></td></tr></table>');
	}
	else {
		//$('#total_profit_id_'+calc).html('<table border="0" width="100%" style="border-color: navy; border-width: 1px 1px 1px 1px; border-style:solid" cellpadding="1" cellspacing="1"><tr><td align="right" nowrap style="padding-right:2px;"><span id="calc_profit" class="calc_profit">&nbsp;'+profitcalcFormatCurrency(total_profit)+'</span></td></tr></table>');	
		$('#total_profit_id_' + calc).html('<table border="0" width="100%" cellpadding="1" cellspacing="1"><tr><td align="right" nowrap style="padding-right:2px;"><span id="calc_profit" class="calc_profit">' + profitcalcFormatCurrency(total_profit) + '</span></td></tr></table>');
	}

	additional_profit = 0;
	percent = 0;

	if (non_bars_price >= 2000 && non_bars_price <= 9999.99) {
		percent = 5;
		additional_profit = non_bars_price * .05;
	}
	else {
		if (non_bars_price >= 10000 && non_bars_price <= 39999.99) {
			percent = 7.5;
			additional_profit = non_bars_price * .075;
		}
		else {
			if (non_bars_price >= 40000) {
				percent = 10;
				additional_profit = non_bars_price * .10;
			}
		}
	}

	$('#percent_id_' + calc).html('<span id="calc_item">Additional Profit &nbsp;(' + percent + '%):</span>&nbsp;&nbsp;&nbsp;');

	//$('#additional_profit_id_'+calc).html('<table border="0" width="100%" style="border-color: navy; border-width: 1px 1px 1px 1px; border-style:solid" cellpadding="1" cellspacing="1"><tr><td align="right" style="padding-right:2px;" nowrap><span id="calc_profit" class="calc_profit">'+profitcalcFormatCurrency(additional_profit)+'</span></td></tr></table>');
	$('#additional_profit_id_' + calc).html('<table border="0" width="100%" cellpadding="1" cellspacing="1"><tr><td align="right" style="padding-right:2px;" nowrap><span id="calc_profit" class="calc_profit">' + profitcalcFormatCurrency(additional_profit) + '</span></td></tr></table>');

	if (total_price < parseFloat($('#QDMinAmtThreshold').val())) {
		// TBD
		shipping_cost = 0;
		shipping_cost_text = '';
	}
	else if (total_price >= parseFloat($('#QDMinAmtThreshold').val()) && total_price < parseFloat($('#QDMinAmtFreeShippingThreshold').val())) {
		shipping_cost = 50;
		shipping_cost_text = '$50.00';
	}
	else {
		shipping_cost = 0;
		shipping_cost_text = 'FREE';
	}

	//$('#shipping_cost_id_'+calc).html('<table border="0" width="100%" style="border-color: navy; border-width: 1px 1px 1px 1px; border-style:solid" cellpadding="1" cellspacing="1"><tr><td align="right" style="padding-right:2px;" nowrap><span id="calc_profit" class="calc_profit">'+shipping_cost_text+'</span></td></tr></table>');
	$('#shipping_cost_id_' + calc).html('<table border="0" width="100%" cellpadding="1" cellspacing="1"><tr><td align="right" style="padding-right:2px;" nowrap><span id="calc_profit" class="calc_profit">' + shipping_cost_text + '</span></td></tr></table>');

	if (total_price < parseFloat($('#QDMinAmtThreshold').val())) {
		grand_total_profit = '';
		//$('#grand_total_profit_id_'+calc).html('<table border="0" width="100%" style="border-color: navy; border-width: 1px 1px 1px 1px; border-style:solid" cellpadding="1" cellspacing="1"><tr><td align="right" style="padding-right:2px;" nowrap><b>'+''+'</b></td></tr></table>');
		$('#grand_total_profit_id_' + calc).html('<table border="0" width="100%" cellpadding="1" cellspacing="1"><tr><td align="right" style="padding-right:2px;" nowrap><b>' + '' + '</b></td></tr></table>');
	}
	else {
		grand_total_profit = total_profit + additional_profit - shipping_cost;
		//$('#grand_total_profit_id_'+calc).html('<table border="0" width="100%" style="border-color: navy; border-width: 1px 1px 1px 1px; border-style:solid" cellpadding="1" cellspacing="1"><tr><td align="right" style="padding-right:2px;" nowrap><b>'+profitcalcFormatCurrency(grand_total_profit)+'</b></td></tr></table>');
		$('#grand_total_profit_id_' + calc).html('<table border="0" width="100%" cellpadding="1" cellspacing="1"><tr><td align="right" style="padding-right:2px;" nowrap><b>' + profitcalcFormatCurrency(grand_total_profit) + '</b></td></tr></table>');
	}
	$('#grand_total_profit_' + calc).val(grand_total_profit);
}

function initFundraisingPage(pgm) {
	if (pgm == 'all_year_fundraising_program') {
		var oForm1 = document.forms["profcalc_1"];
		calculateProfit(oForm1.people_1, '1');
	}

	if (pgm == 'candy_bar_fundraising_program') {
		var oForm2 = document.forms["profcalc_2"];
		calculateProfit(oForm2.people_2, '2');
	}

	if (pgm == 'gift_certificate_program_materials') {
		var oForm3 = document.forms["profcalc_3"];
		calculateProfit(oForm3.people_3, '3');
	}

	if (pgm == 'Spring_Fundraising_Sales_Materials') {
		var oForm4 = document.forms["profcalc_4"];
		calculateProfit(oForm5.people_4, '4');
	}

	if (pgm == 'Valentines_Day_Fundraising_Sales_Materials') {
		var oForm5 = document.forms["profcalc_5"];
		calculateProfit(oForm6.people_5, '5');
	}

	if (pgm == 'Fall_Fundraising_Program') {
		var oForm6 = document.forms["profcalc_6"];
		calculateProfit(oForm6.people_6, '6');
	}

	if (pgm == 'Winter_Fundraising_Program') {
		var oForm7 = document.forms["profcalc_7"];
		calculateProfit(oForm7.people_7, '7');
	}

	resizeCopy();
}
function profitcalcFormatCurrency(num) {
	num = num.toString().replace(/\$|\,/g, '');
	if (isNaN(num))
		num = "0";
	sign = (num == (num = Math.abs(num)));
	num = Math.floor(num * 100 + 0.50000000001);
	cents = num % 100;
	num = Math.floor(num / 100).toString();
	if (cents < 10)
		cents = "0" + cents;
	for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
		num = num.substring(0, num.length - (4 * i + 3)) + ',' +
			num.substring(num.length - (4 * i + 3));
	//return (((sign)?'':'-') + '$&nbsp;' + num + '.' + cents);
	return (((sign) ? '' : '-') + '$' + num + '.' + cents);
}
function selectAllItemsProfitCalculator(event, calc, rows, selection) {
	for (i = 0; i < rows; i++) {
		var ii = i + 1;
		var checkbox = 'checkbox_' + calc + '_' + ii.toString();
		if (selection == 'ALL') {
			if (document.getElementById('profit_calc_select_all_' + calc).checked) {
				document.getElementById(checkbox).checked = true;
			}
			else {
				document.getElementById(checkbox).checked = false;
			}
		}
	}
}
function getProfitCalculatorQuantity(calc, rows, selection, h_low, h_high, increment) {
	var quantity = 0;
	for (h = h_low; h <= h_high; h += increment) {
		//alert(h);
		for (i = 0; i < rows; i++) {
			var ii = i + 1;
			var qty = '#qty_' + calc + '_' + ii.toString();
			var checkbox = 'checkbox_' + calc + '_' + ii.toString();
			if (selection == 'SELECTED') {
				if (document.getElementById(checkbox).checked) {
					//items_selected++;
					$(qty).val(h);
					calculateProfit(document.getElementById(checkbox), calc);
				}
				else {
					$(qty).val(0);
					calculateProfit(document.getElementById(checkbox), calc);
				}
			}
		}
		//alert($('#entered_grand_total_profit_id_' + calc).val());
		//alert('grand_total_profit = ' + $('#grand_total_profit_' + calc).val());
		if (Number($('#grand_total_profit_' + calc).val()) >= Number($('#entered_grand_total_profit_id_' + calc).val())) {
			quantity = h;
			break;
		}
	}
	return quantity;
}
function calculateQtySoldPerHelper(event, calc, rows, selection) {
	var h_high = 1000000000;
	var h_low = 0;
	var increment;
	var items_selected = 0;

	if (Number($('#entered_grand_total_profit_id_' + calc).val()) > 1000000000) {
		//alert('Enter a smaller profit target');
		showProfitCalcSmallerTargetPopup();
	}
	else {
		for (i = 0; i < rows; i++) {
			var ii = i + 1;
			var checkbox = 'checkbox_' + calc + '_' + ii.toString();
			if (selection == 'SELECTED') {
				if (document.getElementById(checkbox).checked) {
					items_selected++;
				}
			}
		}
		if (items_selected == 0) {
			//alert('Select one or more items.');
			showProfitCalcSelectionPopup();
		}
		else {
			if (Number($('#entered_grand_total_profit_id_' + calc).val()) > 100000000) {
				h_low = h_high - 1000000000;
				increment = 100000000;
				h_high = getProfitCalculatorQuantity(calc, rows, selection, h_low, h_high, increment);
			}
			else {
				h_high = 100000000;
			}
			if (Number($('#entered_grand_total_profit_id_' + calc).val()) > 10000000) {
				h_low = h_high - 100000000;
				increment = 10000000;
				h_high = getProfitCalculatorQuantity(calc, rows, selection, h_low, h_high, increment);
			}
			else {
				h_high = 10000000;
			}
			if (Number($('#entered_grand_total_profit_id_' + calc).val()) > 1000000) {
				h_low = h_high - 10000000;
				increment = 1000000;
				h_high = getProfitCalculatorQuantity(calc, rows, selection, h_low, h_high, increment);
			}
			else {
				h_high = 1000000;
			}
			if (Number($('#entered_grand_total_profit_id_' + calc).val()) > 100000) {
				h_low = h_high - 1000000;
				increment = 100000;
				h_high = getProfitCalculatorQuantity(calc, rows, selection, h_low, h_high, increment);
			}
			else {
				h_high = 100000;
			}
			if (Number($('#entered_grand_total_profit_id_' + calc).val()) > 10000) {
				h_low = h_high - 100000;
				increment = 10000;
				h_high = getProfitCalculatorQuantity(calc, rows, selection, h_low, h_high, increment);
			}
			else {
				h_high = 10000;
			}
			if (Number($('#entered_grand_total_profit_id_' + calc).val()) > 1000) {
				h_low = h_high - 10000;
				increment = 1000;
				h_high = getProfitCalculatorQuantity(calc, rows, selection, h_low, h_high, increment);
			}
			else {
				h_high = 1000;
			}
			if (Number($('#entered_grand_total_profit_id_' + calc).val()) > 100) {
				h_low = h_high - 1000;
				increment = 100;
				h_high = getProfitCalculatorQuantity(calc, rows, selection, h_low, h_high, increment);
			}
			else {
				h_high = 100;
			}
			if (Number($('#entered_grand_total_profit_id_' + calc).val()) > 10) {
				h_low = h_high - 100;
				increment = 10;
				h_high = getProfitCalculatorQuantity(calc, rows, selection, h_low, h_high, increment);
			}
			else {
				h_high = 10;
			}
			h_low = h_high - 10;
			increment = 1;
			h_high = getProfitCalculatorQuantity(calc, rows, selection, h_low, h_high, increment);
		}
	}
}
function clearProfitTarget(calc) {
	$('#entered_grand_total_profit_id_' + calc).val('');
}
function showProfitCalcSelectionPopup() {
	var popupName = 'profitcalc_selection';
	var xPosition;
	var divHeight = $('.' + popupName).outerHeight();
	var yPosition = window.pageYOffset + ($(window).height() - divHeight) / 2;
	xPosition = ($(window).width() - $('.' + popupName).width()) / 2;
	xPosition = xPosition.toString() + 'px';
	yPosition = yPosition.toString() + 'px';
	$('.sees-dialog-scrim').css('display', 'inline-block');
	$('.' + popupName).css('top', yPosition);
	$('.' + popupName).css('display', 'inline-block');
	$('.' + popupName).css('left', xPosition);
	$('.' + popupName).show();
}
function showProfitCalcSmallerTargetPopup() {
	var popupName = 'profitcalc_smaller_target';
	var xPosition;
	var divHeight = $('.' + popupName).outerHeight();
	var yPosition = window.pageYOffset + ($(window).height() - divHeight) / 2;
	xPosition = ($(window).width() - $('.' + popupName).width()) / 2;
	xPosition = xPosition.toString() + 'px';
	yPosition = yPosition.toString() + 'px';
	$('.sees-dialog-scrim').css('display', 'inline-block');
	$('.' + popupName).css('top', yPosition);
	$('.' + popupName).css('display', 'inline-block');
	$('.' + popupName).css('left', xPosition);
	$('.' + popupName).show();
}
var getUrlParameter = function getUrlParameter(sParam) {
	var sPageURL = decodeURIComponent(window.location.search.substring(1)),
		sURLVariables = sPageURL.split('&'),
		sParameterName,
		i;

	for (i = 0; i < sURLVariables.length; i++) {
		sParameterName = sURLVariables[i].split('=');

		if (sParameterName[0] === sParam) {
			return sParameterName[1] === undefined ? true : sParameterName[1];
		}
	}
};
